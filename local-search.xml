<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>TCP拥塞控制算法–从 CUBIC 到 BBRv2</title>
    <link href="/TCP_BBR/"/>
    <url>/TCP_BBR/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Linux 默认的CUBIC算法，在高延迟、高丢包的网络情况下，单线程TCP性能会严重受限制。</p><p>BBR算法可以提高TCP传输在高延迟网络中的性能表现，可以最大程度的利用带宽。于Linux kernel 4.9开始正式加入内核。</p><p>PS：但注意只会加速上行流量。</p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>诞生于1974年的TCP协议（Transmission Control Protocol，传输控制协议）绝对算得上是最古老的网络协议之一，很可能是当今互联网上使用最多的网络协议。我们每个人每天不经意间就会发送和接收几十万甚至超过一百万以上的TCP数据包用来收看视频、玩游戏或者进行网络社交。</p><p>再进一步，也许你还了解目前互联网上最流行的两种传输协议UDP和TCP。UDP概括起来是一个“发送后不管”的协议。它是无状态的，没有拥塞控制或可靠的传输支持，这也导致了网络运营商会针对UDP协议的限流。我们经常看到UDP被用于DNS（域名系统）和NTP（网络时间协议）等。与之相对，TCP则像是UDP互补的孪生兄弟，提供了可靠的传输和流量控制，因此TCP协议也变得相当复杂。</p><p>人们通常认为TCP和UDP的主要区别就是TCP给我们提供了可靠的数据包传输。当然这是TCP最重要的功能之一，但TCP协议还为我们提供了流量控制。流量控制关乎网络使用的公平性，这对互联网的有效运行是至关重要的。TCP使用多种拥塞控制策略来避免拥塞。具体来讲，TCP会为每条连接维护一个“<a href="https://zh.wikipedia.org/wiki/TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6#%E6%8B%A5%E5%A1%9E%E7%AA%97%E5%8F%A3">拥塞窗口</a>”来限制可能在端对端间传输的未确认分组的总数量。并且，TCP在一个连接初始化或超时后使用一种“慢启动”机制来增加拥塞窗口的大小。所谓的“慢启动”，指的是初始值虽然比较低，但其增长极快：当每个分段得到确认时，拥塞窗口会增加一个MSS（Maximum segment size），使得在每次<a href="https://zh.wikipedia.org/wiki/%E4%BE%86%E5%9B%9E%E9%80%9A%E8%A8%8A%E5%BB%B6%E9%81%B2">往返时间</a>（Round-trip time，RTT）内拥塞窗口能高效地双倍增长。设想一下，如果没有这种形式的流量控制，互联网注定会在海量的数据传输之下不堪使用。</p><p>许多年来，不同的流量控制算法已经在各种TCP堆栈中实现和使用。你可能听说过TCP上的一些术语，例如Cubic、Tahoe、Vegas、Reno、Westwood，以及最近流行的BBR等。这些都是TCP中使用的不同拥塞控制算法。这些算法的作用是决定发送方应该以多快的速度发送数据，并同时适应网络的变化。如果没有这些算法，我们的互联网一定会被数据填满并且崩溃。</p><p>在Linux 下检查当前可用的拥塞算法可以使用如下命令：</p><p><code>sysctl net.ipv4.tcp_available_congestion_control</code></p><p>在我的这台机器上就得到了如下的结果 ：</p><p><code>net.ipv4.tcp_available_congestion_control = reno cubic bbr bbr2 hybla highspeed htcp veno westwood vegas</code></p><p>如果想了解当前使用了哪一种拥塞算法可以使用以下命令：</p><p><code>sysctl net.ipv4.tcp_congestion_control</code></p><p>得到的结果如下。可以看出当前使用的是Cubic算法</p><p><code>net.ipv4.tcp_congestion_control = cubic</code></p><p>这里提到的Cubic 是一种较为温和的拥塞算法，它使用三次函数作为其拥塞窗口的算法，并且使用函数拐点作为拥塞窗口的设置值。Linux内核在2.6.19后使用该算法作为默认TCP拥塞算法。我们今天所使用的绝大多数Linux 分发版本，例如Ubuntu、Amazon Linux 等均将Cubic作为缺省的 TCP流量控制的拥塞算法。</p><h3 id="BBR-算法"><a href="#BBR-算法" class="headerlink" title="BBR 算法"></a>BBR 算法</h3><p>TCP的BBR（Bottleneck Bandwidth and Round-trip propagation time，BBR）是谷歌在2016年开发的一种新型的TCP 拥塞控制算法。在此以前，互联网主要使用基于丢包的拥塞控制策略，只依靠丢失数据包的迹象作为减缓发送速率的信号。这样做的的效果还是不错的，但随着全球化互联网的迅速普及，我们所使用的网络已经发生了巨大的变化。我们拥有了越来越大的带宽，而现在的互联网质量也越来越好。于是我们观察到了一些新的问题，比如影响延迟的缓冲区膨胀的问题。BBR尝试通过使用全新的拥塞控制来解决这个问题，它使用基于延迟而不是丢包作为决定发送速率的主要因素。下图是一个原理的演示：</p><p><a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/talking-about-network-optimization-from-the-flow1.gif"><img src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/talking-about-network-optimization-from-the-flow1.gif" srcset="/img/loading.gif" lazyload></a><a href="https://cloud.google.com/blog/products/gcp/tcp-bbr-congestion-control-comes-to-gcp-your-internet-just-got-faster">https://cloud.google.com/blog/products/gcp/tcp-bbr-congestion-control-comes-to-gcp-your-internet-just-got-faster</a></p><h2 id="为什么BBR会更好？"><a href="#为什么BBR会更好？" class="headerlink" title="为什么BBR会更好？"></a>为什么BBR会更好？</h2><p>尽管我省略了很多细节，但还免不了是涉及相对复杂的概念。但需要了解的是，使用BBR，可以获得显著的网络吞吐量的提升和延迟的降低。吞吐量的改善在远距离路径上尤为明显，比如跨太平洋的文件或者大数据的传输，尤其是在有轻微丢包的网络条件下。延迟的改善主要体现在最后一公里的路径上，而这一路径经常受到缓冲膨胀（Bufferbloat）的影响。所谓“缓冲膨胀”指的网络设备或者系统不必要地设计了过大的缓冲区。当网络链路<a href="https://zh.wikipedia.org/wiki/%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6">拥塞</a>时，就会发生缓冲膨胀，从而导致数据包在这些超大缓冲区中长时间排队。在<a href="https://zh.wikipedia.org/wiki/%E5%85%88%E9%80%B2%E5%85%88%E5%87%BA%E6%BC%94%E7%AE%97%E6%B3%95">先进先出</a>队列系统中，过大的缓冲区会导致更长的队列和更高的延迟，并且不会提高网络吞吐量。由于BBR并不会试图填满缓冲区，所以在避免缓冲区膨胀方面往往会有更好的表现。</p><h2 id="看一看BBR的表现"><a href="#看一看BBR的表现" class="headerlink" title="看一看BBR的表现"></a>看一看BBR的表现</h2><p>BBR从4.9版本开始就已经出现在Linux内核之中，可以通过一个简单的sysctl命令来启用。在我的测试中，我使用两台EC2 实例作为测试的硬件，安装的操作系统为Ubuntu 20.04。为了满足测试的要求，我将Linux 核心替换为我定制的5.8版本的核心。这两台实例运行在同一个区域的同一个可用区之下。实例的类型是c5.2xlarge，网卡为Amazon ENA，实例的网络最大带宽为10Gbps。</p><p>第一个测试是简单的带宽测试，看看我们可以从两台实例之间的单个TCP流量中得到什么。使用iperf3的测试显示了两台实例之间的带宽为4.98 Gbits&#x2F;秒。这足以运行我们的实验。</p><p><a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/talking-about-network-optimization-from-the-flow2.jpg"><img src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/talking-about-network-optimization-from-the-flow2.png" srcset="/img/loading.gif" lazyload></a></p><h3 id="延迟对TCP吞吐量的影响"><a href="#延迟对TCP吞吐量的影响" class="headerlink" title="延迟对TCP吞吐量的影响"></a>延迟对TCP吞吐量的影响</h3><p>在现实的使用中，我所用到的服务器可能分布在世界的各个地区，所以我主要关心的是服务器之间的网络性能，当然网络间的延迟是在所难免的。在这个测试中，我们将使用Linux流量控制工具(tc) 在两台实例之间引入100ms的往返时间。这大致相当于从美国俄勒冈的us-west-2 访问位于日本东京的github.com服务器(52.192.72.89)之间的延迟。</p><p>现在我们来看一下正常情况下两台实例的网络延迟</p><p><a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/talking-about-network-optimization-from-the-flow3.jpg"><img src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/talking-about-network-optimization-from-the-flow3.png" srcset="/img/loading.gif" lazyload></a></p><p>接下来，可以像下面这样在两台服务器的收发每个方向增加50ms的延迟。</p><p><code>sudo tc qdisc replace dev eth0 root netem latency 50ms</code></p><p>（注：取消上述的设置可以使用这个命令 <code>sudo tc qdisc del dev eth0 root</code> ）</p><p>如果我们用ping命令做一个检测，现在可以看到100ms的往返时间</p><p><a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/talking-about-network-optimization-from-the-flow4.jpg"><img src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/talking-about-network-optimization-from-the-flow4.png" srcset="/img/loading.gif" lazyload></a></p><p>好了，该轮到我们的第一个测试了，我先用Cubic拥塞算法开始，因为这是目前最常用的TCP拥塞控制算法。</p><p><code>sudo sysctl -w net.ipv4.tcp_congestion_control=cubic</code></p><p>iperf3的测试显示平均传输速度为611 Mbits&#x2F;秒。这是延迟对TCP吞吐量影响的第一条线索。与我们的初始测试（4.98Gbits&#x2F;秒）相比，唯一发生变化的是引入了100ms的往返延迟。现在我们将拥塞控制算法设置为bbr，再进行一次测试。</p><p><code>sudo sysctl -w net.ipv4.tcp_congestion_control=bbr</code></p><p>结果与上一次很相似，约为 609 Mbits&#x2F;秒，这比使用Cubic的结果略低。到目前为止，我们还没有看到真正的变化。</p><h3 id="丢包对吞吐量的影响"><a href="#丢包对吞吐量的影响" class="headerlink" title="丢包对吞吐量的影响"></a>丢包对吞吐量的影响</h3><p>我们要重复上面同样的测试，但要增加少量的丢包。通过下面的命令，我只在服务器（发送方）端引入1.5%的丢包量。</p><p><code>sudo tc qdisc replace dev eth0 root netem loss 1.5% latency 50ms</code></p><p>在使用Cubic算法的第一次测试中，显示出吞吐量的急剧下降；吞吐量下降到了10.5 Mbs&#x2F;秒。这个下降的幅度大约是99.7%，导致这个链路的带宽基本上无法满足数据传输的需要了。</p><p><a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/talking-about-network-optimization-from-the-flow5.jpg"><img src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/talking-about-network-optimization-from-the-flow5.png" srcset="/img/loading.gif" lazyload></a></p><p>如果我们用BBR重复完全相同的测试，我们会看到比Cubic有显著的改善。使用BBR后，吞吐量下降到333Mbits&#x2F;秒，下降了45%。</p><p><a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/talking-about-network-optimization-from-the-flow6.jpg"><img src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/talking-about-network-optimization-from-the-flow6.png" srcset="/img/loading.gif" lazyload></a></p><p>上面的测试显示了丢包和延迟对TCP吞吐量的巨大影响。在一个高延迟的路径上，仅仅是少量的数据包丢失（1.5%）就会产生了巨大的影响。在这些较长的路径上使用除BBR以外的任何其他技术，当出现哪怕是少量的丢包时，都会造成很大的问题。也只有BBR在任何超过1.5%的丢包损失时都能保持一个不错的吞吐量数字。</p><p><a href="https://toonk.io/author/andree/index.html">Andree Toonk</a> 在他的<a href="https://toonk.io/tcp-bbr-exploring-tcp-congestion-control/index.html">博客</a>中验证了了使用不同拥塞控制算法、延迟和丢包参数所做的各种TCP吞吐量测试的全套测试，证明了在一定的丢包率（1.5%、3%）的情况下BBR的出色表现。结果如下图：</p><p><a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/talking-about-network-optimization-from-the-flow7.jpg"><img src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/talking-about-network-optimization-from-the-flow7.png" srcset="/img/loading.gif" lazyload></a>网络吞吐量 – 各种拥塞控制算法的测试结果</p><p>_注意：一个TCP__会话使用的拥塞控制算法只与局部有关。所以，两个TCP__系统可以在TCP__会话的两边使用不同的拥塞控制算法。换句话说：服务器(__发送方)_<em>，可以在本地启用BBR__，而客户端不需要知道BBR__，也不需要启用BBR__。</em></p><h3 id="TCP-ss-socket-statistics-工具"><a href="#TCP-ss-socket-statistics-工具" class="headerlink" title="TCP ss (socket statistics) 工具"></a>TCP ss (socket statistics) 工具</h3><p>当我们在探索调整TCP性能的时候，一定不要忘记使用_socket statistics_,</p><p>，也就是ss命令。例如下图所示，ss这个工具可以显示大量的套接字信息，包括使用的TCP流控算法，每个TCP会话的往返时间以及计算出的带宽和两个对等体之间的实际传输速率等，可以很好的用于网络监测和优化。</p><p><a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/talking-about-network-optimization-from-the-flow8.jpg"><img src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/talking-about-network-optimization-from-the-flow8.png" srcset="/img/loading.gif" lazyload></a></p><h3 id="何时使用BBR"><a href="#何时使用BBR" class="headerlink" title="何时使用BBR"></a>何时使用BBR</h3><p>网络在没有丢包的情况下，Cubic和BBR对于这些较长时延的链路都有很好的表现。而在中度丢包的情况下，BBR的表现就非常突出了。为什么这一点很重要呢？或者换一个说法，为什么要针对丢包情况而进行优化？对于这个问题，让我们考虑一下这样的场景：我们在不同的地方放置有服务器，需要在系统或者服务器之间有源源不断的数据传输。例如日志文件、数据库同步、业务数据的异地备份等等。而在复杂的网络环境下，会因为各种原因而出现丢包的情况。在这种场景下，BBR将会大放异彩，帮助您维护更好的网络数据传输。</p><p>显而易见，BBR对所谓的“长肥网络”（带宽延迟积大、丢包率高的网络）非常有效，在CDN和视频应用等场景下也被证明有很好的表现。事实上，Youtube、Spotify和Dropbox大规模应用BBR已经有了很多的积累。这主要是因为BBR会积极地提升到最佳发送速率，使你的视频流加载或者文件下载速度更快。这是Dropbox 在2017年的一篇技术博客，非常值得我们学习。</p><p><a href="https://dropbox.tech/infrastructure/optimizing-web-servers-for-high-throughput-and-low-latency">Optimizing web servers for high throughput and low latency</a></p><h3 id="BBR的缺点"><a href="#BBR的缺点" class="headerlink" title="BBR的缺点"></a>BBR的缺点</h3><p>看这个标题很觉得奇怪吧。明明只要执行一个sysctl命令，你就能获得更好的吞吐量，网络用户就会获得更好的体验，有什么理由不这样做呢？好吧，BBR自出世以来已经收到了一些批评，首先，因为它倾向于抢占Cubic算法的带宽，在网络公平性上明显存在不足；其次BBR的机制会导致高重传率；第三点是在Wi-Fi环境下用户的网速明显变慢。综合来看，BBR与Cubic 相比只能说互有优劣，各有其擅长的领域。</p><h4 id="BBRv2-点展望"><a href="#BBRv2-点展望" class="headerlink" title="BBRv2 点展望"></a>BBRv2 点展望</h4><p>针对BBR 的问题，BBRv2的目标就是解决第一版中存在的一些主要缺点，其改进包括了还使用聚合&#x2F;运行中的参数增强了网络建模，并增加了对ECN(显式拥塞通知)的支持等。为便于理解，我们可以通过这样一张表来了解这几个拥塞算法的异同。</p><p><a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/talking-about-network-optimization-from-the-flow9.jpg"><img src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/talking-about-network-optimization-from-the-flow9.png" srcset="/img/loading.gif" lazyload></a>注：ECN是指网络瓶颈通知发送方在用尽缓冲区并开始“丢尾”数据包之前放慢速度的一种方式</p><p>现在我们了解了BBRv2，我们再将之前的实验重复一次，看一看BBRv2的具体表现。</p><p>我们先将拥塞算法设定为BBRv2</p><p><code>sudo sysctl -w net.ipv4.tcp_congestion_control=bbr2</code></p><p>接下来，使用iperf3 进行测速，结果如下：</p><p><a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/talking-about-network-optimization-from-the-flow10.jpg"><img src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/talking-about-network-optimization-from-the-flow10.png" srcset="/img/loading.gif" lazyload></a></p><p>对比BBRv2、BBRv1的这两个实验，我们能明显的观察到BBRv2 较之BBR速度明显变“慢”了。但这可以说是一件好事，因为这或许是BBRv2广泛应用的前提。</p><p>随着BBRv2的出现，Dropbox 已经在其Dropbox Edge Network上进行了试用。在这篇博客中深入讨论了BBRv2的实践，值得一读。</p><p><a href="https://dropbox.tech/infrastructure/evaluating-bbrv2-on-the-dropbox-edge-network">Evaluating BBRv2 on the Dropbox Edge Network</a></p><p>这篇文章的结论对于BBRv2有很高的评价，特摘录出来：</p><p>“在我们的测试中，BBRv2显示了以下特性:</p><ol><li>对于网速较低的用户来说，带宽可以与CUBIC媲美。</li><li>对于网速较高的用户来说，带宽可以与BBRv1媲美。</li><li>丢包率比BBRv1低4倍；但仍然比CUBIC高2倍。</li><li>传输中的数据比BBRv1低3倍；但略低于CUBIC。</li><li>RTTs较BBRv1低；但仍然比CUBIC高。</li><li>与BBRv1相比，RTT具有更高的公平性。</li></ol><p>总的来说，BBRv2在BBRv1基础上有了很大的改进，而且在需要更高带宽的情况下，它更接近于成为Reno&#x2F;CUBIC的完全替代品。添加实验性的ECN支持，我们甚至可以看到他可以成为Datacenter TCP (DCTCP)的完全替代者。”</p><p>自2019年算法被提出， BBR2 已有了3个年头，但仍处于Alpha&#x2F;Preview Release。各大主流的Linux 分发版本中并没有集成进来。有意了解这个项目不妨通过GitHub 的这个地址来关注一下, <a href="https://github.com/google/bbr">https://github.com/google/bbr</a>。但是如果想尝鲜却有点麻烦，只能通过编译Linux Kernel 来得到tcp_bbr.ko 这个内核模块。另一种选择是不妨体验一下我刚刚完成的一个基于Ubuntu 20.04 的Linux kernel，其中就包括了这个BBRv2。<br><a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/talking-about-network-optimization-from-the-flow11.jpg"><img src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/talking-about-network-optimization-from-the-flow11.png" srcset="/img/loading.gif" lazyload></a></p><p>如果对于BBR 或者BBRv2以及这个新的Linux Kernel有兴趣需要与我讨论，可以通过这个邮箱与我联系<a href="http://lianghon@amazon.com/">lianghon@amazon.com</a>。</p><h2 id="本篇作者"><a href="#本篇作者" class="headerlink" title="本篇作者"></a>本篇作者</h2><h3 id="费良宏"><a href="#费良宏" class="headerlink" title="费良宏"></a>费良宏</h3><p>费良宏，AWS Principal Developer Advocate。在过去的20多年一直从事软件架构、程序开发以及技术推广等领域的工作。他经常在各类技术会议上发表演讲进行分享，他还是多个技术社区的热心参与者。他擅长Web领域应用、移动应用以及机器学习等的开发，也从事过多个大型软件项目的设计、开发与项目管理。目前他专注与云计算以及互联网等技术领域，致力于帮助中国的 开发者构建基于云计算的新一代的互联网应用。</p><h1 id="转载来源"><a href="#转载来源" class="headerlink" title="转载来源"></a>转载来源</h1><p><a href="https://aws.amazon.com/cn/blogs/china/talking-about-network-optimization-from-the-flow-control-algorithm/">AWS官方博客</a></p>]]></content>
    
    
    <categories>
      
      <category>network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>tcp</tag>
      
      <tag>BBR</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Zabbix SNMP开机时间497天重置问题</title>
    <link href="/zabbix-SNMP-uptime-497day/"/>
    <url>/zabbix-SNMP-uptime-497day/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>工作中遇到，网络设备开机时间到了约497天的时候（<strong>或者每过497天</strong>），Zabbix SNMP获取的时间值就会归零，重新计数，但查看设备状态正常，未重启。</p><span id="more"></span><h1 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h1><p>sysUpTimeInstance  OID  <strong>1.3.6.1.2.1.1.3.0</strong></p><p>获取的时间单位为 0.01秒，而此OID为32bit，所以最大只能显示<code>42949672.96秒</code>即497.1天，所以每累计大于此限制，就会重置，导致开机时间获取不正确。</p><p><a href="https://oidref.com/1.3.6.1.2.1.1.3.0">https://oidref.com/1.3.6.1.2.1.1.3.0</a> </p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>snmpEngineTime  OID <strong>1.3.6.1.6.3.10.2.1.3.0</strong></p><p>获取的时间单位为秒，也为32bti，但最多可以存储49710 天。足够设备生命周期使用。</p><p>修改Zabbix SNMP获取时间的方式为上述OID即可，其数据类型为整数。</p><p>注意：此为SNMP的启动时间，若SNMP进程重启，也会导致时间重置。</p><p><a href="https://oidref.com/1.3.6.1.6.3.10.2.1.3">https://oidref.com/1.3.6.1.6.3.10.2.1.3</a> </p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.zabbix.com/forum/zabbix-help/47245-snmp-uptime-overflow-after-497-days">https://www.zabbix.com/forum/zabbix-help/47245-snmp-uptime-overflow-after-497-days</a> </p><p><a href="https://support.huawei.com/enterprise/zh/doc/EDOC1000017243/3e06cc7f">https://support.huawei.com/enterprise/zh/doc/EDOC1000017243/3e06cc7f</a> </p>]]></content>
    
    
    <categories>
      
      <category>Zabbix</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>Linux</tag>
      
      <tag>snmp</tag>
      
      <tag>Zabbix</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>接收SEC OTP4000 UDP告警日志</title>
    <link href="/SEC_OTP_UDP-log/"/>
    <url>/SEC_OTP_UDP-log/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>本教程用于鼎频通信的SEC OTP4000波分设备系列的告警接收。</p><p>PS：很小众的东西。</p><span id="more"></span><h1 id="报文分析"><a href="#报文分析" class="headerlink" title="报文分析"></a>报文分析</h1><p>经配置设备的SNMP Trap服务器后，分析报文不为SNMP Trap报文。</p><p>由简单的UDP报文承载告警信息，字符编码为中文编码 （GB18030）。</p><p>端口号为UDP 9000。</p><h1 id="Logstash-配置接收UDP日志"><a href="#Logstash-配置接收UDP日志" class="headerlink" title="Logstash 配置接收UDP日志"></a>Logstash 配置接收UDP日志</h1><p>vim &#x2F;etc&#x2F;logstash&#x2F;conf.d&#x2F;trap.conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs conf">input &#123;<br>  udp &#123;<br>    type =&gt; &quot;UDP-Logs&quot;<br>    port =&gt; 9000<br>        codec =&gt; plain&#123; charset =&gt; &quot;GB18030&quot; <br>       &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h1 id="ELK与告警"><a href="#ELK与告警" class="headerlink" title="ELK与告警"></a>ELK与告警</h1><p>单机搭建：<a href="https://songxwn.com/elk/">https://songxwn.com/elk/</a> </p><p>告警搭建：<a href="https://songxwn.com/frostmourne_install/">https://songxwn.com/frostmourne_install/</a> </p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>ELK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>elk</tag>
      
      <tag>syslog</tag>
      
      <tag>snmp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VXLAN 基本配置</title>
    <link href="/VXLAN_Configuration/"/>
    <url>/VXLAN_Configuration/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>本文章介绍了静态VXLAN配置方案。</p><p>本文章是针对华为系列网络设备的学习笔记。</p><p>VNI在VXLAN网络上有全局意义，而BD只有本地意义。</p><span id="more"></span><h1 id="VXLAN配置介绍"><a href="#VXLAN配置介绍" class="headerlink" title="VXLAN配置介绍"></a>VXLAN配置介绍</h1><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-number">1</span>. 创建广播域BD<br><br>[Huawei] bridge-domain bd-id<br><br><span class="hljs-comment"># 系统视图下创建广播域BD，进入BD视图。ID取值范围为1～16777215。</span><br><br><span class="hljs-number">2</span>. 创建VNI<br><br>[Huawei-bd10<span class="hljs-number">0</span>] vxlan vni vni-id<br><br><span class="hljs-comment"># BD视图下创建VXLAN网络标识VNI并关联广播域BD。ID取值范围为1～16777215。</span><br><br><span class="hljs-number">3</span>. 创建NVE接口。<br><br>[Huawei] interface nve nve-number<br><br><span class="hljs-comment"># 创建NVE接口，并进入NVE接口视图。一般情况下NVE接口编号有且仅为1。</span><br><br><span class="hljs-number">4</span>. 配置源VTEP的IP地址。<br><br>[Huawei-Nve1] source ip-address<br><br><span class="hljs-comment"># 配置源端VTEP的IP地址。一般规划使用Loopback接口的地址。</span><br><br><span class="hljs-number">5</span>.  配置头端复制列表。<br><br>[Huawei-Nve1] vni vni-id head-end peer-list <span class="hljs-number">1.1</span>.<span class="hljs-number">1.1</span><br><br><span class="hljs-comment"># NVE视图下配置VNI指定多个远端VTEP的IP地址建立头端复制列表。本端NVE将根据此列表复制并转发报文。</span><br><br><span class="hljs-number">6</span>.  配置业务接入（子接口接入方式）。<br><br>[Huawei-GE1/<span class="hljs-number">0</span>/<span class="hljs-number">1.1</span>] encapsulation &#123; dot1<span class="hljs-string">q [ vid low-vid [ to high-vid ]</span> ] | default | untag | qin<span class="hljs-string">q [ vid id ]</span>&#125;<br><br><span class="hljs-comment"># 二层子接口视图下配置流封装类型，实现不同二层子接口接入不同的数据报文。</span><br><br><span class="hljs-number">7</span>.  配置业务接入点（VLAN接入方式）。<br><br>[Huawei-bd10<span class="hljs-number">0</span>] l2 binding vlan vlan-id<br><br><span class="hljs-comment"># BD视图下配置。全局VLAN绑定到广播域BD前，请确保全局VLAN已经创建和相关接口已加入该VLAN。</span><br><br><span class="hljs-number">8</span>.   配置三层网关。<br><br>[Huawei] interface vbdif bd-id<br><br><span class="hljs-comment"># 系统视图下创建VBDIF接口，并进入VBDIF接口视图后续配置网关IP地址。</span><br><br></code></pre></td></tr></table></figure><h1 id="同VNI同网段二层互访"><a href="#同VNI同网段二层互访" class="headerlink" title="同VNI同网段二层互访"></a>同VNI同网段二层互访</h1><h2 id="配置案例-1-VLAN绑定接入"><a href="#配置案例-1-VLAN绑定接入" class="headerlink" title="配置案例(1)-VLAN绑定接入"></a>配置案例(1)-VLAN绑定接入</h2><p><img src="https://i.328888.xyz/2023/05/10/iY43cN.png" srcset="/img/loading.gif" lazyload></p><ul><li>两台交换机配置VXLAN隧道，实现相同网段三台PC之间的互访。</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">[<span class="hljs-keyword">SW1] </span><span class="hljs-keyword">bridge-domain </span><span class="hljs-number">100</span><br>[<span class="hljs-keyword">SW1-bd100] </span>vxlan vni <span class="hljs-number">10000</span><br><br>[<span class="hljs-keyword">SW1] </span>interface Nve <span class="hljs-number">1</span><br>[<span class="hljs-keyword">SW1-Nve1] </span>source <span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br>[<span class="hljs-keyword">SW1-Nve1] </span>vni <span class="hljs-number">10000</span> head-end peer-list <span class="hljs-number">2</span>.<span class="hljs-number">2</span>.<span class="hljs-number">2</span>.<span class="hljs-number">2</span><br><br>[<span class="hljs-keyword">SW2] </span><span class="hljs-keyword">bridge-domain </span><span class="hljs-number">100</span><br>[<span class="hljs-keyword">SW2-bd100] </span>vxlan vni <span class="hljs-number">10000</span><br><br>[<span class="hljs-keyword">SW2] </span>interface Nve <span class="hljs-number">1</span><br>[<span class="hljs-keyword">SW2-Nve1] </span>source <span class="hljs-number">2</span>.<span class="hljs-number">2</span>.<span class="hljs-number">2</span>.<span class="hljs-number">2</span><br>[<span class="hljs-keyword">SW2-Nve1] </span>vni <span class="hljs-number">10000</span> head-end peer-list <span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><h2 id="配置案例-2-子接口接入"><a href="#配置案例-2-子接口接入" class="headerlink" title="配置案例(2)-子接口接入"></a>配置案例(2)-子接口接入</h2><p><img src="https://i.328888.xyz/2023/05/10/iY4xww.png" srcset="/img/loading.gif" lazyload></p><ul><li>两台交换机配置VXLAN隧道，实现相同网段三台PC之间的互访。 </li><li>子接口接入的VLAN配置，和交换机本身的VLAN并无关联。</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[SW1] <span class="hljs-keyword">interface</span> GigabitEthernet <span class="hljs-number">1</span><span class="hljs-regexp">/0/</span><span class="hljs-number">1.1</span> mode l2<br>[SW1-GigabitEthernet1<span class="hljs-regexp">/0/</span><span class="hljs-number">1.1</span>] encapsulation untag<br>[SW1-GigabitEthernet1<span class="hljs-regexp">/0/</span><span class="hljs-number">1.1</span>] bridge-domain <span class="hljs-number">100</span><br><br>[SW1] <span class="hljs-keyword">interface</span> GigabitEthernet <span class="hljs-number">1</span><span class="hljs-regexp">/0/</span><span class="hljs-number">2.1</span> mode l2<br>[SW1-GigabitEthernet1<span class="hljs-regexp">/0/</span><span class="hljs-number">2.1</span>] encapsulation untag<br>[SW1-GigabitEthernet1<span class="hljs-regexp">/0/</span><span class="hljs-number">2.1</span>] bridge-domain <span class="hljs-number">100</span><br><br>[SW2] bridge-domain <span class="hljs-number">100</span><br>[SW2-bd100] l2 binding vlan <span class="hljs-number">1</span><br><br><br></code></pre></td></tr></table></figure><p><strong>思考：</strong></p><p>SW2的接入方式和SW1有什么区别？</p><blockquote><p>SW1为二层子接口接入方式，而SW2为绑定VLAN的接入方式。</p></blockquote><p>如何配置网关192.168.1.254？</p><blockquote><p>创建VBDIF接口作为对应BD内终端的网关。</p></blockquote><h1 id="不同VNI不同网段三层互访（集中式网关）"><a href="#不同VNI不同网段三层互访（集中式网关）" class="headerlink" title="不同VNI不同网段三层互访（集中式网关）"></a>不同VNI不同网段三层互访（集中式网关）</h1><h2 id="配置VXAN隧道和业务接入"><a href="#配置VXAN隧道和业务接入" class="headerlink" title="配置VXAN隧道和业务接入"></a>配置VXAN隧道和业务接入</h2><ul><li>三台交换机配置VXLAN隧道，实现跨网段两台PC之间的互访。VXLAN网关集中在SW3。</li></ul><p><img src="https://i.328888.xyz/2023/05/10/iY41GP.png" srcset="/img/loading.gif" lazyload></p><h3 id="VXLAN隧道配置"><a href="#VXLAN隧道配置" class="headerlink" title="VXLAN隧道配置"></a>VXLAN隧道配置</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">[<span class="hljs-keyword">SW1] </span><span class="hljs-keyword">bridge-domain </span><span class="hljs-number">100</span><br>[<span class="hljs-keyword">SW1-bd100] </span>vxlan vni <span class="hljs-number">10000</span><br><br>[<span class="hljs-keyword">SW1] </span>interface Nve <span class="hljs-number">1</span><br>[<span class="hljs-keyword">SW1-Nve1] </span>source <span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br>[<span class="hljs-keyword">SW1-Nve1] </span>vni <span class="hljs-number">10000</span> head-end peer-list <span class="hljs-number">3</span>.<span class="hljs-number">3</span>.<span class="hljs-number">3</span>.<span class="hljs-number">3</span><br><br>[<span class="hljs-keyword">SW2] </span><span class="hljs-keyword">bridge-domain </span><span class="hljs-number">200</span><br>[<span class="hljs-keyword">SW2-bd100] </span>vxlan vni <span class="hljs-number">20000</span><br><br>[<span class="hljs-keyword">SW2] </span>interface Nve <span class="hljs-number">1</span><br>[<span class="hljs-keyword">SW2-Nve1] </span>source <span class="hljs-number">2</span>.<span class="hljs-number">2</span>.<span class="hljs-number">2</span>.<span class="hljs-number">2</span><br>[<span class="hljs-keyword">SW2-Nve1] </span>vni <span class="hljs-number">20000</span> head-end peer-list <span class="hljs-number">3</span>.<span class="hljs-number">3</span>.<span class="hljs-number">3</span>.<span class="hljs-number">3</span><br><br></code></pre></td></tr></table></figure><h3 id="业务接入"><a href="#业务接入" class="headerlink" title="业务接入"></a>业务接入</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[SW1] <span class="hljs-keyword">interface</span> GigabitEthernet <span class="hljs-number">1</span><span class="hljs-regexp">/0/</span><span class="hljs-number">1.1</span> mode l2<br>[SW1-GigabitEthernet1<span class="hljs-regexp">/0/</span><span class="hljs-number">1.1</span>] encapsulation untag<br>[SW1-GigabitEthernet1<span class="hljs-regexp">/0/</span><span class="hljs-number">1.1</span>] bridge-domain <span class="hljs-number">100</span><br><br>[SW2] <span class="hljs-keyword">interface</span> GigabitEthernet <span class="hljs-number">1</span><span class="hljs-regexp">/0/</span><span class="hljs-number">1.1</span> mode l2<br>[SW2-GigabitEthernet1<span class="hljs-regexp">/0/</span><span class="hljs-number">1.1</span>] encapsulation untag<br>[SW2-GigabitEthernet1<span class="hljs-regexp">/0/</span><span class="hljs-number">1.1</span>] bridge-domain <span class="hljs-number">200</span><br><br></code></pre></td></tr></table></figure><p>PS：如果192.168.2.10流量携带标签VLAN 20，该如何配置SW2？</p><blockquote><p>SW2的GE1&#x2F;0&#x2F;1配置为Trunk接口放通VLAN 20（实际配置为Access接口，default VLAN配置为20同样也可以），在BD 200中绑定VLAN 20。</p></blockquote><h2 id="配置网关"><a href="#配置网关" class="headerlink" title="配置网关"></a>配置网关</h2><ul><li>三台交换机配置VXLAN隧道，实现跨网段两台PC之间的互访。VXLAN网关集中在SW3。</li></ul><p><img src="https://i.328888.xyz/2023/05/10/iY4u7J.png" srcset="/img/loading.gif" lazyload></p><h3 id="SW3配置"><a href="#SW3配置" class="headerlink" title="SW3配置"></a>SW3配置</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">[<span class="hljs-keyword">SW3] </span><span class="hljs-keyword">bridge-domain </span><span class="hljs-number">100</span><br>[<span class="hljs-keyword">SW3-bd100] </span>vxlan vni <span class="hljs-number">10000</span><br><br>[<span class="hljs-keyword">SW3] </span><span class="hljs-keyword">bridge-domain </span><span class="hljs-number">200</span><br>[<span class="hljs-keyword">SW3-bd200] </span>vxlan vni <span class="hljs-number">20000</span><br><br>[<span class="hljs-keyword">SW3] </span>interface Nve <span class="hljs-number">1</span><br>[<span class="hljs-keyword">SW3-Nve1] </span>source <span class="hljs-number">3</span>.<span class="hljs-number">3</span>.<span class="hljs-number">3</span>.<span class="hljs-number">3</span><br>[<span class="hljs-keyword">SW3-Nve1] </span>vni <span class="hljs-number">10000</span> head-end peer-list <span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br>[<span class="hljs-keyword">SW3-Nve1] </span>vni <span class="hljs-number">20000</span> head-end peer-list <span class="hljs-number">2</span>.<span class="hljs-number">2</span>.<span class="hljs-number">2</span>.<span class="hljs-number">2</span><br><br>[<span class="hljs-keyword">SW3] </span>interface Vbdif100<br>[<span class="hljs-keyword">SW3-Vbdif100] </span>ip <span class="hljs-keyword">address </span><span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span> <span class="hljs-number">24</span><br><br>[<span class="hljs-keyword">SW3] </span>interface Vbdif200<br>[<span class="hljs-keyword">SW3-Vbdif200] </span>ip <span class="hljs-keyword">address </span><span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">2</span>.<span class="hljs-number">1</span> <span class="hljs-number">24</span><br><br></code></pre></td></tr></table></figure><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/VXLAN_Principle/">VXLAN 转发原理</a></li><li><a href="https://songxwn.com/VXLAN_Basic/">VXLAN 基本概念</a></li><li><a href="https://songxwn.com/zabbix-reboot-SNMPv3/">Zabbix SNMPv3 设备重启后无法监控问题</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>network</category>
      
      <category>vxlan</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>vxlan</tag>
      
      <tag>l2vpn</tag>
      
      <tag>datacom</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VXLAN 转发原理</title>
    <link href="/VXLAN_Principle/"/>
    <url>/VXLAN_Principle/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>VXLAN工作原理如下：</p><ol><li>在每个数据中心的交换机上都配置一个VTEP（VXLAN Tunnel Endpoints），用于封装和解封装VXLAN报文。</li><li>在两个VTEP之间建立一个VXLAN隧道，用于在两个数据中心之间传输封装后的VXLAN报文。</li><li>当虚拟机之间需要通信时，它们的报文会被发送到所在数据中心的交换机上。交换机上的VTEP会将报文封装成VXLAN报文，并通过VXLAN隧道发送到另一个数据中心的交换机上。</li><li>另一个数据中心的交换机上的VTEP会将VXLAN报文解封装，还原成原始报文，并发送给目标虚拟机。</li></ol><p>这样，虚拟机之间就可以通过VXLAN隧道进行通信了。</p><p>本文章介绍了其工作原理和配置方案。</p><p>本文章是针对华为系列网络设备的学习笔记。</p><span id="more"></span><h1 id="VXLAN隧道的建立方式"><a href="#VXLAN隧道的建立方式" class="headerlink" title="VXLAN隧道的建立方式"></a>VXLAN隧道的建立方式</h1><p><strong>VXLAN隧道由一对VTEP确定，报文在VTEP设备进行封装之后在VXLAN隧道中依靠路由进行传输。只要VXLAN隧道的两端VTEP是三层路由可达的，VXLAN隧道就可以建立成功。</strong></p><p><strong>根据VXLAN隧道的创建方式将VXLAN隧道分为以下两种：</strong></p><ul><li>静态隧道：通过用户手工配置本端和远端的VNI、VTEP IP地址和头端复制列表（head-end peer-list）来完成。</li><li>动态隧道：通过BGP EVPN（Ethernet VPN，以太网虚拟私有网络）方式动态建立VXLAN隧道。在VTEP之间建立BGP EVPN对等体，然后对等体之间利用BGP EVPN路由来互相传递VNI和VTEP IP地址信息，从而实现动态地建立VXLAN隧道。</li></ul><h1 id="静态VXLAN隧道"><a href="#静态VXLAN隧道" class="headerlink" title="静态VXLAN隧道"></a>静态VXLAN隧道</h1><ul><li>静态VXLAN隧道并不是一个有状态的隧道（如IPsec VPN），只是数据传输时的隧道封装，类似于GRE VPN。</li><li>头端复制列表中的地址，即进行隧道封装传输时可封装的隧道目的地址。</li></ul><p><img src="https://i.328888.xyz/2023/05/10/iYf9Zy.png" srcset="/img/loading.gif" lazyload></p><h2 id="VXLAN-MAC地址表项"><a href="#VXLAN-MAC地址表项" class="headerlink" title="VXLAN MAC地址表项"></a>VXLAN MAC地址表项</h2><ul><li>VXLAN实现的是在Overlay网络中进行二层转发，转发单播数据帧依赖的依旧是MAC地址表项。</li><li>VTEP接收到BD内来自本地的数据帧，将数据帧的源MAC地址添加到该BD的MAC地址表中，出接口为收到数据帧的接口。</li><li>该表项用于指导发往本VTEP下连接终端的数据帧的转发。</li></ul><p><img src="https://i.328888.xyz/2023/05/10/iYfPkF.png" srcset="/img/loading.gif" lazyload></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs none">&lt;S1&gt;display mac-address bridge-domain 10<br>-------------------------------------------------------------------------------<br>MAC Address    VLAN/VSI/BD   Learned-From    Type        <br>-------------------------------------------------------------------------------<br>0000-0000-000a      -/-/10      GE1/0/1.10     dynamic    <br><br>&lt;S1&gt;display mac-address bridge-domain 20<br>-------------------------------------------------------------------------------<br>MAC Address    VLAN/VSI/BD   Learned-From    Type        <br>-------------------------------------------------------------------------------<br>0000-0000-000b      -/-/20       GE1/0/1.20    dynamic    <br><br></code></pre></td></tr></table></figure><h2 id="MAC地址动态学习-1"><a href="#MAC地址动态学习-1" class="headerlink" title="MAC地址动态学习 (1)"></a>MAC地址动态学习 (1)</h2><ul><li>转发属于远端VTEP下所连接设备的数据帧，需要先学习到远端设备的MAC地址。</li><li>该过程与传统MAC地址表形成过程类似，依赖于主机之间的报文交互，一般通过ARP报文交互形成MAC地址表项。</li></ul><p><img src="https://i.328888.xyz/2023/05/10/iYyfac.png" srcset="/img/loading.gif" lazyload></p><ul><li>PC1与PC2通信过程如下：</li></ul><ol><li>PC1要与PC2通信，PC1发送ARP请求广播帧，试图请求PC2的MAC地址。</li><li>SW1收到该帧后，根据VAP信息判断出流量所属的BD ID、需进入的VXLAN隧道及对应的VNI；同时学习PC1的MAC地址，将其与该BD ID、接收帧的接口等绑定。</li><li>SW1对ARP请求广播帧进行VXLAN封装，按头端复制列表进行转发。</li><li>SW2收到VXLAN报文后，将其解封装，得到原始数据帧；同时学习PC1的MAC地址，将该地址与SW1的VTEP地址进行绑定。</li><li>SW2将该ARP帧在本地广播域内泛洪。然后，PC2收到了该帧并学习到了PC1的ARP信息。</li></ol><h2 id="MAC地址动态学习-2"><a href="#MAC地址动态学习-2" class="headerlink" title="MAC地址动态学习 (2)"></a>MAC地址动态学习 (2)</h2><p><img src="https://i.328888.xyz/2023/05/10/iYycz5.png" srcset="/img/loading.gif" lazyload></p><ul><li><p>PC2发送单播的ARP回应。</p><p>6. SW2此时已经拥有PC1的MAC地址表项，因此将会单播转发，并且学习PC2的源MAC地址到MAC地址表项中。</p><p>7. SW2为该ARP响应加上VXLAN封装，发送到远端VTEP 1.1.1.1。</p><p>8. SW1收到VXLAN报文之后解封装，将PC2的源MAC地址记录到MAC地址表，出接口为远端VTEP。</p><p>9. SW1将数据帧转发给PC1。</p></li></ul><blockquote><p>至此PC1、2相互学习到了对方的ARP信息，SW1、SW2完成了PC1、PC2的MAC地址学习，该过程也叫做Flood and Learn。</p></blockquote><h2 id="同子网已知目的地址单播报文转发"><a href="#同子网已知目的地址单播报文转发" class="headerlink" title="同子网已知目的地址单播报文转发"></a>同子网已知目的地址单播报文转发</h2><p><img src="https://i.328888.xyz/2023/05/10/iYygKH.png" srcset="/img/loading.gif" lazyload></p><h2 id="BUM流量转发"><a href="#BUM流量转发" class="headerlink" title="BUM流量转发"></a>BUM流量转发</h2><ul><li>传输BUM（Broadcast、Unknown、Multicast）流量时，VTEP会将流量复制多份发送到头端复制列表中的对端VTEP，从而在Overlay网络中实现泛洪转发的效果。 </li><li>BUM，广播、未知、组播以太网帧</li></ul><p><img src="https://i.328888.xyz/2023/05/10/iYyE3E.png" srcset="/img/loading.gif" lazyload></p><h2 id="跨子网三层转发"><a href="#跨子网三层转发" class="headerlink" title="跨子网三层转发"></a>跨子网三层转发</h2><p><img src="https://i.328888.xyz/2023/05/10/iYyeSC.png" srcset="/img/loading.gif" lazyload></p><ol><li>PC1希望与PC2进行通信，本地计算发现对端与自身不在同一个子网，此时将报文发送给网关。</li><li>PC1发往PC2的数据帧，目的MAC为：00AB-09FF-1111（网关MAC地址），SW1收到之后执行L2查表发现出接口为远端VTEP（即L3网关），将报文加上VXLAN头部封装（VNI &#x3D;1000）之后发往SW3。</li><li>SW3收到报文之后解VXLAN封装发现，内部原始数据帧其目的MAC为：00AB-09FF-1111，为自身接口VBDIF 10的MAC地址，此时需要执行L3查表转发。</li><li>SW3查找路由表，发现目的IP：192.168.2.1，与本地接口VBDIF 20产生的直连路由相匹配，查找ARP表项确定报文目的MAC，再查找MAC地址表确定报文的出接口。SW3中前往192.168.2.1所对应MAC地址的出接口为远端VTEP 2.2.2.2，将报文加上VXLAN封装，送往SW2。</li><li>SW2收到报文之后解VXLAN封装发现目的MAC并非自身任何接口的MAC地址，执行L2查表转发，依据MAC地址表将报文从本地接口转发出去。</li></ol>]]></content>
    
    
    <categories>
      
      <category>network</category>
      
      <category>vxlan</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>vxlan</tag>
      
      <tag>l2vpn</tag>
      
      <tag>datacom</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VXLAN 基本概念</title>
    <link href="/VXLAN_Basic/"/>
    <url>/VXLAN_Basic/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>VXLAN（Virtual eXtensible Local Area Network）采用MAC in UDP（User Datagram Protocol）封装方式，是NVO3（Network Virtualizaiton over Layer 3）中的一种网络虚拟化技术。它是云计算的核心技术之一，服务器虚拟化凭借其大幅降低IT成本、提高业务部署灵活性、降低运维成本等优势已经得到越来越多的认可和部署。</p><p>本文章介绍了其基本概念和<a href="https://songxwn.com/VXLAN_Basic/#%E6%B5%81%E5%B0%81%E8%A3%85%E5%92%8C%E8%A7%A3%E5%B0%81%E8%A3%85">接入方式</a>。</p><p>本文章是针对华为系列网络设备的学习笔记。</p><span id="more"></span><h1 id="实际应用环境"><a href="#实际应用环境" class="headerlink" title="实际应用环境"></a>实际应用环境</h1><h2 id="VXLAN在数据中心的应用"><a href="#VXLAN在数据中心的应用" class="headerlink" title="VXLAN在数据中心的应用"></a>VXLAN在数据中心的应用</h2><ul><li>在数据中心中采用Spine-Leaf两层物理架构，结合VXLAN应用。</li><li>Spine节点执行路由转发，转发时不感知VXLAN。Leaf节点负责资源接入，完成VXLAN封装及解封装。</li><li>数据中心的业务均由VXLAN承载。</li></ul><p><img src="https://i.328888.xyz/2023/05/10/iQuTyy.png" srcset="/img/loading.gif" lazyload></p><blockquote><p>Spine-Leaf说明：</p><ul><li>Spine-Leaf架构是一种数据中心网络拓扑，它由两个交换层组成——脊柱和叶子。叶层由接入交换机组成，它们汇聚来自服务器的流量并直接连接到脊柱或网络核心。脊柱交换机以全网状拓扑相互连接所有叶子交换机1。</li><li>这种架构与传统的网络设计不同，它提供了更好的可扩展性和性能。随着现代数据中心中云和容器化基础设施的普及，东西流量不断增加。东西流量从服务器到服务器横向移动。这种转变主要是由于现代应用程序的组件分布在更多的服务器或虚拟机上。对于东西流量，具有低延迟、优化的流量流是性能的关键，特别是对于时间敏感或数据密集型的应用程序。Spine-Leaf架构通过确保流量始终与下一个目的地相同数量的跳数，从而降低延迟并使其可预测来帮助实现这一点。</li></ul></blockquote><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="在园区网络中使用VXLAN实现“一网多用”"><a href="#在园区网络中使用VXLAN实现“一网多用”" class="headerlink" title="在园区网络中使用VXLAN实现“一网多用”"></a>在园区网络中使用VXLAN实现“一网多用”</h1><p><img src="https://i.328888.xyz/2023/05/10/iYZsht.png" srcset="/img/loading.gif" lazyload></p><ul><li>通过引入虚拟化技术，在园区网络中基于一张物理网络创建多张虚拟网络（Virtual Network，VN）。不同的虚拟网络应用于不同的业务，例如办公、视讯、安防等。这样可以实现端点灵活性，将底层网络（物理拓扑）与叠加网络（虚拟拓扑）分离。您可以使用叠加，在园区与数据中心的端点之间提供第2层和第3层连接，同时保持一致的底层架构1。</li></ul><h2 id="运营商网络使用VXLAN实现二层VPN隧道"><a href="#运营商网络使用VXLAN实现二层VPN隧道" class="headerlink" title="运营商网络使用VXLAN实现二层VPN隧道"></a>运营商网络使用VXLAN实现二层VPN隧道</h2><h1 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="https://i.328888.xyz/2023/05/10/iYi4kL.png" srcset="/img/loading.gif" lazyload></h1><ul><li>可替代现有的二层VPN技术，如MPLS VPWS VPLS，VLAN等。</li><li>基于MAC in UDP的VXLAN隧道，BGP做控制平面，对传输网络要求宽松；     </li><li>具备独立控制平面，采用BGP路由传递二层表项学习，可以减少各种不必要的二层泛洪传递及原生的表项更新机制；    </li><li>可通过ECMP提高链路利用率。</li></ul><h1 id="VXLAN报文格式"><a href="#VXLAN报文格式" class="headerlink" title="VXLAN报文格式"></a>VXLAN报文格式</h1><p><img src="https://i.328888.xyz/2023/05/10/iYZ0PN.png" srcset="/img/loading.gif" lazyload></p><blockquote><p>以上为标准VXLAN报文格式，华为CloudEngine S系列交换机的报文格式与其存在区别，针对其中的保留字段做了自定义。</p><p>VXLAN报文的封装格式为：在原始二层数据帧外添加8字节VXLAN头、8字节UDP头和20字节IP头。其中，UDP头的目的端口号为VXLAN UDP端口号（缺省为4789）</p><p>具体来说，原始报文在封装过程中先被添加一个VXLAN帧头，再被封装在UDP报头中，并使用承载网络的IP、MAC地址作为外层头进行封装。VXLAN帧头中包括VXLAN Flags（标记位，8比特，取值为00001000）、Group ID（用户组ID，16比特）、VNI（VXLAN网络标识，用于区分VXLAN段，由24比特组成，支持多达16M的租户）和Reserved（保留未用，分别由8比特和8比特组成，设置为0）等字段。</p></blockquote><h1 id="基本概念：NVE"><a href="#基本概念：NVE" class="headerlink" title="基本概念：NVE"></a>基本概念：NVE</h1><ul><li>NVE（Network Virtualization Edge，网络虚拟边缘）：</li><li>是实现网络虚拟化功能的网络实体，可以是硬件交换机也可以是软件交换机。</li><li>NVE在三层网络上构建二层虚拟网络，是运行VXLAN的设备。图中SW1和SW2都是NVE。</li></ul><p><img src="https://i.328888.xyz/2023/05/10/iYibJE.png" srcset="/img/loading.gif" lazyload></p><h1 id="基本概念：VTEP"><a href="#基本概念：VTEP" class="headerlink" title="基本概念：VTEP"></a>基本概念：VTEP</h1><p>VTEP（VXLAN Tunnel Endpoints，VXLAN隧道端点）：</p><ul><li>VTEP是VXLAN隧道端点，位于NVE中，用于VXLAN报文的封装和解封装。</li><li>VXLAN报文（其外层IP头部）中源IP地址为源端VTEP的IP地址，目的IP地址为目的端VTEP的IP地址。</li></ul><p><img src="https://i.328888.xyz/2023/05/10/iYiIrP.png" srcset="/img/loading.gif" lazyload></p><blockquote><p>一对VTEP地址就对应着一条VXLAN隧道。</p><p>在源端封装报文后通过隧道向目的端VTEP发送封装报文，目的端VTEP对接收到的封装报文进行解封装。</p><p>通常情况下使用设备的Loopback接口地址作为VTEP地址。</p></blockquote><h2 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h2><p>NVE（Network Virtualization Edge）是网络虚拟边缘节点，实现网络虚拟化功能的网络实体。它负责封装和解封装VXLAN报文。设备和服务器上的虚拟交换机VSwitch都可以作为NVE。</p><p>VTEP（VXLAN Tunnel Endpoints）是VXLAN隧道端点，封装在NVE中，用于VXLAN报文的封装和解封装。VTEP与物理网络相连，分配有物理网络的IP地址，该地址与虚拟网络无关。VXLAN报文中源IP地址为本节点的VTEP地址，VXLAN报文中目的IP地址为对端节点的VTEP地址，一对VTEP地址就对应着一个VXLAN隧道。</p><p><strong>简单来说，NVE是一个更广泛的概念，它指实现网络虚拟化功能的网络实体。而VTEP是NVE中的一个组件，负责封装和解封装VXLAN报文。</strong></p><h1 id="基本概念：VNI与BD"><a href="#基本概念：VNI与BD" class="headerlink" title="基本概念：VNI与BD"></a>基本概念：VNI与BD</h1><p>VNI（VXLAN Network Identifier，VXLAN网络标识）：</p><ul><li>类似VLAN ID，用于区分VXLAN段。不同VXLAN段的虚拟机不能直接二层相互通信。</li><li>一个租户可以有一个或多个VNI，VNI长度为24 bit，支持多达16 M的租户。</li></ul><p>BD（Bridge Domain，桥域）：</p><ul><li>类似传统网络中采用VLAN划分广播域，在VXLAN网络中一个BD就标识一个大二层广播域。</li><li>VNI以1:1方式映射到广播域BD，同一个BD内的终端可以进行二层互通。</li></ul><p><img src="https://i.328888.xyz/2023/05/10/iYigKV.png" srcset="/img/loading.gif" lazyload></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bridge</span>-domain <span class="hljs-number">10</span><br><br> <span class="hljs-attribute">vxlan</span> vni <span class="hljs-number">10</span>     子网<span class="hljs-number">1</span><br><br><span class="hljs-attribute">bridge</span>-domain <span class="hljs-number">20</span><br><br> <span class="hljs-attribute">vxlan</span> vni <span class="hljs-number">20</span>     子网<span class="hljs-number">2</span><br> <br> <br><span class="hljs-comment"># BD绑定VNI</span><br><br></code></pre></td></tr></table></figure><h1 id="基本概念：VAP-（虚拟接入点）"><a href="#基本概念：VAP-（虚拟接入点）" class="headerlink" title="基本概念：VAP （虚拟接入点）"></a>基本概念：VAP （虚拟接入点）</h1><p>VAP（Virtual Access Point，虚拟接入点）：</p><ul><li>实现VXLAN的业务接入。</li><li>VAP有两种配置方式，二层子接口方式或者VLAN绑定方式：</li></ul><blockquote><p>二层子接口方式接入，例如在SW1创建二层子接口关联BD 10，则这个子接口下的特定流量会被注入到BD 10。</p><p>VLAN绑定方式接入，例如在SW2配置VLAN 10与广播域BD 10关联，则所有VLAN10的流量会被注入到BD 10。</p></blockquote><p><img src="https://i.328888.xyz/2023/05/10/iYiE3b.png" srcset="/img/loading.gif" lazyload></p><ul><li>传统网络的流量进入VXLAN网络之后，通过二层子接口或者VLAN绑定的方式，与BD进行绑定，在BD中会指定VXLAN VNI，实现从传统的VLAN网络到VXLAN网络的映射。</li></ul><h2 id="VLAN接入方式"><a href="#VLAN接入方式" class="headerlink" title="VLAN接入方式"></a>VLAN接入方式</h2><p>将VLAN绑定到广播域BD后，加入该VLAN的接口即为VXLAN业务接入点，进入接口的报文由VXLAN隧道处理。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bridge</span>-domain <span class="hljs-number">10</span><br>  <span class="hljs-attribute">vxlan</span> vni <span class="hljs-number">21</span><br>  <span class="hljs-attribute">l2</span> binding vlan <span class="hljs-number">30</span><br>  <br><br><span class="hljs-comment"># BD、VNI、VLAN之间的ID并不一定要相同，互相不绑定。但为了方便理解可以设置为一样。</span><br><span class="hljs-comment"># 华为交换机默认BD为0-4095，开启大规模模式后支持16000.</span><br><br></code></pre></td></tr></table></figure><h2 id="子接口接入方式（更好）"><a href="#子接口接入方式（更好）" class="headerlink" title="子接口接入方式（更好）"></a>子接口接入方式（更好）</h2><p>在二层子接口上，可以根据需要定义不同的流封装类型（类似于传统网络中不同的接口类型）。CloudEngine系列交换机目前支持的流封装类型有dot1q、untag、qinq和default四种类型：</p><ul><li>dot1q：对于带有一层VLAN Tag的报文，该类型接口只接收与指定VLAN Tag匹配的报文；对于带有两层VLAN Tag的报文，该类型接口只接收外层VLAN Tag与指定VLAN Tag匹配的报文。</li><li>untag：该类型接口只接收不带VLAN Tag的报文。</li><li>qinq：该类型接口只接收带有指定两层VLAN Tag的报文。</li><li>default：允许接口接收所有报文，不区分报文中是否带VLAN Tag。不论是对原始报文进行VXLAN封装，还是解封装VXLAN报文，该类型接口都不会对原始报文进行任何VLAN Tag处理，包括添加、替换或剥离。</li></ul><blockquote><p><strong>VXLAN隧道两端二层子接口的配置并不一定是完全对等的。正因为这样，才可能实现属于同一网段但是不同VLAN的两个VM通过VXLAN隧道进行通信。</strong></p><p>说明：子接口的dot1q配置的VLAN ID与交换机本身的VLAN无关，也与其他BD无关。</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">dot1qinterface</span> <span class="hljs-number">10</span>GE1/<span class="hljs-number">0</span>/<span class="hljs-number">1</span>.<span class="hljs-number">1</span> mode l2   //创建二层子接口<span class="hljs-number">10</span>GE1/<span class="hljs-number">0</span>/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br> <span class="hljs-attribute">encapsulation</span> dot1q vid <span class="hljs-number">10</span>   //只允许携带VLAN Tag <span class="hljs-number">10</span>的报文进入VXLAN隧道<br> <span class="hljs-attribute">bridge</span>-domain <span class="hljs-number">10</span>   //指定报文进入的是BD <span class="hljs-number">10</span><br><span class="hljs-comment">#</span><br><span class="hljs-attribute">interface</span> <span class="hljs-number">10</span>GE1/<span class="hljs-number">0</span>/<span class="hljs-number">1</span>.<span class="hljs-number">2</span> mode l2   //创建二层子接口<span class="hljs-number">10</span>GE1/<span class="hljs-number">0</span>/<span class="hljs-number">1</span>.<span class="hljs-number">2</span><br> <span class="hljs-attribute">encapsulation</span> untag   //只允许不携带VLAN Tag的报文进入VXLAN隧道<br> <span class="hljs-attribute">bridge</span>-domain <span class="hljs-number">20</span>   //指定报文进入的是BD <span class="hljs-number">20</span><br><span class="hljs-comment">#</span><br><span class="hljs-attribute">interface</span> <span class="hljs-number">10</span>GE1/<span class="hljs-number">0</span>/<span class="hljs-number">1</span>.<span class="hljs-number">2</span> mode l2   //创建二层子接口<span class="hljs-number">10</span>GE1/<span class="hljs-number">0</span>/<span class="hljs-number">1</span>.<span class="hljs-number">2</span><br> <span class="hljs-attribute">encapsulation</span> default   //允许接口接收所有报文，透明转发。<br> <span class="hljs-attribute">bridge</span>-domain <span class="hljs-number">30</span>   //指定报文进入的是BD <span class="hljs-number">30</span><br><br><span class="hljs-comment">#</span><br><br></code></pre></td></tr></table></figure><h3 id="流封装和解封装"><a href="#流封装和解封装" class="headerlink" title="流封装和解封装"></a>流封装和解封装</h3><table><thead><tr><th align="left">流封装类型</th><th align="left">允许进入VXLAN隧道的报文类型</th><th align="left">对VXLAN报文进行封装处理</th><th align="left">对VXLAN报文进行解封装处理</th></tr></thead><tbody><tr><td align="left">dot1q</td><td align="left">只允许携带指定的一层VLAN Tag的报文进入VXLAN隧道。</td><td align="left">进行VXLAN封装时，会剥离原始报文的VLAN Tag。</td><td align="left">进行VXLAN解封装后：若内层原始报文带有VLAN Tag，则先将该VLAN Tag替换为指定的VLAN Tag，再转发；若内层原始报文不带VLAN Tag，则先将其添加指定的VLAN Tag，再转发。</td></tr><tr><td align="left">untag</td><td align="left">只允许不携带VLAN Tag的报文进入VXLAN隧道。</td><td align="left">进行VXLAN封装时，不对原始报文做处理，即不添加任何VLAN Tag。</td><td align="left">进行VXLAN解封装后，若内层原始报文带有vlan tag，则先将该vlan tag 剥掉，再转发；若内层原始报文不带vlan tag，则直接转发</td></tr><tr><td align="left">default</td><td align="left">允许所有报文进入VXLAN隧道，不论报文是否携带VLAN Tag。</td><td align="left">进行VXLAN封装时，不对原始报文做处理，包括添加、替换或剥离。</td><td align="left">进行VXLAN解封装后，不对报文做处理，包括VLAN Tag的添加、替换或剥离。</td></tr><tr><td align="left">qinq</td><td align="left">只允许带有指定的两层VLAN Tag的报文进入VXLAN隧道。</td><td align="left">进行VXLAN封装时，会剥离原始报文的所有VLAN Tag。</td><td align="left">进行VXLAN解封装后：S5720HI：根据子接口上QinQ终结配置的ce-vid和pe-vid为报文添加两层VLAN Tag，再转发。其他形态：若报文不带VLAN Tag，则先根据子接口上QinQ终结配置的ce-vid和pe-vid为报文添加两层VLAN Tag，再转发；若报文带VLAN Tag，则先剥掉外层VLAN Tag再根据子接口上QinQ终结配置的ce-vid和pe-vid为报文添加两层VLAN Tag，再转发。</td></tr></tbody></table><h1 id="基本概念：Border、Edge"><a href="#基本概念：Border、Edge" class="headerlink" title="基本概念：Border、Edge"></a>基本概念：Border、Edge</h1><h1 id="-2"><a href="#-2" class="headerlink" title=""></a><img src="https://i.328888.xyz/2023/05/10/iYV6cE.png" srcset="/img/loading.gif" lazyload></h1><ul><li>Edge：VXLAN网络的边缘接入设备，传统网络的流量由此进入VXLAN网络。</li><li>Border：VXLAN网络和外部网络通信的节点，用于外部流量进入VXLAN网络或VXLAN内部流量访问外部，一般连接具有三层转发能力的设备（如Router、Firewall）。</li></ul><h1 id="基本概念：VXLAN二层网关、三层网关"><a href="#基本概念：VXLAN二层网关、三层网关" class="headerlink" title="基本概念：VXLAN二层网关、三层网关"></a>基本概念：VXLAN二层网关、三层网关</h1><h2 id="二层网关"><a href="#二层网关" class="headerlink" title="二层网关"></a>二层网关</h2><p><img src="https://i.328888.xyz/2023/05/10/iYVdfP.png" srcset="/img/loading.gif" lazyload></p><ul><li>二层（L2）网关：实现流量进入VXLAN网络，也可用于同一VXLAN网络内终端的同子网通信。</li></ul><h2 id="三层网关"><a href="#三层网关" class="headerlink" title="三层网关"></a>三层网关</h2><p><img src="https://i.328888.xyz/2023/05/10/iYV5Gt.png" srcset="/img/loading.gif" lazyload></p><ul><li>三层（L3）网关：用于VXLAN网络内终端的跨子网通信以及终端对外部网络（非VXLAN网络）的访问。</li><li>也用于跨VXLAN VNI访问</li></ul><h1 id="基本概念：VBDIF"><a href="#基本概念：VBDIF" class="headerlink" title="基本概念：VBDIF"></a>基本概念：VBDIF</h1><p><img src="https://i.328888.xyz/2023/05/10/iYVv7A.png" srcset="/img/loading.gif" lazyload></p><ul><li>类似于传统网络中采用VLANIF实现不同广播域互通，在VXLAN中引入了VBDIF的概念。</li><li>VBDIF接口在VXLAN三层网关上配置，是基于BD创建的三层逻辑接口。</li><li>通过VBDIF接口可实现不同网段的用户通过VXLAN网络通信，及VXLAN网络和非VXLAN网络间的通信，也可实现二层网络接入三层网络。</li></ul><h1 id="基本概念：分布式与集中式网关"><a href="#基本概念：分布式与集中式网关" class="headerlink" title="基本概念：分布式与集中式网关"></a>基本概念：分布式与集中式网关</h1><h2 id="集中式网关"><a href="#集中式网关" class="headerlink" title="集中式网关"></a>集中式网关</h2><p><img src="https://i.328888.xyz/2023/05/10/iYVKtN.png" srcset="/img/loading.gif" lazyload></p><p>L3网关部署在一台设备上，所有跨子网的流量都通过该设备转发，实现流量的集中管理。</p><ul><li>优点：跨子网流量集中管理，简化网关部署和管理。</li><li>缺点：转发路径并非最优。ARP表项规格瓶颈：由于采用集中式网关，网关上需要维护大量通过VXLAN接入网络的终端其ARP。</li></ul><h2 id="基本概念：分布式网关"><a href="#基本概念：分布式网关" class="headerlink" title="基本概念：分布式网关"></a>基本概念：分布式网关</h2><p><img src="https://i.328888.xyz/2023/05/10/iYVTyb.png" srcset="/img/loading.gif" lazyload></p><p>VTEP设备既是L2网关，又是L3网关。非网关节点对VXLAN隧道不感知，仅作为VXLAN报文的转发节点。</p><ul><li>优点：VTEP节点只学习连接在本节点下终端的ARP表项，解决了集中式三层网关带来的ARP表项瓶颈问题，网络规模扩展能力强。</li><li>缺点：相对集中式部署配置、实现复杂，部署工程量大。</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.ruijie.com.cn/jszl/85104/">https://www.ruijie.com.cn/jszl/85104/</a> </p><p><a href="https://www.arubanetworks.com/faq/what-is-spine-leaf-architecture/">https://www.arubanetworks.com/faq/what-is-spine-leaf-architecture/</a> </p><p><a href="https://support.huawei.com/enterprise/zh/doc/EDOC1100087027#ZH-CN_TOPIC_0254803606">https://support.huawei.com/enterprise/zh/doc/EDOC1100087027#ZH-CN_TOPIC_0254803606</a> </p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/VXLAN_Configuration/">VXLAN 基本配置</a></li><li><a href="https://songxwn.com/VXLAN_Principle/">VXLAN 转发原理</a></li><li><a href="https://songxwn.com/zabbix-reboot-SNMPv3/">Zabbix SNMPv3 设备重启后无法监控问题</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>network</category>
      
      <category>vxlan</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>vxlan</tag>
      
      <tag>l2vpn</tag>
      
      <tag>datacom</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ELK Logstash解析系统日志错误</title>
    <link href="/ELK-logstash-hostname/"/>
    <url>/ELK-logstash-hostname/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Logstash解析系统日志错误：</p><p>如果大家使用Logstash自带的解析规则，在某些情况下会出现解析系统日志失败的情况，原因是因为：系统主机名包含下划线时会解析失败，造成无法识别主机名字段。</p><p>主要是生产环境有些网络设备的主机名有带下划线_ ，而合法在主机名是没有不允许下划线的。</p><p>使用环境：Rocky Linux 8 、ELK 8.x </p><span id="more"></span><h2 id="HostName主要规则"><a href="#HostName主要规则" class="headerlink" title="HostName主要规则"></a>HostName主要规则</h2><ul><li>主机名只允许包含ascii字符里的数字0-9，字母a-zA-Z，连字符-。其他都不允许。例如，不允许出现其他标点符号，不允许空格，不允许下划线，不允许中文字符。</li><li>主机名的开头和结尾字符不允许是连字符。</li><li>主机名强烈建议不要用数字开头，尽管这一条不是强制的。甚至不要使用只包含可解释为16进制字符的字符串，例如”beef”。</li><li>建议不要使用计算机领域的特殊的词汇，例如，up。</li><li>给主机命名通常不考虑字母大小写问题，并且只用小写字母而不用大写字母。</li><li>给主机命名，建议使用合法的单词，这样方便记忆。因为主机名是在一个domain的范围内唯一即可，通常不必担心重复问题。</li></ul><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">find <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/logstash/</span>vendor/ -name grok-patterns<br><br><span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/logstash/</span>vendor<span class="hljs-regexp">/bundle/</span>jruby<span class="hljs-regexp">/2.6.0/g</span>ems<span class="hljs-regexp">/logstash-patterns-core-4.3.4/</span>patterns<span class="hljs-regexp">/ecs-v1/g</span>rok-patterns<br><span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/logstash/</span>vendor<span class="hljs-regexp">/bundle/</span>jruby<span class="hljs-regexp">/2.6.0/g</span>ems<span class="hljs-regexp">/logstash-patterns-core-4.3.4/</span>patterns<span class="hljs-regexp">/legacy/g</span>rok-patterns<br><br><span class="hljs-comment"># 查找grok-patterns文件，因每个版本路径可能会更更改。上面两个文件都需要修改的</span><br><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 使用vim编辑，注意版本不一样，路径会更改。</span><br><br><span class="hljs-attribute">vim</span> /usr/share/logstash/vendor/bundle/jruby/<span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">0</span>/gems/logstash-patterns-core-<span class="hljs-number">4</span>.<span class="hljs-number">3</span>.<span class="hljs-number">4</span>/patterns/ecs-v1/grok-patterns<br><span class="hljs-attribute">vim</span> /usr/share/logstash/vendor/bundle/jruby/<span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">0</span>/gems/logstash-patterns-core-<span class="hljs-number">4</span>.<span class="hljs-number">3</span>.<span class="hljs-number">4</span>/patterns/legacy/grok-patterns<br><br><span class="hljs-comment"># 找到并将</span><br><br><span class="hljs-attribute">HOSTNAME</span> \b(?:[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>A-Za-z][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>A-Za-z-]&#123;<span class="hljs-number">0</span>,<span class="hljs-number">62</span>&#125;)(?:\.(?:[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>A-Za-z][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>A-Za-z-]&#123;<span class="hljs-number">0</span>,<span class="hljs-number">62</span>&#125;))*(\.?|\b) <br><br><span class="hljs-comment"># 修改为</span><br><br><br><span class="hljs-attribute">HOSTNAME</span> \b(?:[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>A-Za-z][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>A-Za-z_-]&#123;<span class="hljs-number">0</span>,<span class="hljs-number">62</span>&#125;)(?:\.(?:[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>A-Za-z][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>A-Za-z_-]&#123;<span class="hljs-number">0</span>,<span class="hljs-number">62</span>&#125;))*(\.?|\b) <br><br><span class="hljs-comment"># 注意看两者多了两个下划线</span><br><br></code></pre></td></tr></table></figure><p>PS：如果使用Filebeat的模块，也会出现这个问题。</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl restart logstash.service <br><br><span class="hljs-params">system</span>ctl status logstash.service <br><br><span class="hljs-comment"># 修改保存完成之后，需要重启生效。</span><br><br></code></pre></td></tr></table></figure><p>PS：如果Logstash 更新了，也需要再次修改。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/logstash-plugins/logstash-output-elasticsearch/issues/400">https://github.com/logstash-plugins/logstash-output-elasticsearch/issues/400</a> </p><p><a href="https://zhuanlan.zhihu.com/p/101154203">https://zhuanlan.zhihu.com/p/101154203</a> </p><p><a href="https://blog.csdn.net/wanghuiict/article/details/70038140">https://blog.csdn.net/wanghuiict/article/details/70038140</a> </p><div><h1>推荐<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">Hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/ELK-AD-LDAP-Authentication/">Elasticsearch 接入微软Active Directory认证</a></li><li><a href="https://songxwn.com/podman/">Podman 容器管理工具</a></li><li><a href="https://songxwn.com/zabbix-reboot-SNMPv3/">Zabbix SNMPv3 设备重启后无法监控问题</a></li><li><a href="https://chengzhaoxi.xyz/361d7ede.html">互联网算法工程开发常用技术</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>ELK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>elk</tag>
      
      <tag>elasticsearch</tag>
      
      <tag>logstash</tag>
      
      <tag>syslog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Elasticsearch 接入微软Active Directory认证</title>
    <link href="/ELK-AD-LDAP-Authentication/"/>
    <url>/ELK-AD-LDAP-Authentication/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本文章主要介绍了Elasticsearch 接入微软的<a href="https://learn.microsoft.com/zh-cn/troubleshoot/windows-server/identity/active-directory-overview">Active Directory</a>（域控）作为身份认证。</p><p>LDAP认证接入可参考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/ldap-realm.html">官方文档</a>。</p><p>使用环境：Rocky Linux 8、Elasticsearch 8、Windows Server 2022</p><p><strong>注意：由于此功能基础版无法使用，需要白金版本，可参考教程：</strong><a href="https://songxwn.com/Elasticsearch-x-pack-core/"><strong>https://songxwn.com/Elasticsearch-x-pack-core/</strong></a></p><p>ELK系列文章：<a href="https://songxwn.com/categories/linux/ELK/">https://songxwn.com/categories/linux/ELK/</a> </p><span id="more"></span><h1 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">vim</span> <span class="hljs-string">/etc/elasticsearch/elasticsearch.yml</span> <br><br><span class="hljs-comment"># ad1</span><br><br><span class="hljs-attr">xpack:</span><br>  <span class="hljs-attr">security:</span><br>    <span class="hljs-attr">authc:</span><br>      <span class="hljs-attr">realms:</span><br>        <span class="hljs-attr">active_directory:</span><br>          <span class="hljs-attr">ad1:</span><br>            <span class="hljs-attr">order:</span> <span class="hljs-number">0</span> <br>            <span class="hljs-attr">domain_name:</span> <span class="hljs-string">songxwn.com</span><br>            <span class="hljs-attr">url:</span> <span class="hljs-string">ldap://songxwn:389</span><br>            <span class="hljs-attr">bind_dn:</span> <span class="hljs-string">administrator@songxwn.com</span><br><br></code></pre></td></tr></table></figure><ul><li>domain_name和url选项修改为自己的域名。</li><li>bind_dn修改为域用户。</li></ul><p><strong>注意：如果是集群，需要每一个节点都修改此配置。（注意所有节点的DNS服务器都要指向域控制器）</strong></p><h2 id="配置bind账号的密码"><a href="#配置bind账号的密码" class="headerlink" title="配置bind账号的密码"></a>配置bind账号的密码</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/elasticsearch/</span>bin/elasticsearch-keystore add \ xpack.security.authc.realms.active_directory.ad1.secure_bind_password<br><br><span class="hljs-comment"># 配置ad1下的用于搜索的域账号密码。</span><br><br></code></pre></td></tr></table></figure><ul><li>密码会存储到 <code>/etc/elasticsearch/elasticsearch.keystore</code></li></ul><p>注意：如果修改了keystore，那么集群上的每一个节点都要同步。</p><p>密钥库管理参考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/elasticsearch-keystore.html">官方文档</a>。（增加、列出、查看明文、删除等）</p><h2 id="配置用户组映射"><a href="#配置用户组映射" class="headerlink" title="配置用户组映射"></a>配置用户组映射</h2><h3 id="命令操作-Kibana-gt-http-127-0-0-1-5601-app-dev-tools-console"><a href="#命令操作-Kibana-gt-http-127-0-0-1-5601-app-dev-tools-console" class="headerlink" title="命令操作-Kibana&gt;http://127.0.0.1:5601/app/dev_tools#/console"></a>命令操作-Kibana&gt;<code>http://127.0.0.1:5601/app/dev_tools#/console</code></h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/_security/</span>role_mapping/admins<br>&#123;<br>  <span class="hljs-string">&quot;roles&quot;</span> : [ <span class="hljs-string">&quot;monitoring&quot;</span> , <span class="hljs-string">&quot;user&quot;</span> ],<br>  <span class="hljs-string">&quot;rules&quot;</span> : &#123; <span class="hljs-string">&quot;field&quot;</span> : &#123;<br>    <span class="hljs-string">&quot;groups&quot;</span> : <span class="hljs-string">&quot;cn=admins,cn=Users,dc=songxwn,dc=com&quot;</span> <br>  &#125; &#125;,<br>  <span class="hljs-string">&quot;enabled&quot;</span>: true<br>&#125;<br><br><span class="hljs-comment"># </span><br><br><span class="hljs-comment"># 映射安全组，dc=songxwn,dc=com 为域名。cn=admins,cn=Users 代表路径，Users是组织单元，而admins为安全组。</span><br>admins安全组在Users组织单元下。<br><br><span class="hljs-comment"># 在AD中，添加到安全组的用户即可登录，并映射到相关角色。</span><br><br><span class="hljs-comment"># 用户可不带域名后缀登录。</span><br><br><span class="hljs-comment"># 具体路径查看，可以参考AD上的ADSI编辑器工具。</span><br><br></code></pre></td></tr></table></figure><h3 id="Web操作-推荐-Kibana-gt-http-127-0-0-1-5601-app-management-security-role-mappings"><a href="#Web操作-推荐-Kibana-gt-http-127-0-0-1-5601-app-management-security-role-mappings" class="headerlink" title="Web操作(推荐)-Kibana&gt;http://127.0.0.1:5601/app/management/security/role_mappings"></a>Web操作(推荐)-Kibana&gt;<code>http://127.0.0.1:5601/app/management/security/role_mappings</code></h3><h1 id=""><a href="#" class="headerlink" title=""></a><img src="https://s3.bmp.ovh/imgs/2023/05/03/7dd920bd443e0a3f.jpg" srcset="/img/loading.gif" lazyload></h1><ul><li>映射安全组，dc&#x3D;songxwn,dc&#x3D;com 为域名。cn&#x3D;admins,cn&#x3D;Users 代表路径，Users是组织单元，而admins为安全组。  admins安全组在Users组织单元下。  ﻿ </li><li>在AD中，添加到安全组的用户即可登录，并映射到相关角色。  ﻿  </li><li>用户可不带域名后缀登录。  ﻿  </li><li>具体路径查看，可以参考AD上的ADSI编辑器工具。</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/active-directory-realm.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/active-directory-realm.html</a> </p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>ELK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>elk</tag>
      
      <tag>elasticsearch</tag>
      
      <tag>ad</tag>
      
      <tag>ldap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Podman 容器管理工具</title>
    <link href="/podman/"/>
    <url>/podman/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Podman是一个用于在 Linux 系统上构建、管理和运行<a href="https://opencontainers.org/">OCI标准</a>容器的CLI工具，是Docker的直接替代品。</p><p>由红帽主导，与开源社区一起开发。在RHEL8开始预装并替代Docker。命令上与Docker并无区别。</p><p>主要特点是不需要守护进程，可以支持非root用户运行容器，提高了安全性和可访问性。</p><p>本教程也适用于RHEL其他衍生版本，如Rocky Linux。</p><span id="more"></span><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="RHEL8-9安装"><a href="#RHEL8-9安装" class="headerlink" title="RHEL8-9安装"></a>RHEL8-9安装</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros">dnf install podman podman-docker<br><br><span class="hljs-comment"># 安装podman及docker的命令兼容程序。</span><br><br>systemctl <span class="hljs-built_in">enable</span> --now podman<br><br><span class="hljs-comment"># 启动并设置开机启动。</span><br><br>podman <span class="hljs-built_in">run</span> hello-world<br><br>docker <span class="hljs-built_in">run</span> hello-world<br><br><span class="hljs-comment"># 命令示例，两者都可用，但docker命令无法自动不全。</span><br><br></code></pre></td></tr></table></figure><h2 id="安装podman-compose（需要提前安装epel-yum源）"><a href="#安装podman-compose（需要提前安装epel-yum源）" class="headerlink" title="安装podman-compose（需要提前安装epel yum源）"></a>安装podman-compose（需要提前安装epel yum源）</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cmake">dnf <span class="hljs-keyword">install</span> podman-compose<br><br><span class="hljs-comment"># 安装compose工具，用于管理或运行多个容器。可直接替代docker-compose。</span><br><br>podman-compose up -d<br>podman-compose down<br><br><span class="hljs-comment"># 命令示例</span><br><br></code></pre></td></tr></table></figure><h1 id="默认仓库顺序"><a href="#默认仓库顺序" class="headerlink" title="默认仓库顺序"></a>默认仓库顺序</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>红帽把自己的两个仓库源放在了前面，导致拉取前两个仓库源不存在的镜像时候，要手动选择。</p><p>很麻烦🤬</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">podman pull songxwn/webnettools:<span class="hljs-number">1.4</span><br>Emulate Docker CLI using podman. Create <span class="hljs-regexp">/etc/</span>containers/nodocker to quiet msg.<br>? Please select an image: <br>  ▸ registry.access.redhat.com<span class="hljs-regexp">/songxwn/</span>webnettools:<span class="hljs-number">1.4</span><br>    registry.redhat.io<span class="hljs-regexp">/songxwn/</span>webnettools:<span class="hljs-number">1.4</span><br>    docker.io<span class="hljs-regexp">/songxwn/</span>webnettools:<span class="hljs-number">1.4</span><br><br></code></pre></td></tr></table></figure><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>containers/registries.conf<br><br><br>unqualified-search-registries = [<span class="hljs-string">&quot;docker.io&quot;</span>, <span class="hljs-string">&quot;registry.redhat.io&quot;</span>, <span class="hljs-string">&quot;registry.access.redhat.com&quot;</span>]<br><br><br><span class="hljs-comment"># 将unqualified-search-registries选项，修改为上面的即可。</span><br><br><br>systemctl restart podman<br><br><span class="hljs-comment"># 然后重启一下即可。</span><br><br><br></code></pre></td></tr></table></figure><p>PS：也可以修改为<a href="https://yeasy.gitbook.io/docker_practice/install/mirror">国内的Docker Hub源</a>，如网易的 <code>https://hub-mirror.c.163.com</code></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://computingforgeeks.com/create-docker-container-registry-with-podman-letsencrypt/">https://computingforgeeks.com/create-docker-container-registry-with-podman-letsencrypt/</a> </p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Docker</tag>
      
      <tag>Dodman</tag>
      
      <tag>container</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Zabbix SNMPv3 设备重启后无法监控问题</title>
    <link href="/zabbix-reboot-SNMPv3/"/>
    <url>/zabbix-reboot-SNMPv3/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>最近有发现有SNMPv3 监控的网络设备断电重启后，Zabbix无法正常监控，显示SNMP超时。</p><p>但SNMP工具去Get OID值却没有问题，但Zabbix Server重启后能解决此问题。</p><p>查询一番后有了不重启的解决方案。</p><span id="more"></span><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p><a href="RFC3414">RFC3414</a> 要求 SNMPv3 设备保留其 engineBoots。 一些设备不这样做，这导致它们的 SNMP 消息在重新启动后被丢弃为过时的。 在这种情况下，需要在服务器&#x2F;代理上手动清除 SNMP 缓存（通过使用 <a href="https://www.zabbix.com/documentation/6.0/zh/manual/concepts/server#runtime-control">-R snmp_cache_reload</a>）或者需要重新启动服务器&#x2F;代理 .</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">zabbix_server -R snmp_cache_reload<br><br>zabbix_proxy -R snmp_cache_reload<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">清理SNMP缓存</span><br><br></code></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.zabbix.com/documentation/6.0/zh/manual/config/items/itemtypes/snmp">https://www.zabbix.com/documentation/6.0/zh/manual/config/items/itemtypes/snmp</a> </p><p><a href="https://blog.csdn.net/qq_42906357/article/details/129818955">https://blog.csdn.net/qq_42906357/article/details/129818955</a> </p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/VXLAN_Configuration/">VXLAN 基本配置</a></li><li><a href="https://songxwn.com/VXLAN_Principle/">VXLAN 转发原理</a></li><li><a href="https://songxwn.com/VXLAN_Basic/">VXLAN 基本概念</a></li><li><a href="https://chengzhaoxi.xyz/361d7ede.html">互联网算法工程开发常用技术</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>Zabbix</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>Linux</tag>
      
      <tag>snmp</tag>
      
      <tag>Zabbix</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Elasticsearch 8.7 白金版激活</title>
    <link href="/Elasticsearch-x-pack-core/"/>
    <url>/Elasticsearch-x-pack-core/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>本文章讲解了Elasticsearch 8的白金版激活，使用了Docker环境进行自动生成破解文件x-pack-core。仅用于学习使用。</p><p>仅适用于：Elasticsearch版本：8.7.0 （使用RPM包安装）</p><p>Java容器版本：JDK19.0.2</p><p>环境要求：Rocky Linux8、<a href="https://yeasy.gitbook.io/docker_practice/install/centos">Docker</a>或<a href="https://cloud.tencent.com/developer/article/1976198">Podman</a>。</p><p>网络要求：需要能正常访问GitHub和Docker HUB（建议全局挂代理）</p><p><a href="https://www.elastic.co/cn/subscriptions">白金版功能</a>：支持LDAP、watcher、支持邮箱发送等。</p><p>安装教程可参考：<a href="https://songxwn.com/elk/">https://songxwn.com/elk/</a> </p><span id="more"></span><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="使用Docker自动生成破解文件"><a href="#使用Docker自动生成破解文件" class="headerlink" title="使用Docker自动生成破解文件"></a>使用Docker自动生成破解文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install wget unzip -y<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装工具，且确保Docker可用。</span><br><br>wget https://github.com/Songxwn/crack-elasticsearch-by-docker/archive/refs/tags/8.7.zip<br><br>unzip 8.7.zip<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">解压</span><br><br>tree crack-elasticsearch-by-docker-8.7/<br>crack-elasticsearch-by-docker-8.7/<br>├── build_crack_jar.sh<br>├── crack.sh<br>├── Dockerfile<br>└── README.md<br><br>0 directories, 4 files<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看文件树，如上。</span><br><br>cd crack-elasticsearch-by-docker-8.7/<br>version=8.7.0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入工作目录，配置ES版本。</span><br><br>bash crack.sh $version<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">执行破解文件生成，注意过程如果卡死可能是网络问题，无法从github上下载文件。</span><br><br>cp output/x-pack-core-$version.crack.jar x-pack-core-$version.jar<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">将破解文件复制重命名到当前目录。</span><br><br><br>tree .<br>.<br>├── build_crack_jar.sh<br>├── crack.sh<br>├── Dockerfile<br>├── output<br>│   ├── LicenseVerifier.class<br>│   ├── LicenseVerifier.java<br>│   ├── XPackBuild.class<br>│   ├── XPackBuild.java<br>│   ├── x-pack-core-8.7.0.crack.jar<br>│   └── x-pack-core-8.7.0.jar<br>├── README.md<br>└── x-pack-core-8.7.0.jar<br><br>1 directory, 11 files<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">执行成功后的目录结果。</span><br><br></code></pre></td></tr></table></figure><p>PS：8.7.1 <a href="https://github.com/Songxwn/crack-elasticsearch-by-docker/archive/refs/tags/8.7.1.zip">https://github.com/Songxwn/crack-elasticsearch-by-docker/archive/refs/tags/8.7.1.zip</a></p><h3 id="覆盖"><a href="#覆盖" class="headerlink" title="覆盖"></a>覆盖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp -f x-pack-core-8.7.0.jar  /usr/share/elasticsearch/modules/x-pack-core/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">覆盖原文件，如果是集群，需要所有节点都需要此操作。</span><br><br><br>systemctl restart elasticsearch.service <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启生效</span><br><br></code></pre></td></tr></table></figure><h2 id="授权文件"><a href="#授权文件" class="headerlink" title="授权文件"></a>授权文件</h2><p>复制下面文本保存文件为elastic8.json即可，然后进入Kibana导入即可生效。</p><p><code>http://127.0.0.1:5601/app/management/stack/license_management</code>（示例路径）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;license&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;uid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;d177620f-46ef-4389-8694-4f1d1cb232f0&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;platinum&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;issue_date_in_millis&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1682640000000</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;expiry_date_in_millis&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4081372171000</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;max_nodes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1000</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;issued_to&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;elastic&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;issuer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;elastic&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;signature&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;AAAAAwAAAA1Mj/kViFP0DDokihMTAAABmC9ZN0hjZDBGYnVyRXpCOW5Bb3FjZDAxOWpSbTVoMVZwUzRxVk1PSmkxaktJRVl5MUYvUWh3bHZVUTllbXNPbzBUemtnbWpBbmlWRmRZb25KNFlBR2x0TXc2K2p1Y1VtMG1UQU9TRGZVSGRwaEJGUjE3bXd3LzRqZ05iLzRteWFNekdxRGpIYlFwYkJiNUs0U1hTVlJKNVlXekMrSlVUdFIvV0FNeWdOYnlESDc3MWhlY3hSQmdKSjJ2ZTcvYlBFOHhPQlV3ZHdDQ0tHcG5uOElCaDJ4K1hob29xSG85N0kvTWV3THhlQk9NL01VMFRjNDZpZEVXeUtUMXIyMlIveFpJUkk2WUdveEZaME9XWitGUi9WNTZVQW1FMG1DenhZU0ZmeXlZakVEMjZFT2NvOWxpZGlqVmlHNC8rWVVUYzMwRGVySHpIdURzKzFiRDl4TmM1TUp2VTBOUlJZUlAyV0ZVL2kvVk10L0NsbXNFYVZwT3NSU082dFNNa2prQ0ZsclZ4NTltbU1CVE5lR09Bck93V2J1Y3c9PQAAAQB+UgXp8+9jDR7U2Roxj4caOUYvtO3+GEU/AGVgrC7LHZTKDQkD8h36pneSK1Iwh0HTvi9kKmdWmqU6DiSwiOMW/Bu+ouItG5XlG+THiC1vDzVmknWU+MKIr9agGaEz4bsaqv70rO8MaivOLgEsj61cgDbpNL4jfLuCpiHbMB/X8XaftLCl70URcRnNTJ64PhobBFwHg0XV344FLInlRSpOWeQr29Nh94iB5bxBeKsXwhmoP9O1NtKAmPoKJUttBXQ757/BnyzruK8+sxGOv8XVCkC+xjVTqeyd3Lp5WUNw7jm4Bb7XspDWWjjRDYh4Omci94VetP+QtcoQmAiBarKi&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;start_date_in_millis&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1682640000000</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><blockquote><p>订阅等级为白金，授权时间到2099年，授权节点为1000个。（可随便修改）</p><p>注意：需要所有节点都覆盖文件重启后导入。</p></blockquote><p><img src="https://s3.bmp.ovh/imgs/2023/05/02/331fa7362bf0ced5.png" srcset="/img/loading.gif" lazyload alt="破解成功后示例图"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>WolfBolin：<a href="https://blog.wolfbolin.com/archives/767">https://blog.wolfbolin.com/archives/767</a></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/Linux-growpart/">Linux 虚拟机在线热扩容分区</a></li><li><a href="https://songxwn.com/elk_cluster/">Elasticsearch 安装配置集群系统</a></li><li><a href="https://songxwn.com/elk_snmp_trap/">ELK-Logstash配置SNMP-Trap</a></li><li><a href="https://chengzhaoxi.xyz/361d7ede.html">互联网算法工程开发常用技术</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>ELK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>elk</tag>
      
      <tag>elasticsearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 虚拟机在线热扩容分区</title>
    <link href="/Linux-growpart/"/>
    <url>/Linux-growpart/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>本教程是用于Linux虚拟机在调整虚拟硬盘大小后，进行在线不重启热扩容分区大小。</p><p>适用于RHEL 7+以上的版本及衍生发行版。（如Centos、Rocky Linux、Alma Linux等）</p><span id="more"></span><h1 id="硬盘分区在线热扩容"><a href="#硬盘分区在线热扩容" class="headerlink" title="硬盘分区在线热扩容"></a>硬盘分区在线热扩容</h1><h2 id="刷新硬盘容量"><a href="#刷新硬盘容量" class="headerlink" title="刷新硬盘容量"></a>刷新硬盘容量</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">echo <span class="hljs-string">&#x27;1&#x27;</span> &gt; <span class="hljs-regexp">/sys/</span>block<span class="hljs-regexp">/sda/</span>device/rescan  <br><br><span class="hljs-comment"># 刷新容量，设备为 sda</span><br><span class="hljs-comment"># 注意若大于2TB的硬盘，需要GPT分区格式，且为引导硬盘的话，需要以UEFI引导启动。</span><br><br></code></pre></td></tr></table></figure><h2 id="安装扩容工具"><a href="#安装扩容工具" class="headerlink" title="安装扩容工具"></a>安装扩容工具</h2><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs tap">yum install cloud-utils-growpart -y<br><br><span class="hljs-comment"># 安装growpart，使用此工具可以自动调整分区。</span><br><br>lsblk<br>NAME     MAJ:MIN RM    SIZE RO TYPE MOUNTPOINT<br>sda        8:0   <span class="hljs-number"> 0 </span>     2T <span class="hljs-number"> 0 </span>disk <br>├─sda1     8:1   <span class="hljs-number"> 0 </span>   100M <span class="hljs-number"> 0 </span>part /boot/efi<br>└─sda2     8:2   <span class="hljs-number"> 0 </span>1023.9G <span class="hljs-number"> 0 </span>part /<br><br><span class="hljs-comment"># 查看硬盘分区结构，注意只有最后一个分区可以扩容。</span><br><br>growpart /dev/sda 2<br><br><span class="hljs-comment"># 分区扩容，指定硬盘和分区号。</span><br><br>xfs_growfs /dev/sda2<br><br><span class="hljs-comment"># 文件系统扩容</span><br><br>lsblk<br>NAME     MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT<br>sda        8:0   <span class="hljs-number"> 0 </span>   2T <span class="hljs-number"> 0 </span>disk <br>├─sda1     8:1   <span class="hljs-number"> 0 </span> 100M <span class="hljs-number"> 0 </span>part /boot/efi<br>└─sda2     8:2   <span class="hljs-number"> 0 </span>   2T <span class="hljs-number"> 0 </span>part / <br><br></code></pre></td></tr></table></figure><p>本次在CentOS7中扩容的分区是这块磁盘上的最后一个分区，也就是磁盘扩展后增加的空间是加在磁盘的最后一个分区。</p><p>所以可以通过growpart工具修改硬盘的分区表，将这部分空间直接增加到最后一个分区。</p><p>所以如果你要扩容的分区在你的系统上并非是磁盘上的最后一个分区的话，可能无法直接无损扩充分区。</p><p>请谨慎使用此方法进行操作，建议做好数据备份再进行操作。</p><h1 id="使用Linux-Live-ISO-关机后离线GUI调整分区扩展"><a href="#使用Linux-Live-ISO-关机后离线GUI调整分区扩展" class="headerlink" title="使用Linux Live ISO 关机后离线GUI调整分区扩展"></a>使用Linux Live ISO 关机后离线GUI调整分区扩展</h1><p>GParted Live 下载 <a href="https://gparted.org/livecd.php">https://gparted.org/livecd.php</a> </p><p>文件系统支持情况：<a href="https://gparted.org/features.php">https://gparted.org/features.php</a> </p><p>使用教程：<a href="https://blog.csdn.net/Mr_rsq/article/details/99822699">https://blog.csdn.net/Mr_rsq/article/details/99822699</a> </p><p><img src="https://gparted.org/screens/gparted-main-window.png" srcset="/img/loading.gif" lazyload alt="GParted"></p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://access.redhat.com/solutions/5540131">https://access.redhat.com/solutions/5540131</a> </p><p><a href="https://cloud.tencent.com/developer/article/1653394">https://cloud.tencent.com/developer/article/1653394</a> </p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/Elasticsearch-x-pack-core/">Elasticsearch 8.7 白金版激活</a></li><li><a href="https://songxwn.com/elk_cluster/">Elasticsearch 安装配置集群系统</a></li><li><a href="https://songxwn.com/elk_snmp_trap/">ELK-Logstash配置SNMP-Trap</a></li><li><a href="https://chengzhaoxi.xyz/361d7ede.html">互联网算法工程开发常用技术</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>VMware</tag>
      
      <tag>Disk</tag>
      
      <tag>Partition</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Elasticsearch 安装配置集群系统</title>
    <link href="/elk_cluster/"/>
    <url>/elk_cluster/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>本教程客户端API关闭HTTPS认证，但传输使用HTTPS。（为了接入<a href="https://songxwn.com/frostmourne_install/">日志监控</a>）</p><p>主要介绍了ES集群的搭建。ELK单机使用可参考：<a href="https://songxwn.com/elk/">https://songxwn.com/elk/</a> </p><p>Elasticsearch版本：8.x</p><p>系统版本：Rocky Linux 8.7 (关闭SE Linux和防火墙)</p><p>配置要求：建议4核8G以上，存储空间按照存储的文档大小规划。</p><p>Elasticsearch 集群建议至少要有三个节点，两个以上的master节点。</p><p>本教程也同样适用于也适用于其他RHEL8-9版本衍生版系统：如Centos stream、AlmaLinux等。</p><span id="more"></span><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>（1）集群（Cluster）： ES可以作为一个独立的单个搜索服务器。不过，为了处理大型数据集，实现容错和高可用性，ES可以运行在许多互相合作的服务器上。这些服务器的集合称为集群。</p><p>（2）节点（Node）： 形成集群的每个服务器称为节点。</p><p>（3）索引(index): 在 ES 中, 索引是一组文档的集合。</p><p>（4）分片（shard）</p><p>当有大量的文档时，由于内存的限制、磁盘处理能力不足、无法足够快的响应客户端的请求等，一个节点可能不够。这种情况下，数据可以分为较小的分片。每个分片放到不同的服务器上。</p><p>当你查询的索引分布在多个分片上时，ES会把查询发送给每个相关的分片，并将结果组合在一起，而应用程序并不知道分片的存在。即：这个过程对用户来说是透明的。</p><p>（5）副本（Replia）</p><p>为提高查询吞吐量或实现高可用性，可以使用分片副本。</p><p>副本是一个分片的精确复制，每个分片可以有零个或多个副本。ES中可以有许多相同的分片，其中之一被选择更改索引操作，这种特殊的分片称为主分片。</p><p>当主分片丢失时，如：该分片所在的数据不可用时，集群将副本提升为新的主分片。</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>分片与副本的区别在于：</p><p>当你分片设置为5，数据量为30G时，es会自动帮我们把数据均衡地分配到5个分片上，即每个分片大概有6G数据，当你查询数据时，ES会把查询发送给每个相关的分片，并将结果组合在一起。</p><p>而副本，就是对分布在5个分片的数据进行复制。因为分片是把数据进行分割而已，数据依然只有一份，这样的目的是保障查询的高效性，副本则是多复制几份分片的数据，这样的目的是保障数据的高可靠性，防止数据丢失。</p><p>注意</p><p>索引建立后，分片个数是不可以更改的。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="系统参数调整"><a href="#系统参数调整" class="headerlink" title="系统参数调整"></a>系统参数调整</h2><h3 id="修改虚拟内存大小"><a href="#修改虚拟内存大小" class="headerlink" title="修改虚拟内存大小"></a>修改虚拟内存大小</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &gt;&gt; /etc/sysctl.conf &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">vm.max_map_count=655360</span><br><span class="hljs-string">fs.file-max=655360</span><br><span class="hljs-string">EOF</span><br><br>sysctl -p<br><br><span class="hljs-comment"># 执行在线生效。</span><br><br></code></pre></td></tr></table></figure><h3 id="修改所有用户限制"><a href="#修改所有用户限制" class="headerlink" title="修改所有用户限制"></a>修改所有用户限制</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &gt;&gt; /etc/security/limits.conf &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">* soft nofile 924000</span><br><span class="hljs-string">* hard nofile 924000</span><br><span class="hljs-string">* soft nproc 4096</span><br><span class="hljs-string">* hard nproc 4096</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment"># 永久生效，但需要重启。</span><br><br></code></pre></td></tr></table></figure><h2 id="正式安装"><a href="#正式安装" class="headerlink" title="正式安装"></a>正式安装</h2><h3 id="yum源配置"><a href="#yum源配置" class="headerlink" title="yum源配置"></a>yum源配置</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs routeros">vim /etc/yum.repos.d/elasticsearch.repo<br><br>[elasticsearch]<br><span class="hljs-attribute">name</span>=Elasticsearch repository <span class="hljs-keyword">for</span> 8.x packages<br><span class="hljs-attribute">baseurl</span>=https://mirrors.tuna.tsinghua.edu.cn/elasticstack/8.x/yum<br><span class="hljs-attribute">gpgcheck</span>=0<br><span class="hljs-attribute">enabled</span>=1<br><span class="hljs-attribute">autorefresh</span>=1<br><span class="hljs-attribute">type</span>=rpm-md<br><br><span class="hljs-comment"># 使用清华大学镜像源，关闭gpg认证。</span><br><br></code></pre></td></tr></table></figure><h3 id="集群规划，集群名字为ES-CU1"><a href="#集群规划，集群名字为ES-CU1" class="headerlink" title="集群规划，集群名字为ES-CU1"></a>集群规划，集群名字为ES-CU1</h3><table><thead><tr><th align="left">节点名字</th><th align="left">IP</th><th align="left">角色规划</th></tr></thead><tbody><tr><td align="left">ES-01</td><td align="left">100.64.128.101</td><td align="left">master、data</td></tr><tr><td align="left">ES-02</td><td align="left">100.64.128.102</td><td align="left">master、data</td></tr><tr><td align="left">ES-03</td><td align="left">100.64.128.103</td><td align="left">master、data</td></tr></tbody></table><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">vim /etc/hosts<br><br><br><span class="hljs-number">100.64.128.101</span> ES-<span class="hljs-number">01</span><br><span class="hljs-number">100.64.128.102</span> ES-<span class="hljs-number">02</span><br><span class="hljs-number">100.64.128.103</span> ES-<span class="hljs-number">03</span><br><br># 配置本地主机名解析，通过ping验证。每个节点都要配置<br><br></code></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmake">dnf <span class="hljs-keyword">install</span> elasticsearch logstash kibana -y<br><br><span class="hljs-comment"># 注意安装后会自动生成证书和密码，默认CA根目录证书有效期为三年,transport证书有效期为99年。</span><br>注意配置前不要启动ES。<br><br></code></pre></td></tr></table></figure><h3 id="关闭HTTPS认证（每台节点配置）"><a href="#关闭HTTPS认证（每台节点配置）" class="headerlink" title="关闭HTTPS认证（每台节点配置）"></a>关闭HTTPS认证（每台节点配置）</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">vim</span> <span class="hljs-string">/etc/elasticsearch/elasticsearch.yml</span><br><br><br><span class="hljs-comment"># Enable encryption for HTTP API client connections, such as Kibana, Logstash, and Agents</span><br><span class="hljs-attr">xpack.security.http.ssl:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment">#  keystore.path: certs/http.p12</span><br><br>  <br><br></code></pre></td></tr></table></figure><blockquote><p> xpack.security.http.ssl 改为false，并注释证书路径。</p></blockquote><h3 id="配置集群（每台节点配置，但node-name和IP需要修改）"><a href="#配置集群（每台节点配置，但node-name和IP需要修改）" class="headerlink" title="配置集群（每台节点配置，但node.name和IP需要修改）"></a>配置集群（每台节点配置，但node.name和IP需要修改）</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs clean">##ES<span class="hljs-number">-01</span>配置#################################################<br><br>vim /etc/elasticsearch/elasticsearch.yml <br><br>cluster.name: ES-CU1<br>node.name: ES<span class="hljs-number">-01</span><br>http.host: <span class="hljs-number">100.64</span><span class="hljs-number">.128</span><span class="hljs-number">.101</span><br>transport.host: <span class="hljs-number">100.64</span><span class="hljs-number">.128</span><span class="hljs-number">.101</span><br>network.host: <span class="hljs-number">100.64</span><span class="hljs-number">.128</span><span class="hljs-number">.101</span><br>node.roles: [master,data]<br>discovery.seed_hosts: [<span class="hljs-string">&quot;100.64.128.101:9300&quot;</span>,<span class="hljs-string">&quot;100.64.128.102:9300&quot;</span>,<span class="hljs-string">&quot;100.64.128.103:9300&quot;</span>]<br>cluster.initial_master_nodes: [<span class="hljs-string">&quot;ES-01&quot;</span>]<br><br><br>##ES<span class="hljs-number">-02</span>配置#################################################<br><br>﻿<br><br>vim /etc/elasticsearch/elasticsearch.yml <br><br><br>cluster.name: ES-CU1<br>node.name: ES<span class="hljs-number">-02</span><br>http.host: <span class="hljs-number">100.64</span><span class="hljs-number">.128</span><span class="hljs-number">.102</span><br>transport.host: <span class="hljs-number">100.64</span><span class="hljs-number">.128</span><span class="hljs-number">.102</span><br>network.host: <span class="hljs-number">100.64</span><span class="hljs-number">.128</span><span class="hljs-number">.102</span><br>node.roles: [master,data]<br>discovery.seed_hosts: [<span class="hljs-string">&quot;100.64.128.101:9300&quot;</span>,<span class="hljs-string">&quot;100.64.128.102:9300&quot;</span>,<span class="hljs-string">&quot;100.64.128.103:9300&quot;</span>]<br>cluster.initial_master_nodes: [<span class="hljs-string">&quot;ES-01&quot;</span>]<br><br>﻿<br><br>##ES<span class="hljs-number">-03</span>配置#################################################<br><br>vim /etc/elasticsearch/elasticsearch.yml <br><br><br>cluster.name: ES-CU1<br>node.name: ES<span class="hljs-number">-03</span><br>http.host: <span class="hljs-number">100.64</span><span class="hljs-number">.128</span><span class="hljs-number">.103</span><br>transport.host: <span class="hljs-number">100.64</span><span class="hljs-number">.128</span><span class="hljs-number">.103</span><br>network.host: <span class="hljs-number">100.64</span><span class="hljs-number">.128</span><span class="hljs-number">.103</span><br>node.roles: [master,data]<br>discovery.seed_hosts: [<span class="hljs-string">&quot;100.64.128.101:9300&quot;</span>,<span class="hljs-string">&quot;100.64.128.102:9300&quot;</span>,<span class="hljs-string">&quot;100.64.128.103:9300&quot;</span>]<br>cluster.initial_master_nodes: [<span class="hljs-string">&quot;ES-01&quot;</span>]<br><br><br><br><br># 注意防火墙开放端口 <span class="hljs-number">9200</span> 和 <span class="hljs-number">9300</span>端口。<br># 注意默认配置文件有http.host 和 cluster.initial_master_nodes配置，注意删除或修改。<br><br></code></pre></td></tr></table></figure><ul><li>cluster.name为集群名字，集群内所有节点必须统一。</li><li>node.name为节点名字，每个节点不能一样。</li><li>http.host、transport.host、network.host配置为主机的IP地址。</li><li>node.roles: [master,data]，为配置节点角色，目前为主节点和存储节点。<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-node.html">说明文档</a></li><li>discovery.seed_hosts 配置发现其他节点，一般写所有节点的地址，后面加上传输节点的端口号。默认为9300.</li><li>cluster.initial_master_nodes节点初始化默认主节点选定。</li></ul><h3 id="启动ES-01，验证并配置其他节点同步证书。"><a href="#启动ES-01，验证并配置其他节点同步证书。" class="headerlink" title="启动ES-01，验证并配置其他节点同步证书。"></a>启动ES-01，验证并配置其他节点同步证书。</h3><h4 id="ES-01-（第一个启动，其他节点先不要启动。使用ES-01自动生成的证书）"><a href="#ES-01-（第一个启动，其他节点先不要启动。使用ES-01自动生成的证书）" class="headerlink" title="ES-01 （第一个启动，其他节点先不要启动。使用ES-01自动生成的证书）"></a>ES-01 （第一个启动，其他节点先不要启动。使用ES-01自动生成的证书）</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk">systemctl enable elasticsearch.service <br><br><span class="hljs-comment"># 设置开机启动</span><br><br>systemctl restart elasticsearch.service<br><br><span class="hljs-comment"># 启动</span><br><br>curl -q http:<span class="hljs-regexp">//</span><span class="hljs-number">100.64</span>.<span class="hljs-number">128.101</span>:<span class="hljs-number">9200</span><br><br><span class="hljs-comment"># 验证启动</span><br><br></code></pre></td></tr></table></figure><p>注意：安装之后其他节点不能启动，要等配置好集群配置和证书后启动。</p><p>如果启动过了，建议按照教程最后的教程清理按照。</p><h4 id="-2"><a href="#-2" class="headerlink" title=""></a></h4><h4 id="ES-02"><a href="#ES-02" class="headerlink" title="ES-02"></a>ES-02</h4><p><a href="https://www.runoob.com/linux/linux-comm-scp.html">SCP教程</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs awk">scp -r ES-<span class="hljs-number">01</span>:<span class="hljs-regexp">/etc/</span>elasticsearch<span class="hljs-regexp">/certs/</span> <span class="hljs-regexp">/etc/</span>elasticsearch/<br>scp -r ES-<span class="hljs-number">01</span>:<span class="hljs-regexp">/etc/</span>elasticsearch<span class="hljs-regexp">/elasticsearch.keystore /</span>etc<span class="hljs-regexp">/elasticsearch/</span><br><br><span class="hljs-comment"># scp同步证书文件和密钥文件，也可以手动下载上传。</span><br><br><br>systemctl enable elasticsearch.service <br><br><span class="hljs-comment"># 设置开机启动</span><br><br>systemctl restart elasticsearch.service<br><br>﻿<br><span class="hljs-comment"># 启动</span><br><br>curl -q http:<span class="hljs-regexp">//</span><span class="hljs-number">100.64</span>.<span class="hljs-number">128.102</span>:<span class="hljs-number">9200</span><br><br><span class="hljs-comment"># 简单验证启动，如有返回字符则启动生成。</span><br><br></code></pre></td></tr></table></figure><h4 id="ES-03"><a href="#ES-03" class="headerlink" title="ES-03"></a>ES-03</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs awk">scp -r ES-<span class="hljs-number">01</span>:<span class="hljs-regexp">/etc/</span>elasticsearch<span class="hljs-regexp">/certs/</span> <span class="hljs-regexp">/etc/</span>elasticsearch/<br><br>scp -r ES-<span class="hljs-number">01</span>:<span class="hljs-regexp">/etc/</span>elasticsearch<span class="hljs-regexp">/elasticsearch.keystore /</span>etc<span class="hljs-regexp">/elasticsearch/</span><br><br><br><span class="hljs-comment"># scp同步覆盖证书文件和密钥文件，也可以手动下载上传。</span><br><br><br>systemctl enable elasticsearch.service <br><br><br><span class="hljs-comment"># 设置开机启动</span><br><br><br>systemctl restart elasticsearch.service<br><br><br><span class="hljs-comment"># 启动</span><br><br><br>curl -q http:<span class="hljs-regexp">//</span><span class="hljs-number">100.64</span>.<span class="hljs-number">128.103</span>:<span class="hljs-number">9200</span><br><br><br><span class="hljs-comment"># 简单验证启动，如有返回字符则启动生成。</span><br><br></code></pre></td></tr></table></figure><h2 id="默认文件目录说明"><a href="#默认文件目录说明" class="headerlink" title="默认文件目录说明"></a>默认文件目录说明</h2><h3 id="配置文件目录"><a href="#配置文件目录" class="headerlink" title="配置文件目录"></a>配置文件目录</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs awk">tree -L <span class="hljs-number">2</span> <span class="hljs-regexp">/etc/</span>elasticsearch/<br><span class="hljs-regexp">/etc/</span>elasticsearch/<br>├── certs<br>│   ├── http_ca.crt<br>│   ├── http.p12<br>│   └── transport.p12<br>├── elasticsearch.keystore<br>├── elasticsearch-plugins.example.yml<br>├── elasticsearch.yml<br>├── jvm.options<br>├── jvm.options.d<br>├── log4j2.properties<br>├── role_mapping.yml<br>├── roles.yml<br>├── users<br>└── users_roles<br><br><span class="hljs-comment"># certs为默认生成的证书存储目录，http_ca.crt为根证书、http.p12为默认9200所使用的web服务器证书，transport.p12为传输节点之间使用的证书。</span><br><br><span class="hljs-comment"># elasticsearch.keystore 为存储密码所使用的文件，如证书密码，LDAP访问密码、邮箱密码等。</span><br><br><span class="hljs-comment"># elasticsearch.yml 为主配置文件。</span><br><br><span class="hljs-comment"># jvm.options 为ES的JAVA启动配置文件，可以修改启动内存等配置。</span><br><br></code></pre></td></tr></table></figure><h3 id="程序目录"><a href="#程序目录" class="headerlink" title="程序目录"></a>程序目录</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk">tree -L <span class="hljs-number">1</span> <span class="hljs-regexp">/usr/</span>share/elasticsearch<br><span class="hljs-regexp">/usr/</span>share/elasticsearch<br>├── bin<br>├── jdk<br>├── lib<br>├── LICENSE.txt<br>├── modules<br>├── NOTICE.txt<br>├── plugins<br>└── README.asciidoc<br><br><span class="hljs-comment"># bin存放二进制启动文件的目录</span><br><span class="hljs-comment"># jdk存放自带JAVA版本的目录</span><br><br></code></pre></td></tr></table></figure><h3 id="日志目录"><a href="#日志目录" class="headerlink" title="日志目录"></a>日志目录</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">tree -L <span class="hljs-number">1</span> /var/<span class="hljs-keyword">log</span>/elasticsearch/<br>/var/<span class="hljs-keyword">log</span>/elasticsearch/<br>├── elasticsearch_audit.json<br>├── elasticsearch_deprecation.json<br>├── elasticsearch_index_indexing_slowlog.json<br>├── elasticsearch_index_search_slowlog.json<br>├── elasticsearch.<span class="hljs-keyword">log</span><br>├── elasticsearch_server.json<br>├── ES-CU1_audit.json<br>├── ES-CU1_deprecation.json<br>├── ES-CU1_index_indexing_slowlog.json<br>├── ES-CU1_index_search_slowlog.json<br>├── ES-CU1.<span class="hljs-keyword">log</span><br>├── ES-CU1_server.json<br>├── gc.<span class="hljs-keyword">log</span><br>├── gc.<span class="hljs-keyword">log</span><span class="hljs-number">.00</span><br><br># 可用于排错<br><br></code></pre></td></tr></table></figure><h3 id="数据存储目录"><a href="#数据存储目录" class="headerlink" title="数据存储目录"></a>数据存储目录</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">tree -L <span class="hljs-number">1</span> <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/elasticsearch/</span><br><span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/elasticsearch/</span><br>├── indices<br>├── node.lock<br>├── nodes<br>├── snapshot_cache<br>└── _state<br><br><span class="hljs-comment"># 存放数据</span><br><br></code></pre></td></tr></table></figure><h2 id="重置管理员密码和验证集群数量"><a href="#重置管理员密码和验证集群数量" class="headerlink" title="重置管理员密码和验证集群数量"></a>重置管理员密码和验证集群数量</h2><h4 id="重置密码"><a href="#重置密码" class="headerlink" title="重置密码"></a>重置密码</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs awk">usr<span class="hljs-regexp">/share/</span>elasticsearch<span class="hljs-regexp">/bin/</span>elasticsearch-reset-password -u elastic<br><br><span class="hljs-comment"># 重置最高管理员elastic密码，全节点同步</span><br><br><span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/elasticsearch/</span>bin/elasticsearch-reset-password -u kibana_system<br><br><span class="hljs-comment"># 重置 kibana_system密码，全节点同步，下面接入kibana使用。</span><br><br><br><br>curl -k -u elastic http:<span class="hljs-regexp">//</span><span class="hljs-number">100.64</span>.<span class="hljs-number">128.101</span>:<span class="hljs-number">9200</span><br>Enter host password <span class="hljs-keyword">for</span> user <span class="hljs-string">&#x27;elastic&#x27;</span>:<br>&#123;<br>  <span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;ES-01&quot;</span>,<br>  <span class="hljs-string">&quot;cluster_name&quot;</span> : <span class="hljs-string">&quot;ES-CU1&quot;</span>,<br>  <span class="hljs-string">&quot;cluster_uuid&quot;</span> : <span class="hljs-string">&quot;UNCqtG1YTeuHSNgDHOHkIw&quot;</span>,<br>  <span class="hljs-string">&quot;version&quot;</span> : &#123;<br>    <span class="hljs-string">&quot;number&quot;</span> : <span class="hljs-string">&quot;8.7.0&quot;</span>,<br>    <span class="hljs-string">&quot;build_flavor&quot;</span> : <span class="hljs-string">&quot;default&quot;</span>,<br>    <span class="hljs-string">&quot;build_type&quot;</span> : <span class="hljs-string">&quot;rpm&quot;</span>,<br>    <span class="hljs-string">&quot;build_hash&quot;</span> : <span class="hljs-string">&quot;09520b59b6bc1057340b55750186466ea715e30e&quot;</span>,<br>    <span class="hljs-string">&quot;build_date&quot;</span> : <span class="hljs-string">&quot;2023-03-27T16:31:09.816451435Z&quot;</span>,<br>    <span class="hljs-string">&quot;build_snapshot&quot;</span> : false,<br>    <span class="hljs-string">&quot;lucene_version&quot;</span> : <span class="hljs-string">&quot;9.5.0&quot;</span>,<br>    <span class="hljs-string">&quot;minimum_wire_compatibility_version&quot;</span> : <span class="hljs-string">&quot;7.17.0&quot;</span>,<br>    <span class="hljs-string">&quot;minimum_index_compatibility_version&quot;</span> : <span class="hljs-string">&quot;7.0.0&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;tagline&quot;</span> : <span class="hljs-string">&quot;You Know, for Search&quot;</span><br>&#125;<br><br><span class="hljs-comment"># 使用上面重置的密码，查看ES是否可用。</span><br><br>curl -k -u elastic http:<span class="hljs-regexp">//</span><span class="hljs-number">100.64</span>.<span class="hljs-number">128.101</span>:<span class="hljs-number">9200</span><span class="hljs-regexp">/_cat/</span>nodes?v<br>Enter host password <span class="hljs-keyword">for</span> user <span class="hljs-string">&#x27;elastic&#x27;</span>:<br>ip             heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name<br><span class="hljs-number">100.64</span>.<span class="hljs-number">128.102</span>            <span class="hljs-number">5</span>          <span class="hljs-number">92</span>   <span class="hljs-number">1</span>    <span class="hljs-number">0.01</span>    <span class="hljs-number">0.03</span>     <span class="hljs-number">0.00</span> dm        -      ES-<span class="hljs-number">02</span><br><span class="hljs-number">100.64</span>.<span class="hljs-number">128.101</span>           <span class="hljs-number">18</span>          <span class="hljs-number">93</span>   <span class="hljs-number">5</span>    <span class="hljs-number">0.20</span>    <span class="hljs-number">0.35</span>     <span class="hljs-number">0.17</span> dm        *      ES-<span class="hljs-number">01</span><br><span class="hljs-number">100.64</span>.<span class="hljs-number">128.103</span>           <span class="hljs-number">17</span>          <span class="hljs-number">89</span>   <span class="hljs-number">1</span>    <span class="hljs-number">0.02</span>    <span class="hljs-number">0.05</span>     <span class="hljs-number">0.02</span> dm        -      ES-<span class="hljs-number">03</span><br><br><br><span class="hljs-comment"># 使用上面重置的密码，可以查看所有在线的集群。</span><br><br></code></pre></td></tr></table></figure><h1 id="配置Kibana接入集群"><a href="#配置Kibana接入集群" class="headerlink" title="配置Kibana接入集群"></a>配置Kibana接入集群</h1><p>Kibana 数据基本都存储在ES数据库，且为data角色的。</p><h2 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h2><p>默认为 5601 端口，默认绑定为127.0.0.1 地址。使用HTTP协议。</p><p>可以修改kibana.yml 文件修改绑定地址，或者使用Nginx反向代理。</p><h2 id="修改语言和监听IP"><a href="#修改语言和监听IP" class="headerlink" title="修改语言和监听IP"></a>修改语言和监听IP</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">vim</span> <span class="hljs-string">/etc/kibana/kibana.yml</span>  <br><br><span class="hljs-attr">i18n.locale:</span> <span class="hljs-string">&quot;zh-CN&quot;</span><br><br><span class="hljs-attr">server.host:</span> <span class="hljs-string">&quot;0.0.0.0&quot;</span><br><br><span class="hljs-comment"># 配置语言和监听IP。</span><br><br><span class="hljs-string">systemctl</span> <span class="hljs-string">enable</span> <span class="hljs-string">--now</span> <span class="hljs-string">kibana.service</span><br><br><span class="hljs-comment"># 配置开机启动和启动。</span><br><br></code></pre></td></tr></table></figure><h2 id="基本认证配置"><a href="#基本认证配置" class="headerlink" title="基本认证配置"></a>基本认证配置</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">vim</span> <span class="hljs-string">/etc/kibana/kibana.yml</span> <br><br><br><span class="hljs-comment"># =================== System: Elasticsearch ===================</span><br><br><br><span class="hljs-attr">elasticsearch.hosts:</span> [<span class="hljs-string">&quot;http://100.64.128.101:9200&quot;</span>,<span class="hljs-string">&quot;http://100.64.128.102:9200&quot;</span>,<span class="hljs-string">&quot;http://100.64.128.103:9200&quot;</span>]<br><br><br><span class="hljs-attr">elasticsearch.username:</span> <span class="hljs-string">&quot;kibana_system&quot;</span><br><span class="hljs-attr">elasticsearch.password:</span> <span class="hljs-string">&quot;EVecudsC4vvlcR6QT4mR&quot;</span><br><br></code></pre></td></tr></table></figure><p>修改文件，配置ES所有访问地址，配置系统默认账号kibana_system的密码，填入配置文件。（必须为此账号）</p><p>使用<code>systemctl restart kibana.service</code>重启服务，使配置生效。</p><h1 id="在Kibana上查看和监测ES集群"><a href="#在Kibana上查看和监测ES集群" class="headerlink" title="在Kibana上查看和监测ES集群"></a>在Kibana上查看和监测ES集群</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>kibana/kibana.yml <br><br>monitoring.ui.ccs.enabled: false<br><br><span class="hljs-comment"># 添加配置文件，重启生效。</span><br><br><span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/elasticsearch/</span>bin/elasticsearch-reset-password -u beats_system<br><br><span class="hljs-comment"># 重置自带的beats_system的密码，在下面使用。</span><br><br>dnf install metricbeat -y<br><br>systemctl enable --now metricbeat.service<br><br>metricbeat modules enable elasticsearch-xpack<br><br><span class="hljs-comment"># 安装metricbeat并启用监控ES模块。</span><br><br><br>vim <span class="hljs-regexp">/etc/m</span>etricbeat/metricbeat.yml <br><br>output.elasticsearch:<br>  hosts: [<span class="hljs-string">&quot;http://100.64.128.101:9200&quot;</span>,<span class="hljs-string">&quot;http://100.64.128.102:9200&quot;</span>,<span class="hljs-string">&quot;http://100.64.128.103:9200&quot;</span>]<br>  username: <span class="hljs-string">&quot;beats_system&quot;</span><br>  password: <span class="hljs-string">&quot;1@PASSWORD&quot;</span><br>  <br><span class="hljs-comment"># 配置集群地址，账号密码，接入ES。</span><br>  <br><br>systemctl restart metricbeat.service <br><br></code></pre></td></tr></table></figure><p>访问 <code>http://100.64.128.101:5601/app/monitoring</code>路径</p><p>即可查看监控，使用elastic账号登录。</p><h1 id="彻底清理卸载ES"><a href="#彻底清理卸载ES" class="headerlink" title="彻底清理卸载ES"></a>彻底清理卸载ES</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs awk">systemctl stop elasticsearch<br><br><span class="hljs-comment"># 停止服务</span><br><br>dnf remove elasticsearch -y<br><br><span class="hljs-comment"># 使用dnf包管理器删除</span><br><br>rm -rf <span class="hljs-regexp">/var/</span>lib/elasticsearch<br><br><span class="hljs-comment"># 清理默认数据存储文件</span><br><br>rm -rf <span class="hljs-regexp">/etc/</span>elasticsearch<br><br><span class="hljs-comment"># 清理配置文件及默认证书和密钥存储</span><br><br>rm -rf <span class="hljs-regexp">/usr/</span>share/elasticsearch<br><br><span class="hljs-comment"># 清理程序所在目录</span><br><br>rm -rf <span class="hljs-regexp">/var/</span>log/elasticsearch<br><br><span class="hljs-comment"># 清理日志存储</span><br><br></code></pre></td></tr></table></figure><h1 id="相关教程"><a href="#相关教程" class="headerlink" title="相关教程"></a>相关教程</h1><p><a href="https://songxwn.com/elk/">单机部署ELK，接收syslogr日志</a></p><p><a href="https://songxwn.com/frostmourne_install/">接入ES做日志告警系统</a></p><p><a href="https://songxwn.com/elk_snmp_trap/">配置接收SNMP-Trap日志</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://qiita.com/mingchun_zhao/items/b229addd5697ad571d94">https://qiita.com/mingchun_zhao/items/b229addd5697ad571d94</a> </p><p><a href="https://www.zsjweblog.com/2022/03/09/elasticsearch8-1-0%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/">https://www.zsjweblog.com/2022/03/09/elasticsearch8-1-0%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</a> </p><p><a href="https://blog.51cto.com/feirenraoyuan/5716392">https://blog.51cto.com/feirenraoyuan/5716392</a> </p><p><a href="http://dbaselife.com/doc/831/">http://dbaselife.com/doc/831/</a> </p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/Elasticsearch-x-pack-core/">Elasticsearch 8.7 白金版激活</a></li><li><a href="https://songxwn.com/Linux-growpart/">Linux 虚拟机在线热扩容分区</a></li><li><a href="https://songxwn.com/elk_snmp_trap/">ELK-Logstash配置SNMP-Trap</a></li><li><a href="https://chengzhaoxi.xyz/361d7ede.html">互联网算法工程开发常用技术</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>ELK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>elk</tag>
      
      <tag>elasticsearch</tag>
      
      <tag>cluster</tag>
      
      <tag>ha</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ELK Logstash配置SNMP-Trap</title>
    <link href="/elk_snmp_trap/"/>
    <url>/elk_snmp_trap/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本文章适用于ELK的logstash 配置SNMP Trap插件,接收告警通知。<br>默认情况下是安装此插件的，如没有可手动安装。</p><p>一般用于网络设备。</p><p>注意此插件不支持v3版本。</p><p>ELK系列教程：<a href="https://songxwn.com/categories/linux/ELK/">https://songxwn.com/categories/linux/ELK/</a></p><p>参考：<a href="https://www.elastic.co/guide/en/logstash/current/plugins-inputs-snmptrap.html">https://www.elastic.co/guide/en/logstash/current/plugins-inputs-snmptrap.html</a> </p><span id="more"></span><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs puppet">vim /etc/logstash/conf.d/trap.conf<br><br><span class="hljs-keyword">input</span> &#123;<br>  snmptrap &#123;<br>    <span class="hljs-attr">type</span> =&gt; <span class="hljs-string">&quot;snmp-trap&quot;</span><br><span class="hljs-attr">community</span> =&gt;<span class="hljs-string">&quot;public&quot;</span><br>    <span class="hljs-attr">port</span> =&gt; <span class="hljs-number">162</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">output</span> &#123;<br>  elasticsearch &#123;<br>    <span class="hljs-attr">hosts</span> =&gt; [<span class="hljs-string">&quot;http://192.168.0.1:9200&quot;</span>]<br>    <span class="hljs-attr">index</span> =&gt; <span class="hljs-string">&quot;snmp-trap-v2-%&#123;+YYYY.MM&#125;&quot;</span><br><span class="hljs-attr">user</span> =&gt; elastic<br>    <span class="hljs-attr">password</span> =&gt; <span class="hljs-string">&quot;songxwn.com&quot;</span><br>  &#125;<br>&#125;<br><br><br><span class="hljs-comment"># 以上示例文件中，团体名字为public，配置端口为默认的162。</span><br><br></code></pre></td></tr></table></figure><p>注意：如果要需要解析OID，需要指定mib库yaml格式的目录。</p><p>ELK安装可参考： <a href="https://songxwn.com/elk/">https://songxwn.com/elk/</a></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/ELK-logstash-hostname/">ELK Logstash解析系统日志错误</a></li><li><a href="https://songxwn.com/ELK-AD-LDAP-Authentication/">Elasticsearch 接入微软Active Directory认证</a></li><li><a href="https://songxwn.com/podman/">Podman 容器管理工具</a></li><li><a href="https://chengzhaoxi.xyz/361d7ede.html">互联网算法工程开发常用技术</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>ELK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>elk</tag>
      
      <tag>snmp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>部署团队服务导航网站 Team-nav</title>
    <link href="/team_nav/"/>
    <url>/team_nav/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>前后端完整的网址导航服务，可以用于公司内部内网使用，提供多种的卡片图标生成方式，能将上传的原型压缩包自动生成可访问的地址，支持私密卡片，发布倒计时等功能。</p><p>用于在公司内网部署使用，可在线修改上传、可拖拽排序等。</p><p>项目地址：<a href="https://github.com/tuituidan/team-nav">https://github.com/tuituidan/team-nav</a> </p><p>要求Java版本为 1.8.0</p><span id="more"></span><h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><ul><li>网址导航前端展示+搜索功能，<a href="#%E9%A6%96%E9%A1%B5%E5%9B%BE">首页图</a>。</li><li>网址导航后台基本功能：分类和卡片的增删改查，<a href="#%E5%90%8E%E5%8F%B0-%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86%E5%9B%BE">后台-分类管理图</a>  <a href="#%E5%90%8E%E5%8F%B0-%E5%8D%A1%E7%89%87%E5%88%97%E8%A1%A8%E5%9B%BE">后台-卡片列表图</a>  <a href="#%E5%90%8E%E5%8F%B0-%E5%8D%A1%E7%89%87%E7%BC%96%E8%BE%91%E5%9B%BE">后台-卡片编辑图</a>。</li><li>分类和卡片支持拖拽调整顺序，不用专门维护排序字段。</li><li>支持添加秘密卡片分类，该分类下的卡片需要登录才能看见，不开启登录功能则默认不显示。</li><li>暂时不需要的分类支持移除功能，移除后分类列表页面不可见，可从历史分类中还原回来，<a href="#%E5%90%8E%E5%8F%B0-%E5%8E%86%E5%8F%B2%E5%88%86%E7%B1%BB%E5%9B%BE">后台-历史分类图</a>。</li><li>卡片图标支持四种方式<ul><li>文本图标，输入少量文字作为图标，并可以为其选择背景色。 <a href="#%E5%90%8E%E5%8F%B0-%E5%8D%A1%E7%89%87%E7%BC%96%E8%BE%91%E5%9B%BE">后台-卡片编辑图</a></li><li>根据填写的链接自动获取该链接的获取<code>favicon.ico</code>图标。</li><li>手动上传图片作为图标。</li><li>可配置默认常用的一些图标，直接选择（搜索按图标文件名搜索），<a href="#%E5%8D%A1%E7%89%87%E5%9B%BE%E6%A0%87%E9%80%89%E6%8B%A9%E5%9B%BE">卡片图标选择图</a>。</li></ul></li><li>三种卡片类型说明<ul><li>普通类型：标题，内容，图标为必填，链接非必填，没有链接只是作为少量信息展示，点击卡片不会跳转页面。</li><li>原型类型：标题，内容，图标，原型文件为必填，原型文件上传后会自动生成原型展示的链接，点击卡片可跳转到该地址。</li><li>二维码类型：标题，内容，图标，链接均为必填，鼠标滑到卡片上会显示链接的二维码，可用手机进行扫描，方便进行移动端网址显示，<a href="#%E4%BA%8C%E7%BB%B4%E7%A0%81%E5%B1%95%E7%A4%BA%E5%9B%BE">二维码展示图</a>。</li></ul></li><li>原型可通过配置Nginx访问，<a href="#%E5%90%8E%E5%8F%B0-%E7%B3%BB%E7%BB%9F%E8%AE%BE%E7%BD%AE%E5%9B%BE">后台-系统设置图</a>。</li><li>发布倒计时功能，在首页对项目发布截止时间进行提醒，在系统设置中进行开启和关闭，同时有多个进行中的发布数据时，会定时切换，切换时间也在系统设置中设置。 <a href="#%E9%A6%96%E9%A1%B5-%E5%8F%91%E5%B8%83%E5%80%92%E8%AE%A1%E6%97%B6">首页-发布倒计时</a>  <a href="#%E5%90%8E%E5%8F%B0-%E5%8F%91%E5%B8%83%E5%80%92%E8%AE%A1%E6%97%B6">后台-发布倒计时</a></li></ul><h2 id="1-1-1-更新："><a href="#1-1-1-更新：" class="headerlink" title="## 1.1.1 更新："></a>## 1.1.1 更新：</h2><ul><li>优化细节</li></ul><p>分类图标选择和卡片图标选择后关闭下拉弹窗<br>卡片编辑时原型压缩包未重新上传不重复执行解压逻辑<br>卡片添加弹窗增加保存并继续添加按钮，保存卡片数据后不关闭弹窗，方便快速添加<br>卡片图标在进行选择，上传或输入文字生成图标后直接选中<br>登录页面添加自动登录选择框，勾选后，首页和登录页都会自动登录，主动退出登录将移除自动登录选择。</p><ul><li>缺陷处理</li></ul><p>解决左侧菜单收起时菜单显示个数减少问题<br>解决IE下因css变量导致的样式问题</p><h2 id="1-1-0-更新："><a href="#1-1-0-更新：" class="headerlink" title="1.1.0 更新："></a>1.1.0 更新：</h2><ul><li>修复添加倒计时结束时间报错bug</li><li>新增布局大小切换功能</li><li>支持网站LOGO在设置中修改</li></ul><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://s3.bmp.ovh/imgs/2023/04/18/63fe59352063dd32.png" srcset="/img/loading.gif" lazyload></p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="ZIP包部署"><a href="#ZIP包部署" class="headerlink" title="ZIP包部署"></a>ZIP包部署</h2><p>系统：Rocky Linux 8 (关闭SE Linux 关闭防火墙)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs shell">dnf install vim wget java-1.8.0-openjdk  -y<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装JDK 8</span><br><br>cd /opt/<br><br>wget https://github.com/tuituidan/team-nav/releases/download/v1.1.1/team-nav.tar.gz<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载，也可以手动下载，上传到opt目录下。（https://github.com/tuituidan/team-nav/releases）</span><br><br>tar -zxvf team-nav.tar.gz <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">解压</span><br><br>tree /opt<br>.<br>├── team-nav<br>│   ├── bin<br>│   │   ├── restart.sh<br>│   │   ├── start.sh<br>│   │   ├── status.sh<br>│   │   └── stop.sh<br>│   ├── config<br>│   │   └── application.yml<br>│   ├── docs<br>│   ├── logs<br>│   ├── README.md<br>│   ├── readme.txt<br>│   └── team-nav.jar<br>└── team-nav.tar.gz<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">目录结构如上</span><br><br>chmod +x /opt/team-nav/bin/* <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">给予脚本权限</span><br><br>/opt/team-nav/bin/start.sh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动</span><br><br>/opt/team-nav/bin/status.sh <br>team-nav 服务正在运行中 (PID: 9527). [is running ...]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看是否运行</span><br><br>/opt/team-nav/bin/stop.sh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">停止运行</span><br><br></code></pre></td></tr></table></figure><blockquote><p>默认端口为8080，通过8080端口访问服务，修改端口可以进入&#x2F;opt&#x2F;team-nav&#x2F;config&#x2F;application.yml配置。</p></blockquote><h2 id="Docker部署"><a href="#Docker部署" class="headerlink" title="Docker部署"></a>Docker部署</h2><p>Docker 安装参考：<a href="https://yeasy.gitbook.io/docker_practice/install/centos">https://yeasy.gitbook.io/docker_practice/install/centos</a> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p /opt/team-nav/logs<br>mkdir /opt/team-nav/database<br>mkdir /opt/team-nav/ext-resources<br>mkdir /opt/team-nav/config<br><br></code></pre></td></tr></table></figure><blockquote><p>创建日志、数据库、图片、配置文件夹。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d -p 8080:8080 \<br> -v /opt/team-nav/logs:/logs \<br> -v /opt/team-nav/database:/database \<br> -v /opt/team-nav/ext-resources:/ext-resources \<br> -v /opt/team-nav/config:/config \<br> -e nav-name=&quot;团队内部导航服务&quot; \<br> --restart always \<br> --name team-nav \<br>registry.cn-chengdu.aliyuncs.com/tuituidan/team-nav:1.1.1<br><br></code></pre></td></tr></table></figure><blockquote><p>映射容器8080端口到宿主机8080端口，通过访问主机 http:&#x2F;&#x2F;127.0.0.1:8080 。</p><p>映射上述步骤创建的文件夹</p><p>配置网站名字</p><p>配置为自动启动</p><p>配置容器名字</p></blockquote><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h1><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>路径：<a href="http://127.0.0.1:8080/login">http://127.0.0.1:8080/login</a> </p><p>默认账号：admin</p><p>默认密码：123456</p><h2 id="允许修改密码-docker镜像是无此文件的，手动创建即可"><a href="#允许修改密码-docker镜像是无此文件的，手动创建即可" class="headerlink" title="允许修改密码(docker镜像是无此文件的，手动创建即可)"></a>允许修改密码(docker镜像是无此文件的，手动创建即可)</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /opt/team-nav/config/application.yml<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">是否开启页面上进行密码修改，用户只有一个，请谨慎开启</span><br>change-password:<br>  enable: true<br><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">/opt/team-nav/bin/status.sh <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">ZIP包部署执行重启脚本</span><br><br>docker  restart team-nav<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">docker部署重启容器生效</span><br><br></code></pre></td></tr></table></figure><h1 id="Nginx反向代理域名"><a href="#Nginx反向代理域名" class="headerlink" title="Nginx反向代理域名"></a>Nginx反向代理域名</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/nginx/conf.d/team.conf<br><br><br>server &#123;<br>        listen 80;<br>        listen [::]:80;<br><br>        server_name team.baidu.com;<br><br><br>        # reverse proxy<br>        location / &#123;<br>                proxy_pass http://127.0.0.1:8082/;<br>                proxy_http_version      1.1;<br>        proxy_cache_bypass      $http_upgrade;<br>        proxy_set_header Upgrade                        $http_upgrade;<br>        proxy_set_header Connection             &quot;upgrade&quot;;<br>        proxy_set_header Host                           $host;<br>        proxy_set_header X-Real-IP                      $remote_addr;<br>        proxy_set_header X-Forwarded-For        $proxy_add_x_forwarded_for;<br>        proxy_set_header X-Forwarded-Proto      $scheme;<br>        proxy_set_header X-Forwarded-Host       $host;<br>        proxy_set_header X-Forwarded-Port       $server_port;<br>        &#125;<br>        location /ext-resources/modules &#123;<br>             alias   /opt/team-nav/ext-resources/modules;<br>             index  index.html index.htm;<br>         &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>一般来说只修改域名即可</p></blockquote><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/Juniper_Junos/">Juniper Junos系统架构和命令模式浅谈</a></li><li><a href="https://songxwn.com/vdo/">红帽的重复数据删除VDO</a></li><li><a href="https://www.qystu.cc/posts/52948.html">serviceworkers首屏优化</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VMware Vsphere 8 序列号</title>
    <link href="/VMware_Vsphere8_key/"/>
    <url>/VMware_Vsphere8_key/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>适用于VMware Vsphere 8系列产品的序列号，用于学习使用。</p><span id="more"></span><h2 id="vSphere-Enterprise-Plus"><a href="#vSphere-Enterprise-Plus" class="headerlink" title="vSphere Enterprise Plus:"></a>vSphere Enterprise Plus:</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">HG00K</span>-<span class="hljs-number">03</span>H8K-<span class="hljs-number">48929</span>-<span class="hljs-number">8</span>K1NP-<span class="hljs-number">3</span>LUJ4<br><br><span class="hljs-attribute">4V492</span>-<span class="hljs-number">44210</span>-<span class="hljs-number">48830</span>-<span class="hljs-number">931</span>GK-<span class="hljs-number">2</span>PRJ4<br><br><span class="hljs-attribute">NF212</span>-<span class="hljs-number">08</span>H0K-<span class="hljs-number">488</span>X8-WV9X6-<span class="hljs-number">1</span>F024<br><br><span class="hljs-attribute">4F40H</span>-<span class="hljs-number">4</span>ML1K-M89U0-<span class="hljs-number">0</span>C2N4-<span class="hljs-number">1</span>AKL4  vSphere Enterprise<br><br></code></pre></td></tr></table></figure><h2 id="vCenter-Standard"><a href="#vCenter-Standard" class="headerlink" title="vCenter Standard:"></a>vCenter Standard:</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">4F282</span>-<span class="hljs-number">0</span>MLD2-M8869-T89G0-CF240<br><br><span class="hljs-attribute">0Z20K</span>-<span class="hljs-number">07</span>JEH-<span class="hljs-number">08030</span>-<span class="hljs-number">908</span>EP-<span class="hljs-number">1</span>CUK4<br><br><span class="hljs-attribute">0F41K</span>-<span class="hljs-number">0</span>MJ4H-M88U1-<span class="hljs-number">0</span>C3N0-<span class="hljs-number">0</span>A214<br><br></code></pre></td></tr></table></figure><h2 id="vSAN-Enterprise-Plus"><a href="#vSAN-Enterprise-Plus" class="headerlink" title="vSAN Enterprise Plus:"></a>vSAN Enterprise Plus:</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">MG292</span>-<span class="hljs-number">08</span>L9K-<span class="hljs-number">48078</span>-KJ372-<span class="hljs-number">27</span>K20<br><br><span class="hljs-attribute">JF61H</span>-<span class="hljs-number">48</span>K8K-<span class="hljs-number">488</span>X9-W98Z0-<span class="hljs-number">1</span>FH24  vSphere <span class="hljs-number">8</span> for Virtual SAN Witness for Embedded OEMs<br><br></code></pre></td></tr></table></figure><h2 id="Horizon-Enterprise-v8-x"><a href="#Horizon-Enterprise-v8-x" class="headerlink" title="Horizon Enterprise  v8.x"></a>Horizon Enterprise  v8.x</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0G4DA</span>-<span class="hljs-number">49</span>J81-M80R1-<span class="hljs-number">012</span>N4-<span class="hljs-number">86</span>KH4<br><br></code></pre></td></tr></table></figure><h2 id="NSX"><a href="#NSX" class="headerlink" title="NSX"></a>NSX</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">NSX</span> Firewall with Advanced Threat Prevention:<br><span class="hljs-attribute">NC69K</span>-<span class="hljs-number">4</span>L040-M81T0-W98ZK-AFA40<br><br><span class="hljs-attribute">NSX</span> Data Center Distributed Threat Prevention:<br><span class="hljs-attribute">FV3E0</span>-<span class="hljs-number">2</span>WF1N-<span class="hljs-number">488</span>NP-XFXN9-ZU0R2<br><br><span class="hljs-attribute">NSX</span> Advanced Threat Prevention:<br><span class="hljs-attribute">HG40K</span>-<span class="hljs-number">0</span>Y1E0-M80D0-<span class="hljs-number">0</span>J9ZM-<span class="hljs-number">8</span>UH6<br><br></code></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="VMWare-Workstation-Pro-17"><a href="#VMWare-Workstation-Pro-17" class="headerlink" title="VMWare Workstation Pro 17"></a>VMWare Workstation Pro 17</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">MC60H</span>-DWHD5-H80U9-<span class="hljs-number">6</span>V85M-<span class="hljs-number">8280</span>D<br><span class="hljs-attribute">4A4RR</span>-<span class="hljs-number">813</span>DK-M81A9-<span class="hljs-number">4</span>U35H-<span class="hljs-number">06</span>KND<br><span class="hljs-attribute">NZ4RR</span>-FTK5H-H81C1-Q30QH-<span class="hljs-number">1</span>V2LA<br><span class="hljs-attribute">JU090</span>-<span class="hljs-number">6039</span>P-<span class="hljs-number">08409</span>-<span class="hljs-number">8</span>J0QH-<span class="hljs-number">2</span>YR7F<br><span class="hljs-attribute">4Y09U</span>-AJK97-<span class="hljs-number">089</span>Z0-A3054-<span class="hljs-number">83</span>KLA<br><span class="hljs-attribute">4C21U</span>-<span class="hljs-number">2</span>KK9Q-M8130-<span class="hljs-number">4</span>V2QH-CF810<br></code></pre></td></tr></table></figure><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><h1 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h1><p><a href="https://fdn.digiboy.ir/">https://fdn.digiboy.ir/</a> </p><h1 id="VMware-Vsphere8下载"><a href="#VMware-Vsphere8下载" class="headerlink" title="VMware Vsphere8下载"></a>VMware Vsphere8下载</h1><p> <a href="https://pan.baidu.com/s/1NdmWVq7crPMUPMTUNKZfjw?pwd=e7vl">百度云盘&gt; https://sysin.org/blog/vmware/</a></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/ESXi8_IPMI/">VMware ESXi 8 使用IPMITool</a></li><li><a href="https://songxwn.com/Veeam12/">Veeam Backup Replication 12 安装和激活</a></li><li><a href="https://songxwn.com/ESXI_CVE-2021-21974/">ESXi 勒索病毒ESXiArgs 其CVE-2021-21974漏洞分析和恢复</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>vmware</category>
      
    </categories>
    
    
    <tags>
      
      <tag>esxi</tag>
      
      <tag>vmware</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VMware ESXi 8 使用IPMITool</title>
    <link href="/ESXi8_IPMI/"/>
    <url>/ESXi8_IPMI/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本教程适用于在VMware ESXi 8上使用ipmitool 工具进行本地管理BMC。</p><p>因8.0无法正常安装社区打包的VIB版本，所以需要自行编译二进制文件，上传到esxi使用。</p><p>7.0版本及之前的建议安装VIB包的<a href="https://vswitchzero.com/ipmitool-vib">ipmitools</a></p><p>IPMITool可以用来获取和设置服务器带外管理口的网络配置、用户配置、传感器、重启BMC等等。</p><p>项目地址：<a href="https://github.com/ipmitool/ipmitool">https://github.com/ipmitool/ipmitool</a> </p><span id="more"></span><h1 id="编译教程"><a href="#编译教程" class="headerlink" title="编译教程"></a>编译教程</h1><p>使用 Ubuntu 18.04 （编译要求的openssl较低）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt update<br><br>apt install gcc-multilib libc6-i386 libc6-dev-i386 wget -y<br><br>wget https://nchc.dl.sourceforge.net/project/ipmitool/ipmitool/1.8.18/ipmitool-1.8.18.tar.bz2<br><br>tar -xjvf ipmitool-1.8.18.tar.bz2<br><br>cd ipmitool-1.8.18/<br><br>./configure CFLAGS=-m64 LDFLAGS=-static<br><br>make<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">指定架构为X86-64（ESXi 8不支持32bit程序），且进行静态库编译，防止系统缺依赖库。</span><br><br><br>ls ./src/ipmitool<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">二进制可执行文件路径</span><br><br></code></pre></td></tr></table></figure><h2 id="直接下载编译好的"><a href="#直接下载编译好的" class="headerlink" title="直接下载编译好的"></a>直接下载编译好的</h2><p>下载链接：<a href="https://songxwn.com/file/ipmitool">https://songxwn.com/file/ipmitool</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">md5sum</span> src/ipmitool<br>5b49339587170d40095b2e6cf5b30007  src/ipmitool<br><br></code></pre></td></tr></table></figure><p>PS：注意校验MD5值</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="在ESXi-上运行"><a href="#在ESXi-上运行" class="headerlink" title="在ESXi 上运行"></a>在ESXi 上运行</h1><p>1、开启ESXi Shell 和SSH服务。（使用完成之后建议关闭）</p><p>2、使用SSH登录到ESXi，可以使用SCP或SFTP上传ipmitool到ESXi的opt文件夹</p><p>3、使用chmod命令给予ipmitool执行权限。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs elixir">scp root<span class="hljs-variable">@192</span>.<span class="hljs-number">168.0</span>.<span class="hljs-number">1</span><span class="hljs-symbol">:/root/ipmitool-</span><span class="hljs-number">1.8</span>.<span class="hljs-number">18</span>/src/ipmitool /opt/<br><br>cd /opt/<br><br>[root<span class="hljs-variable">@localhost</span><span class="hljs-symbol">:/opt</span>] chmod +x ipmitool <br><br></code></pre></td></tr></table></figure><h2 id="允许ESXi-8-执行第三方程序"><a href="#允许ESXi-8-执行第三方程序" class="headerlink" title="允许ESXi 8 执行第三方程序"></a>允许ESXi 8 执行第三方程序</h2><p>ESXi 8 为了安全性考虑，不允许第三方程序运行，需要手动禁止。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 如果不禁止，就会提示：-sh: ./ipmitool: Operation not permitted</span><br><br><br><br>esxcli system settings advanced <span class="hljs-keyword">set</span> -o <span class="hljs-string">/User/execInstalledOnly</span> -i 0<br><br><span class="hljs-comment"># 关闭安全策略，允许未安装的二进制文件运行</span><br><br>esxcli system settings advanced <span class="hljs-keyword">set</span> -o <span class="hljs-string">/User/execInstalledOnly</span> -i <br><br><span class="hljs-comment"># 开启安全策略，不允许未安装的二进制文件运行</span><br><br>[root@localhost:<span class="hljs-string">/opt</span>] <span class="hljs-string">./ipmitool</span> -V<br>ipmitool <span class="hljs-keyword">version</span> 1.8.18 for songxwn.com<br><br><span class="hljs-comment"># 尝试运行，查看版本。</span><br><br></code></pre></td></tr></table></figure><p>PS：这将允许在主机上执行未安装的二进制文件。未知内容可能会导致类似勒索软件的恶意软件攻击。建议使用之后关闭。</p><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><h2 id="常用命令（本地管理）"><a href="#常用命令（本地管理）" class="headerlink" title="常用命令（本地管理）"></a>常用命令（本地管理）</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs routeros">ipmitool sensor list<br><br><span class="hljs-comment"># 查看传感器信息</span><br><br>ipmitool<span class="hljs-built_in"> lan </span><span class="hljs-built_in">print</span><br><br><span class="hljs-comment"># 查看ipmi网络信息</span><br><br>ipmitool<span class="hljs-built_in"> lan </span><span class="hljs-built_in">set</span> 1 ipsrc static<br>ipmitool<span class="hljs-built_in"> lan </span><span class="hljs-built_in">set</span> 1 ipaddr 192.168.142.100<br>ipmitool<span class="hljs-built_in"> lan </span><span class="hljs-built_in">set</span> 1 netmask 255.255.255.0<br>ipmitool<span class="hljs-built_in"> lan </span><span class="hljs-built_in">set</span> 1 defgw ipaddr 192.168.142.1<br><br><span class="hljs-comment"># 配置静态IP，也可以配置使用VLAN。1代表通道，可以用print命令确认。</span><br><br>ipmitool<span class="hljs-built_in"> user </span>list 1<br><br><span class="hljs-comment"># 查看用户列表</span><br><br>ipmitool<span class="hljs-built_in"> user </span><span class="hljs-built_in">set</span> password 1 ABC111@<br><br><span class="hljs-comment"># 将用户ID为1 的用户配置重置密码。</span><br><br>ipmitool mc reset warm<br><br><span class="hljs-comment"># 重启BMC</span><br><br></code></pre></td></tr></table></figure><h1 id="-2"><a href="#-2" class="headerlink" title=""></a></h1><h1 id="-3"><a href="#-3" class="headerlink" title=""></a></h1><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.truesec.com/hub/blog/esxi-8-0-and-execinstalledonly-the-good-the-bad-and-the-ugly">https://www.truesec.com/hub/blog/esxi-8-0-and-execinstalledonly-the-good-the-bad-and-the-ugly</a> </p><p><a href="https://www.geekzu.cn/archives/compile-ipmitool-for-vmware-esxi-server.html">https://www.geekzu.cn/archives/compile-ipmitool-for-vmware-esxi-server.html</a> </p><p><a href="https://www.zhaowenyu.com/linux-doc/ipmi/ipmitool.html">https://www.zhaowenyu.com/linux-doc/ipmi/ipmitool.html</a> </p><p><a href="https://blog.csdn.net/liwei924/article/details/80529881">https://blog.csdn.net/liwei924/article/details/80529881</a> </p><p><a href="https://vswitchzero.com/ipmitool-vib/">https://vswitchzero.com/ipmitool-vib/</a></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/VMware_Vsphere8_key/">VMware Vsphere 8 序列号</a></li><li><a href="https://songxwn.com/Veeam12/">Veeam Backup Replication 12 安装和激活</a></li><li><a href="https://songxwn.com/ESXI_CVE-2021-21974/">ESXi 勒索病毒ESXiArgs 其CVE-2021-21974漏洞分析和恢复</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>esxi</category>
      
    </categories>
    
    
    <tags>
      
      <tag>esxi</tag>
      
      <tag>vmware</tag>
      
      <tag>ipmi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建立自有递归DNS服务器</title>
    <link href="/DNS_recursive_Server/"/>
    <url>/DNS_recursive_Server/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本教程教大家自建一个递归DNS服务器，让所有DNS请求向权威服务器进行查询。</p><p>DNS服务器软件使用unbound</p><p>系统使用Rocky Linux8</p><p>关闭防火墙和SElinux</p><p>注意：本教程只是简单的建立一个可用的DNS递归服务器，可以小规模使用，用于学习解析过程。<br>注意：国内若对公网开放，需要进行备案。</p><span id="more"></span><h2 id="递归DNS服务器与权威DNS服务器"><a href="#递归DNS服务器与权威DNS服务器" class="headerlink" title="递归DNS服务器与权威DNS服务器"></a>递归DNS服务器与权威DNS服务器</h2><p><strong>1.权威DNS：</strong></p><p>权威DNS是经过上一级授权对域名进行解析的服务器，同时它可以把解析授权转授给其他人，如COM顶级服务器可以授权dns.com这个域名的的权威服务器为NS.ABC.COM，同时NS.ABC.COM还可以把授权转授给NS.DDD.COM，这样NS.DDD.COM就成了ABC.COM实际上的权威服务器了。平时我们解析域名的结果都源自权威DNS。比如dns.com的权威DNS服务器就是ns1.dns.com、ns2.dns.com。然后通过ns1.dns.com即可查询域名的具体IP地址或其他记录。</p><p><strong>2.递归DNS:</strong></p><p>负责接受用户对任意域名查询，并返回结果给用户。递归DNS可以缓存结果以避免重复向上查询。我们平时使用最多的就是这类DNS，他对公众开放服务，一般由网络运营商提供，大家都自己可以架递归DNS提供服务。递归DNS一定要有可靠的互联网连接方可使用。比如谷歌的8.8.8.8和8.8.4.4以及114的114.114.114.114和114.114.115.115都属于这一类DNS。你本地电脑上设置的DNS就是这类DNS。</p><p><strong>3.转发DNS:</strong></p><p>负责接受用户查询，并返回结果给用户。但这个结果不是按标准的域名解析过程得到的，而是直接把递归DNS的结果转发给用户。它也具备缓存功能。他主要使用在没有直接的互联网连接，但可以连接到一个递归DNS那里，这时使用转发DNS就比较合适。其缺陷是：直接受递归DNS的影响，服务品质较差。比如我们用的路由器里面的DNS就是这一类，用路由器的朋友可以看下本地电脑的DNS一般都是192.168.1.1。</p><h2 id="查看DNS递归服务器解析过程跟踪"><a href="#查看DNS递归服务器解析过程跟踪" class="headerlink" title="查看DNS递归服务器解析过程跟踪"></a>查看DNS递归服务器解析过程跟踪</h2><figure class="highlight mercury"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs mercury">dig +<span class="hljs-keyword">trace</span> baidu.com<br><br><br>; &lt;&lt;&gt;&gt; DiG <span class="hljs-number">9.11</span>.<span class="hljs-number">36</span>-RedHat-<span class="hljs-number">9.11</span>.<span class="hljs-number">36</span>-<span class="hljs-number">5</span>.el8_7.<span class="hljs-number">2</span> &lt;&lt;&gt;&gt; +<span class="hljs-keyword">trace</span> baidu.com<br>;; global options: +cmd<br>.<span class="hljs-number">9981</span>INNSg.root-servers.net.<br>.<span class="hljs-number">9981</span>INNSj.root-servers.net.<br>.<span class="hljs-number">9981</span>INNSc.root-servers.net.<br>.<span class="hljs-number">9981</span>INNSm.root-servers.net.<br>.<span class="hljs-number">9981</span>INNSi.root-servers.net.<br>.<span class="hljs-number">9981</span>INNSk.root-servers.net.<br>.<span class="hljs-number">9981</span>INNSb.root-servers.net.<br>.<span class="hljs-number">9981</span>INNSf.root-servers.net.<br>.<span class="hljs-number">9981</span>INNSd.root-servers.net.<br>.<span class="hljs-number">9981</span>INNSl.root-servers.net.<br>.<span class="hljs-number">9981</span>INNSe.root-servers.net.<br>.<span class="hljs-number">9981</span>INNSh.root-servers.net.<br>.<span class="hljs-number">9981</span>INNSa.root-servers.net.<br><br># 通过<span class="hljs-number">114</span>获取到root C的IP地址<br><br>;; Received <span class="hljs-number">824</span> bytes from <span class="hljs-number">114.114</span>.<span class="hljs-number">114.114</span>#<span class="hljs-number">53</span>(<span class="hljs-number">114.114</span>.<span class="hljs-number">114.114</span>) in <span class="hljs-number">0</span> ms<br><br>com.<span class="hljs-number">172800</span>INNSa.gtld-servers.net.<br>com.<span class="hljs-number">172800</span>INNSd.gtld-servers.net.<br>com.<span class="hljs-number">172800</span>INNSl.gtld-servers.net.<br>com.<span class="hljs-number">172800</span>INNSc.gtld-servers.net.<br>com.<span class="hljs-number">172800</span>INNSm.gtld-servers.net.<br>com.<span class="hljs-number">172800</span>INNSh.gtld-servers.net.<br>com.<span class="hljs-number">172800</span>INNSe.gtld-servers.net.<br>com.<span class="hljs-number">172800</span>INNSj.gtld-servers.net.<br>com.<span class="hljs-number">172800</span>INNSb.gtld-servers.net.<br>com.<span class="hljs-number">172800</span>INNSi.gtld-servers.net.<br>com.<span class="hljs-number">172800</span>INNSg.gtld-servers.net.<br>com.<span class="hljs-number">172800</span>INNSf.gtld-servers.net.<br>com.<span class="hljs-number">172800</span>INNSk.gtld-servers.net.<br><br># 通过root C服务器，获取到所有.com 权威服务器<br><br>;; Received <span class="hljs-number">1197</span> bytes from <span class="hljs-number">192.33</span>.<span class="hljs-number">4.12</span>#<span class="hljs-number">53</span>(c.root-servers.net) in <span class="hljs-number">197</span> ms<br><br>baidu.com.<span class="hljs-number">172800</span>INNSns2.baidu.com.<br>baidu.com.<span class="hljs-number">172800</span>INNSns3.baidu.com.<br>baidu.com.<span class="hljs-number">172800</span>INNSns4.baidu.com.<br>baidu.com.<span class="hljs-number">172800</span>INNSns1.baidu.com.<br>baidu.com.<span class="hljs-number">172800</span>INNSns7.baidu.com.<br><br># 通过.com 权威服务器，获取到baidu.com的权威服务器。<br><br>;; Received <span class="hljs-number">845</span> bytes from <span class="hljs-number">192.43</span>.<span class="hljs-number">172.30</span>#<span class="hljs-number">53</span>(i.gtld-servers.net) in <span class="hljs-number">237</span> ms<br><br>baidu.com.<span class="hljs-number">600</span>INA<span class="hljs-number">39.156</span>.<span class="hljs-number">66.10</span><br>baidu.com.<span class="hljs-number">600</span>INA<span class="hljs-number">110.242</span>.<span class="hljs-number">68.66</span><br>baidu.com.<span class="hljs-number">86400</span>INNSdns.baidu.com.<br>baidu.com.<span class="hljs-number">86400</span>INNSns7.baidu.com.<br>baidu.com.<span class="hljs-number">86400</span>INNSns4.baidu.com.<br>baidu.com.<span class="hljs-number">86400</span>INNSns2.baidu.com.<br>baidu.com.<span class="hljs-number">86400</span>INNSns3.baidu.com.<br><br># 通过 ns3.baidu.com 权威服务器，获取到 baidu.com的ip解析为<span class="hljs-number">112.80</span>.<span class="hljs-number">248.64</span><br><br>;; Received <span class="hljs-number">356</span> bytes from <span class="hljs-number">112.80</span>.<span class="hljs-number">248.64</span>#<span class="hljs-number">53</span>(ns3.baidu.com) in <span class="hljs-number">26</span> ms<br><br></code></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p> <a href="https://www.menandmice.com/glossary/dns-root-server">DNS 根服务器介绍</a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">dnf <span class="hljs-keyword">install</span> unbound -y<br><br></code></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">vim</span> /etc/unbound/unbound.conf<br><br><span class="hljs-attribute">server</span>:<br>    <span class="hljs-attribute">interface</span>: <span class="hljs-number">0.0.0.0</span><br>    <span class="hljs-attribute">interface</span>: ::<span class="hljs-number">0</span><br>    <br>    <span class="hljs-attribute">access</span>-control: <span class="hljs-number">0.0.0.0</span>/<span class="hljs-number">0</span> <span class="hljs-literal">allow</span><br>    <span class="hljs-attribute">access</span>-control: ::/<span class="hljs-number">0</span> <span class="hljs-literal">allow</span><br>    <br>    <br><span class="hljs-comment"># 在server下，修改如上配置，监听所有IPv4和IPv6地址，和允许所有IPv4地址和IPv6访问使用DNS服务器。    </span><br><br></code></pre></td></tr></table></figure><h2 id="启动和验证"><a href="#启动和验证" class="headerlink" title="启动和验证"></a>启动和验证</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">systemctl enable --now unbound<br><br><span class="hljs-comment"># 启动服务并设置开机启动</span><br><br>systemctl status unbound<br><br><span class="hljs-comment"># 查看服务状态</span><br><br>dnf <span class="hljs-keyword">install </span><span class="hljs-keyword">bind-utils </span>-y<br><br><span class="hljs-keyword">dig </span>@localhost www.qq.com<br><br><span class="hljs-comment"># 安装dig，指定本地dns服务器，查询域名测试可用性。</span><br><br><span class="hljs-keyword">dig </span>+<span class="hljs-keyword">short </span>TXT whoami.ds.akahelp.net  @<span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span><br><br><span class="hljs-comment"># 查询dns服务器访问权威服务器使用的公网IP。</span><br><br></code></pre></td></tr></table></figure><h1 id="抓包验证"><a href="#抓包验证" class="headerlink" title="抓包验证"></a>抓包验证</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">tcpdump -i eth0  port domain -w ./dns.pcap <br><br><span class="hljs-comment"># 可在服务器指定接口抓包dns报文进行分析，使用Wireshark 打开。</span><br><br></code></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/8/html/managing_networking_infrastructure_services/assembly_setting-up-an-unbound-dns-server_networking-infrastructure-services">红帽文档</a></p><p><a href="https://www.dns.com/supports/681.html">https://www.dns.com/supports/681.html</a> </p><p><a href="https://www.cloudflare-cn.com/learning/dns/what-is-dns/">https://www.cloudflare-cn.com/learning/dns/what-is-dns/</a> </p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/zabbix_data/">Zabbix：历史数据与趋势数据</a></li><li><a href="https://songxwn.com/ospf-route-FA/">HCIE Datacom-01.3 IGP高级特性-OSPF-其他特性</a></li><li><a href="https://songxwn.com/Juniper_RE-Protect/">Juniper RE防护-过滤SSH&Telnet登录</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dns</tag>
      
      <tag>network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Zabbix：历史数据与趋势数据</title>
    <link href="/zabbix_data/"/>
    <url>/zabbix_data/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>历史数据（history）和趋势数据（trends）是Zabbix中存储收集到的数据的两种方式。</p><p>历史数据：每一个收集到的监控数据， 趋势数据：按小时统计计算的平均值数据。</p><span id="more"></span><h2 id="历史数据的留存"><a href="#历史数据的留存" class="headerlink" title="历史数据的留存"></a>历史数据的留存</h2><p>通过设置历史数据保留时长，可以指定历史数据留存的时长。在以下位置，你可以找到相关的输入框：</p><ul><li>监控项属性 <a href="https://www.zabbix.com/documentation/6.0/zh/manual/config/items/item">表单</a></li><li>批量更新监控项</li><li><a href="https://www.zabbix.com/documentation/6.0/zh/manual/web_interface/frontend_sections/administration/general#%E7%AE%A1%E5%AE%B6">管家配置页</a></li></ul><p>任何过旧的历史数据会被管家从数据库中删除。</p><p>一般来讲，强烈建议将历史数据保留时长设置得尽可能的小。这么做可以让数据库不会因存储了大量的历史数据，导致超负荷运行。</p><p>可以选择长时间的保留趋势数据，来替代长期需要的历史数据。例如：设置成保留14天历史数据和5年的趋势数据。</p><p>参考<a href="https://www.zabbix.com/documentation/6.0/zh/manual/installation/requirements#database-size">数据库空间大小</a>页，来了解历史数据和趋势数据各自需要的数据库空间。</p><p>当设置了较短的历史数据保留时间，图形会使用趋势数据值显示旧数据，因此依旧可以通过图形查看旧数据。</p><h2 id="趋势数据的留存"><a href="#趋势数据的留存" class="headerlink" title="趋势数据的留存"></a>趋势数据的留存</h2><p>趋势数据是一种内建的历史数据压缩机制，可以用来存储数字类型监控项的每小时的最小值、最大值、平均值和记录数量。</p><p>通过设置趋势存储时间，可以指定趋势数据留存的时长。 在以下位置，你可以找到相关的输入框：</p><ul><li>监控项属性 <a href="https://www.zabbix.com/documentation/6.0/zh/manual/config/items/item">表单</a></li><li>批量更新监控项</li><li><a href="https://www.zabbix.com/documentation/6.0/zh/manual/web_interface/frontend_sections/administration/general#%E7%AE%A1%E5%AE%B6">管家配置页</a></li></ul><p>通常趋势数据设置的的留存时间应当比历史数据留存时间设置的长。任何过旧的趋势数据会被管家从数据库删除。</p><p>Zabbix server在运行时会在趋势缓存中积累趋势数据，因为有数据流入。 在这些情况下，Zabbix Server会将每个监控项的<strong>前一个小时</strong>趋势数据写入数据库(在前端可以看到):</p><ul><li>服务器接收到监控项首个当前一小时的值</li><li>在还差5分钟或更少时间达到一小时，仍然没有该监控项当前一小时的值</li><li>服务器停止</li></ul><p>要查看图表上的趋势，你需要至少等待到下一个小时的开始(如果监控项经常更新)，最多等待到下一个小时的结束(如果监控项很少更新)，最多2个小时。</p><p>当服务器刷新趋势缓存时，如果数据库中已经有这一小时的趋势(例如，服务器在这一小时中已经重新启动)，服务器需要使用更新语句，而不是简单的插入。 因此，在大型环境的安装中，如果需要重新启动，最好在一个小时结束时停止服务器，在下一个小时开始时开始，以避免趋势数据重叠。</p><p>趋势数据生成和历史表没有关系。</p><h2 id="优点和缺点"><a href="#优点和缺点" class="headerlink" title="优点和缺点"></a>优点和缺点</h2><p>历史数据可以保留每一次监控项的具体数值，如有95计费等流量计费方式，确保数值的准确性。但会占用大量存储空间。</p><p>趋势数据会已一小时内的所有历史数据进行平均值计算存储数据，大量减少存储空间，可以较为准确的获取数值。但会失去数值的精确值。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.zabbix.com/documentation/6.0/zh/manual/config/items/history_and_trends">历史数据与趋势数据 (zabbix.com)</a></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/DNS_recursive_Server/">建立自有递归DNS服务器</a></li><li><a href="https://songxwn.com/ospf-route-FA/">HCIE Datacom-01.3 IGP高级特性-OSPF-其他特性</a></li><li><a href="https://songxwn.com/Juniper_RE-Protect/">Juniper RE防护-过滤SSH&Telnet登录</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>Zabbix</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>Zabbix</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MariaDB Galera Cluster 10.6 集群部署</title>
    <link href="/MariaDB_Galera_Cluster/"/>
    <url>/MariaDB_Galera_Cluster/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><img src="https://s3.bmp.ovh/imgs/2023/04/02/1342a2c99e7d1161.png" srcset="/img/loading.gif" lazyload></p><p>MariaDB Galera Cluster 是 MariaDB 的<a href="https://mariadb.com/kb/en/about-galera-replication/">虚拟同步</a>多主集群。它仅在Linux上可用，并且仅支持<a href="https://mariadb.com/kb/en/innodb/">InnoDB</a>存储引擎（尽管有 对<a href="https://mariadb.com/kb/en/myisam/">MyISAM</a>和<a href="https://mariadb.com/kb/en/what-is-mariadb-106/">MariaDB 10.6</a>的<a href="https://mariadb.com/kb/en/aria/">Aria</a>的实验性支持。请参阅<a href="https://mariadb.com/kb/en/galera-cluster-system-variables/#wsrep_replicate_myisam">wsrep_replicate_myisam</a>系统变量，或者从 <a href="https://mariadb.com/kb/en/what-is-mariadb-106/">MariaDB 10.6</a> 开始，<a href="https://mariadb.com/kb/en/galera-cluster-system-variables/#wsrep_mode">wsrep_mode</a>系统变量）。</p><p>个人为了替代主从复制而使用。</p><span id="more"></span><h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><ul><li><a href="https://mariadb.com/kb/en/about-galera-replication/">几乎同步复制</a></li><li>主动-主动多主拓扑</li><li>读取和写入任何群集节点</li><li>自动成员资格控制，故障节点从群集中删除</li><li>自动节点连接</li><li>行级别的真正并行复制</li><li>直接客户端连接，本机MariaDB的外观和感觉</li></ul><h2 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h2><p>上述功能为 DBMS 群集解决方案带来了几个好处，包括：</p><ul><li>无副本滞后</li><li>没有丢失交易</li><li>读取可伸缩性</li><li>较小的客户端延迟</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>加入新节点时开销大,需要复制完整数据</li><li>不能有效地解决写扩展的问题,所有的写操作都发生在所有的节点</li><li>有多少个节点,就有多少份重复的数据</li><li>由于事务提交需要跨节点通信,即涉及分布式事务操作,因此写入会比主从复制慢很多,节点越多,写入越慢,死锁和回滚也会更加频繁;</li><li>对网络要求比较高,如果网络出现波动不稳定,则可能会造成两个节点失联,Galera Cluster集群会发生脑裂,服务将不可用</li><li>仅支持InnoDB&#x2F;XtraDB存储引擎,任何写入其他引擎的表,包括mysql.*表都不会被复制,DDL语句可以复制,但是insert into mysql.user(MyISAM存储引擎)之类的插入数据不会被复制</li><li>Delete操作不支持没有主键的表,因为没有主键的表在不同的节点上的顺序不同,如果执行select … limit …将出现不同的结果集</li><li>整个集群的写入吞吐量取决于最弱的节点限制,集群要使用同一的配置</li></ul><h1 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h1><p>Mariadb 版本 10.6 （<a href="https://mariadb.org/about/#maintenance-policy">LTS版本</a>、与MySQL 8 兼容性相对较好）</p><p>Galera 版本 4 （对应10.6）</p><p>Rocky Linux 8（关闭 SELINUX）</p><p>关闭防火墙</p><h1 id="安装规划"><a href="#安装规划" class="headerlink" title="安装规划"></a>安装规划</h1><table><thead><tr><th align="left">服务器名字</th><th align="left">IP规划</th></tr></thead><tbody><tr><td align="left">mariadb1</td><td align="left">100.64.128.201</td></tr><tr><td align="left">mariadb2</td><td align="left">100.64.128.202</td></tr><tr><td align="left">mariadb3</td><td align="left">100.64.128.203</td></tr></tbody></table><h1 id="安装-每台服务器都要配置安装"><a href="#安装-每台服务器都要配置安装" class="headerlink" title="安装(每台服务器都要配置安装)"></a>安装(每台服务器都要配置安装)</h1><h2 id="关闭SElinux-关闭防火墙"><a href="#关闭SElinux-关闭防火墙" class="headerlink" title="关闭SElinux 关闭防火墙"></a>关闭SElinux 关闭防火墙</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">systemctl <span class="hljs-built_in">disable</span> --now firewalld<br>sed -i <span class="hljs-string">&#x27;s/^SELINUX=enforcing$/SELINUX=disabled/&#x27;</span> /etc/selinux<span class="hljs-built_in">/config </span>&amp;&amp; setenforce 0<br><br></code></pre></td></tr></table></figure><h2 id="添加yum源"><a href="#添加yum源" class="headerlink" title="添加yum源"></a>添加yum源</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cat</span> &gt; /etc/yum.repos.d/mariadb.repo &lt;&lt;EOF<span class="hljs-meta"></span><br><span class="hljs-meta">[mariadb]</span><br><span class="hljs-attribute">name</span> = MariaDB<br><span class="hljs-attribute">baseurl</span> = https://mirrors.cloud.tencent.com/mariadb/yum/<span class="hljs-number">10</span>.<span class="hljs-number">6</span>/centos8-amd64<br><span class="hljs-attribute">module_hotfixes</span>=<span class="hljs-number">1</span><br><span class="hljs-attribute">gpgkey</span>=https://mirrors.cloud.tencent.com/mariadb/yum/RPM-GPG-KEY-MariaDB<br><span class="hljs-attribute">gpgcheck</span>=<span class="hljs-number">1</span><br><span class="hljs-attribute">EOF</span><br><br><span class="hljs-comment">## 注意，使用了腾讯云镜像源，mariadb 10.6</span><br><br></code></pre></td></tr></table></figure><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs axapta">yum install -y MariaDB-<span class="hljs-keyword">server</span> MariaDB-<span class="hljs-keyword">client</span> MariaDB-backup rsync galera<span class="hljs-number">-4</span><br><br><br><span class="hljs-meta">## 安装数据库和galera</span><br><br></code></pre></td></tr></table></figure><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>在RHEL，CentOS和SLES上，MariaDB的软件包捆绑了以下配置文件：</p><ul><li><code>/etc/my.cnf</code></li><li><code>/etc/my.cnf.d/client.cnf</code></li><li><code>/etc/my.cnf.d/mysql-clients.cnf</code></li><li><code>/etc/my.cnf.d/server.cnf</code></li></ul><p>在 RHEL、CentOS 和 SLES 上，默认情况下会读取以下目录中的自定义配置文件：</p><ul><li><code>/etc/my.cnf.d/</code></li></ul><h2 id="性能优化和编码配置（可忽略）"><a href="#性能优化和编码配置（可忽略）" class="headerlink" title="性能优化和编码配置（可忽略）"></a>性能优化和编码配置（可忽略）</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs abnf">vim /etc/my.cnf.d/server.cnf<br><br>[mysqld]<br>max_connections <span class="hljs-operator">=</span> <span class="hljs-number">4096</span><br>max_allowed_packet <span class="hljs-operator">=</span> <span class="hljs-number">128</span>M<br><br><span class="hljs-attribute">character-set-server</span> <span class="hljs-operator">=</span> utf8mb4<br><span class="hljs-attribute">collation-server</span> <span class="hljs-operator">=</span> utf8mb4_general_ci<br><br>innodb_buffer_pool_size <span class="hljs-operator">=</span> <span class="hljs-number">4</span>G<br>innodb_io_capacity <span class="hljs-operator">=</span> <span class="hljs-number">300</span><br><br>thread_cache_size<span class="hljs-operator">=</span><span class="hljs-number">64</span><br>thread_concurrency<span class="hljs-operator">=</span><span class="hljs-number">24</span><br><br>log_error                <span class="hljs-operator">=</span> mariadbd.err<br><br></code></pre></td></tr></table></figure><ul><li>性能优化配置，每台服务器可一样</li><li>需要根据自己的硬件配置进行调整，上述配置要求内存大于4G.</li><li>innodb_buffer_pool_instances在10.6中已删除</li><li>innodb_io_capacity默认为200</li></ul><h2 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[galera]</span><br><span class="hljs-comment"># Cluster Configuration</span><br><span class="hljs-attr">wsrep_on</span>=<span class="hljs-literal">ON</span><br><span class="hljs-attr">wsrep_provider</span>=/usr/lib64/galera-<span class="hljs-number">4</span>/libgalera_smm.so<br><span class="hljs-attr">wsrep_cluster_name</span>=JOJO1<br><span class="hljs-attr">wsrep_cluster_address</span>=<span class="hljs-string">&quot;gcomm://100.64.128.201,100.64.128.202,100.64.128.203&quot;</span><br><span class="hljs-attr">wsrep_node_name</span>=<span class="hljs-number">100.64</span>.<span class="hljs-number">128.201</span><br><span class="hljs-attr">wsrep_node_address</span>=<span class="hljs-number">100.64</span>.<span class="hljs-number">128.201</span><br><span class="hljs-comment">#wsrep_provider_options=&quot;gcache.size=300M; gcache.page_size=300M&quot;</span><br><span class="hljs-attr">binlog_format</span>=ROW<br><span class="hljs-attr">innodb_autoinc_lock_mode</span>=<span class="hljs-number">2</span><br><br></code></pre></td></tr></table></figure><ul><li>wsrep_cluster_address需要修改包含所有节点的IP地址。</li><li>wsrep_node_name 都修改为当前服务器节点IP地址即可。</li></ul><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><table><thead><tr><th align="left">系统变量&#x2F;选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">wsrep_provider</td><td align="left">设置 wsrep 提供程序的路径。这是文件的路径。。每个版本可能不太一样。</td></tr><tr><td align="left">wsrep_cluster_address</td><td align="left">启动时要连接到的群集节点的地址。为每个群集节点的 IP 地址或域名的逗号分隔列表。最佳做法是在此列表中包括所有群集节点。格式：   gcomm:&#x2F;&#x2F;</td></tr><tr><td align="left">wsrep_node_name</td><td align="left">设置当前节点名称</td></tr><tr><td align="left">wsrep_node_address</td><td align="left">设置当前节点的IP地址</td></tr><tr><td align="left">wsrep_cluster_name</td><td align="left">设置群集的逻辑名称。所有群集节点上必须相同。</td></tr><tr><td align="left">binlog_format</td><td align="left">设置为ROW ，MariaDB Galera Cluster 不支持其他二进制日志格式。</td></tr><tr><td align="left">innodb_autoinc_lock_mode</td><td align="left">设置为 2，MariaDB Galera 集群不支持其他自动增量锁定模式。</td></tr><tr><td align="left">wsrep_on</td><td align="left">设置为ON  以启用 MariaDB Galera 集群。</td></tr><tr><td align="left">wsrep_provider_options</td><td align="left">选项变量，gcache.size &#x3D; 6G可以指定群集缓存，提高性能。</td></tr></tbody></table><h1 id="启动和验证"><a href="#启动和验证" class="headerlink" title="启动和验证"></a>启动和验证</h1><h2 id="引导新集群"><a href="#引导新集群" class="headerlink" title="引导新集群"></a>引导新集群</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># mariadb1  （第一个启动的需要运行galera_new_cluster 进行引导，如果所以节点同时停止，也需要此命令。）</span><br><br>galera_new_cluster<br>systemctl <span class="hljs-built_in">enable</span> mariadb<br><br><span class="hljs-comment"># mariadb2</span><br><br>systemctl <span class="hljs-built_in">enable</span> --now mariadb<br><br><span class="hljs-comment"># mariadb3</span><br><br>systemctl <span class="hljs-built_in">enable</span> --now mariadb<br><br></code></pre></td></tr></table></figure><h2 id="验证集群启动情况"><a href="#验证集群启动情况" class="headerlink" title="验证集群启动情况"></a>验证集群启动情况</h2><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">mysql -uroot -p -e &quot;SHOW STATUS LIKE <span class="hljs-emphasis">&#x27;wsrep_cluster_size&#x27;</span>&quot;<br><br><br>[root@mariadb1 ~]# mysql -uroot -p -e &quot;SHOW STATUS LIKE <span class="hljs-emphasis">&#x27;wsrep_cluster_size&#x27;</span>&quot;<br><span class="hljs-section">Enter password: </span><br><span class="hljs-section">+--------------------+-------+</span><br><span class="hljs-section">| Variable_name      | Value |</span><br><span class="hljs-section">+--------------------+-------+</span><br><span class="hljs-section">| wsrep_cluster_size | 3     |</span><br><span class="hljs-section">+--------------------+-------+</span><br><br></code></pre></td></tr></table></figure><p>在任意节点运行，查看在线节点数量为3即可。</p><h2 id="验证集群数据同步"><a href="#验证集群数据同步" class="headerlink" title="验证集群数据同步"></a>验证集群数据同步</h2><p>在mariadb1 创建数据库</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">mysql -e &quot;<span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> galera_test character <span class="hljs-keyword">set</span> utf8 <span class="hljs-keyword">collate</span> utf8_general_ci;&quot;<br><br></code></pre></td></tr></table></figure><p>在mariadb2和3查看是否同步。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">mysql</span> -e <span class="hljs-string">&quot;show databases;&quot;</span><br><br></code></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean">mariadb-secure-installation<br><br>## 初始化root密码，远程访问配置，删除测试数据库等。<br><br></code></pre></td></tr></table></figure><h1 id="重启集群"><a href="#重启集群" class="headerlink" title="重启集群"></a>重启集群</h1><p>MariaDB galera cluster 所有节点服务全部停止后再次启动会报错，需要按照以下方法启动集群。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">[root@mariadb1 ~]<span class="hljs-meta"># vim /var/lib/mysql/grastate.dat</span><br><span class="hljs-meta"># GALERA saved state</span><br><span class="hljs-symbol">version:</span> <span class="hljs-number">2.1</span><br><span class="hljs-symbol">uuid:</span>    f4f3025f<span class="hljs-number">-6119</span><span class="hljs-number">-113</span>d<span class="hljs-number">-83e8</span>-ca4b232b71ed<br><span class="hljs-symbol">seqno:</span>   <span class="hljs-number">-1</span><br><span class="hljs-symbol">safe_to_bootstrap:</span> <span class="hljs-number">0</span><br><br></code></pre></td></tr></table></figure><p>修改safe_to_bootstrap参数改为1，然后在该节点执行以下命令启动第一个节点，执行以下命令后参数会被重新置为0：</p><p>也可以直接删除此文件即可。</p><p>mariadb1 （第一个启动的节点）</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">galer<span class="hljs-built_in">a_new</span>_cluster<br><br></code></pre></td></tr></table></figure><p>mariadb2和3 （其他节点）</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> mariadb<br><br></code></pre></td></tr></table></figure><h1 id="集群状态查看（健康检查）"><a href="#集群状态查看（健康检查）" class="headerlink" title="集群状态查看（健康检查）"></a>集群状态查看（健康检查）</h1><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">[root<span class="hljs-meta">@localhost</span> ~]<span class="hljs-comment"># mysql </span><br>Welcome to the MariaDB monitor.  Commands end with ; or \g.<br>Your MariaDB connection id is 13<br>Server version: 10.6.12-MariaDB MariaDB Server<br><br>Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.<br><br>Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.<br><br>MariaDB [(none)]&gt; SHOW GLOBAL STATUS LIKE &#x27;wsrep_%&#x27;;<br>+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------+<br>|<span class="hljs-string"> Variable_name                 </span>|<span class="hljs-string"> Value                                                                                                                                          </span>|<br>+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------+<br>|<span class="hljs-string"> wsrep_local_state_uuid        </span>|<span class="hljs-string"> eb507a9d-cf73-11ed-aa89-df688f9a9d63                                                                                                           </span>|<br>|<span class="hljs-string"> wsrep_protocol_version        </span>|<span class="hljs-string"> 10                                                                                                                                             </span>|<br>|<span class="hljs-string"> wsrep_last_committed          </span>|<span class="hljs-string"> 3                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_replicated              </span>|<span class="hljs-string"> 1                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_replicated_bytes        </span>|<span class="hljs-string"> 512                                                                                                                                            </span>|<br>|<span class="hljs-string"> wsrep_repl_keys               </span>|<span class="hljs-string"> 1                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_repl_keys_bytes         </span>|<span class="hljs-string"> 32                                                                                                                                             </span>|<br>|<span class="hljs-string"> wsrep_repl_data_bytes         </span>|<span class="hljs-string"> 409                                                                                                                                            </span>|<br>|<span class="hljs-string"> wsrep_repl_other_bytes        </span>|<span class="hljs-string"> 0                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_received                </span>|<span class="hljs-string"> 6                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_received_bytes          </span>|<span class="hljs-string"> 510                                                                                                                                            </span>|<br>|<span class="hljs-string"> wsrep_local_commits           </span>|<span class="hljs-string"> 0                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_local_cert_failures     </span>|<span class="hljs-string"> 0                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_local_replays           </span>|<span class="hljs-string"> 0                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_local_send_queue        </span>|<span class="hljs-string"> 0                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_local_send_queue_max    </span>|<span class="hljs-string"> 1                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_local_send_queue_min    </span>|<span class="hljs-string"> 0                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_local_send_queue_avg    </span>|<span class="hljs-string"> 0                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_local_recv_queue        </span>|<span class="hljs-string"> 0                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_local_recv_queue_max    </span>|<span class="hljs-string"> 2                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_local_recv_queue_min    </span>|<span class="hljs-string"> 0                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_local_recv_queue_avg    </span>|<span class="hljs-string"> 0.166667                                                                                                                                       </span>|<br>|<span class="hljs-string"> wsrep_local_cached_downto     </span>|<span class="hljs-string"> 1                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_flow_control_paused_ns  </span>|<span class="hljs-string"> 0                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_flow_control_paused     </span>|<span class="hljs-string"> 0                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_flow_control_sent       </span>|<span class="hljs-string"> 0                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_flow_control_recv       </span>|<span class="hljs-string"> 0                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_flow_control_active     </span>|<span class="hljs-string"> false                                                                                                                                          </span>|<br>|<span class="hljs-string"> wsrep_flow_control_requested  </span>|<span class="hljs-string"> false                                                                                                                                          </span>|<br>|<span class="hljs-string"> wsrep_cert_deps_distance      </span>|<span class="hljs-string"> 1                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_apply_oooe              </span>|<span class="hljs-string"> 0                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_apply_oool              </span>|<span class="hljs-string"> 0                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_apply_window            </span>|<span class="hljs-string"> 1                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_apply_waits             </span>|<span class="hljs-string"> 0                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_commit_oooe             </span>|<span class="hljs-string"> 0                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_commit_oool             </span>|<span class="hljs-string"> 0                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_commit_window           </span>|<span class="hljs-string"> 1                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_local_state             </span>|<span class="hljs-string"> 4                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_local_state_comment     </span>|<span class="hljs-string"> Synced                                                                                                                                         </span>|<br>|<span class="hljs-string"> wsrep_cert_index_size         </span>|<span class="hljs-string"> 1                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_causal_reads            </span>|<span class="hljs-string"> 0                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_cert_interval           </span>|<span class="hljs-string"> 0                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_open_transactions       </span>|<span class="hljs-string"> 0                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_open_connections        </span>|<span class="hljs-string"> 0                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_incoming_addresses      </span>|<span class="hljs-string"> 100.64.128.201:0,100.64.128.203:0                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_cluster_weight          </span>|<span class="hljs-string"> 2                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_desync_count            </span>|<span class="hljs-string"> 0                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_evs_delayed             </span>|<span class="hljs-string">                                                                                                                                                </span>|<br>|<span class="hljs-string"> wsrep_evs_evict_list          </span>|<span class="hljs-string">                                                                                                                                                </span>|<br>|<span class="hljs-string"> wsrep_evs_repl_latency        </span>|<span class="hljs-string"> 0/0/0/0/0                                                                                                                                      </span>|<br>|<span class="hljs-string"> wsrep_evs_state               </span>|<span class="hljs-string"> OPERATIONAL                                                                                                                                    </span>|<br>|<span class="hljs-string"> wsrep_gcomm_uuid              </span>|<span class="hljs-string"> 55a87cd0-cf72-11ed-b741-f670ec8e21cc                                                                                                           </span>|<br>|<span class="hljs-string"> wsrep_gmcast_segment          </span>|<span class="hljs-string"> 0                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_applier_thread_count    </span>|<span class="hljs-string"> 1                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_cluster_capabilities    </span>|<span class="hljs-string">                                                                                                                                                </span>|<br>|<span class="hljs-string"> wsrep_cluster_conf_id         </span>|<span class="hljs-string"> 2                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_cluster_size            </span>|<span class="hljs-string"> 2                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_cluster_state_uuid      </span>|<span class="hljs-string"> eb507a9d-cf73-11ed-aa89-df688f9a9d63                                                                                                           </span>|<br>|<span class="hljs-string"> wsrep_cluster_status          </span>|<span class="hljs-string"> Primary                                                                                                                                        </span>|<br>|<span class="hljs-string"> wsrep_connected               </span>|<span class="hljs-string"> ON                                                                                                                                             </span>|<br>|<span class="hljs-string"> wsrep_local_bf_aborts         </span>|<span class="hljs-string"> 0                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_local_index             </span>|<span class="hljs-string"> 0                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_provider_capabilities   </span>|<span class="hljs-string"> :MULTI_MASTER:CERTIFICATION:PARALLEL_APPLYING:TRX_REPLAY:ISOLATION:PAUSE:CAUSAL_READS:INCREMENTAL_WRITESET:UNORDERED:PREORDERED:STREAMING:NBO: </span>|<br>|<span class="hljs-string"> wsrep_provider_name           </span>|<span class="hljs-string"> Galera                                                                                                                                         </span>|<br>|<span class="hljs-string"> wsrep_provider_vendor         </span>|<span class="hljs-string"> Codership Oy &lt;info@codership.com&gt;                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_provider_version        </span>|<span class="hljs-string"> 26.4.14(r06a0c285)                                                                                                                             </span>|<br>|<span class="hljs-string"> wsrep_ready                   </span>|<span class="hljs-string"> ON                                                                                                                                             </span>|<br>|<span class="hljs-string"> wsrep_rollbacker_thread_count </span>|<span class="hljs-string"> 1                                                                                                                                              </span>|<br>|<span class="hljs-string"> wsrep_thread_count            </span>|<span class="hljs-string"> 2                                                                                                                                              </span>|<br>+-------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------+<br><br><br></code></pre></td></tr></table></figure><ul><li>wsrep_local_index &#x3D; 2 在集群中的索引值</li><li>wsrep_ready为ON，表示集群正常运行。</li><li>wsrep_cluster_status为Primary，表示节点为主节点，正常读写。</li><li>wsrep_connected: 如果该值为Off,且wsrep_ready的值也为Off,则说明该节点没有连接到集群</li><li>wsrep_cluster_size为3，表示集群有三个节点。</li><li>wsrep_cluster_state_uuid:在集群所有节点的值应该是相同的,有不同值的节点,说明其没有连接入集群。</li><li>wsrep_cluster_conf_id:正常情况下所有节点上该值是一样的.如果值不同,说明该节点被临时”分区”了.当节点之间网络连接恢复的时候应该会恢复一样的值。</li><li>wsrep_flow_control_paused:表示复制停止了多长时间.即表明集群因为Slave延迟而慢的程度.值为0~1,越靠近0越好,值为1表示复制完全停止.可优化wsrep_slave_threads的值来改善.</li><li>wsrep_flow_control_sent:表示该节点已经停止复制了多少次.</li><li>wsrep_incoming_addresses：代表所有节点的IP地址</li></ul><h1 id="关于故障转移"><a href="#关于故障转移" class="headerlink" title="关于故障转移"></a>关于故障转移</h1><p>考虑使用keepalived作为故障转移，可以主动检测节点健康。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/qq_35506960/article/details/120844297">https://blog.csdn.net/qq_35506960/article/details/120844297</a> </p><p><a href="https://mariadb.com/docs/server/deploy/community-cluster-cs10-6/">https://mariadb.com/docs/server/deploy/community-cluster-cs10-6/</a> </p><p><a href="https://dev.mysql.com/doc/refman/8.0/ja/innodb-configuring-io-capacity.html">https://dev.mysql.com/doc/refman/8.0/ja/innodb-configuring-io-capacity.html</a> </p><p><a href="https://mariadb.com/kb/en/what-is-mariadb-galera-cluster/">https://mariadb.com/kb/en/what-is-mariadb-galera-cluster/</a> </p><p><a href="https://mariadb.com/kb/en/getting-started-with-mariadb-galera-cluster/">https://mariadb.com/kb/en/getting-started-with-mariadb-galera-cluster/</a> </p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/ELK-logstash-hostname/">ELK Logstash解析系统日志错误</a></li><li><a href="https://songxwn.com/ELK-AD-LDAP-Authentication/">Elasticsearch 接入微软Active Directory认证</a></li><li><a href="https://songxwn.com/podman/">Podman 容器管理工具</a></li><li><a href="https://chengzhaoxi.xyz/361d7ede.html">互联网算法工程开发常用技术</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>mariadb</tag>
      
      <tag>cluster</tag>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HCIE Datacom-01.3 IGP高级特性-OSPF-其他特性</title>
    <link href="/ospf-route-FA/"/>
    <url>/ospf-route-FA/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本文章包括多进程、BGP联动问题（延迟收敛）、FA地址。</p><p>本教程参考华为认证系列PPT。</p><span id="more"></span><h1 id="OSPF-多进程"><a href="#OSPF-多进程" class="headerlink" title="OSPF 多进程"></a>OSPF 多进程</h1><ul><li>OSPF支持多进程，在同一台路由器上可以运行多个不同的OSPF进程，它们之间互不影响，彼此独立。不同OSPF进程之间的路由交互相当于不同路由协议之间的路由交互。</li><li>路由器的一个接口只能属于某一个OSPF进程。</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/03/27/f5049d99b6316e39.png" srcset="/img/loading.gif" lazyload></p><ul><li>应用场景：</li><li>OSPF多进程的一个典型应用就是在VPN场景。</li><li>如图，同一台PE设备连接了两个不同的VPN客户，并且PE和CE之间均部署OSPF，因此可以通过在PE设备上部署多进程实现VPN客户之间的隔离。</li></ul><p>PS：</p><ul><li>VPN：Virtual Private Network，虚拟专用网络。这里单指MPLS VPN</li><li>创建OSPF进程时，如果指定了VPN实例，那么OSPF进程属于此实例，否则属于全局实例 (路由表)。</li><li>OSPF的进程号仅有本地意义。OSPFv3可以配置实例ID，通过报文区分。</li></ul><h1 id="OSPF与BGP联动（等待收敛）"><a href="#OSPF与BGP联动（等待收敛）" class="headerlink" title="OSPF与BGP联动（等待收敛）"></a>OSPF与BGP联动（等待收敛）</h1><h2 id="现象说明"><a href="#现象说明" class="headerlink" title="现象说明"></a>现象说明</h2><ul><li>当有新的设备加入到网络中，或者设备重启时，可能会出现在BGP收敛期间内网络流量丢失的现象。这是IGP收敛速度比BGP快造成的。</li><li>当OSPF收敛完成的时候，BGP并没有收敛完成，造成路由黑洞，而OSPF收敛完成后会把流量引用过来，导致丢包。</li></ul><p>R1、R2、R3和R4运行OSPF，并建立IBGP全互联。其中R3是R2的备份设备。</p><p>当网络环境稳定时，R1访问10.1.5.5&#x2F;32的流量路径为：R1-R2-R4-R5。</p><p><img src="https://i.328888.xyz/2023/03/27/iUpELX.png" srcset="/img/loading.gif" lazyload></p><ol><li>当R2故障时，流量路径切换到：R1-R3-R4-R5。</li><li>当R2故障恢复后，由于IGP收敛速度比BGP快，因此OSPF先收敛。此时R1若要访问10.1.5.5&#x2F;32，先查BGP路由，下一跳为R5；再查IGP路由，会根据IGP路由传递给R2。</li><li>R2收到该流量后，会查BGP路由。由于BGP还未完成收敛，发现没有到达10.1.5.5&#x2F;32的路由，则不会转发数据，造成流量丢失。</li></ol><h2 id="解决BGP收敛慢导致路由黑洞的解决配置"><a href="#解决BGP收敛慢导致路由黑洞的解决配置" class="headerlink" title="解决BGP收敛慢导致路由黑洞的解决配置"></a>解决BGP收敛慢导致路由黑洞的解决配置</h2><ul><li>通过使能OSPF与BGP联动特性，可以解决流量丢失问题。</li><li>使能了OSPF与BGP联动特性的设备会在设定的联动时间内保持为Stub路由器，也就是说，该设备发布的LSA中的链路度量值为最大值（65535），从而告知其它OSPF设备不要使用这个路由器来转发数据。</li></ul><p>在R2上使能BGP联动，这样，在BGP收敛完成前，R1不把流量转发到R2上，而是继续使用备份设备R3转发流量，直到R2上的BGP路由完成收敛。</p><p><img src="https://s3.bmp.ovh/imgs/2023/03/27/11d0bb3427b2e308.png" srcset="/img/loading.gif" lazyload></p><p><strong>配置Stub路由器：</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">Huawei-ospf-1</span>] stub-router [<span class="hljs-keyword">on</span>-startup [interval] ]<br>[<span class="hljs-meta">Huawei-ospf-1</span>] stub-router <span class="hljs-keyword">on</span>-startup <span class="hljs-number">100</span><br><br>配置Stub路由器是一种特殊的路由选路，配置了Stub路由器的路径不被优选。<br>实现方法是将度量值设为最大（<span class="hljs-number">65535</span>），尽量避免数据从此路由器转发。用于保护此路由器链路，通常使用在升级等维护操作的场景。<br><br></code></pre></td></tr></table></figure><p>命令：[Huawei-ospf-1] stub-router [ on-startup [ interval ] ]</p><p>on-startup [ interval ]：设备在发生重启或故障时保持为Stub路由器的时间间隔。整数形式，取值范围是5～65535，单位是秒，缺省值是500秒。</p><p>如果未配置on-startup参数，则表示该设备始终保持为Stub路由器，即所有来自这个设备的路由条目Cost值均设为65535。</p><p>如果配置了on-startup参数，则表示该设备仅在重启或者故障时保持为Stub路由器，保持时间由interval参数决定。此时若未配置interval参数，则使用interval的缺省值500秒。</p><h1 id="OSPF转发地址-FA"><a href="#OSPF转发地址-FA" class="headerlink" title="OSPF转发地址-FA"></a>OSPF转发地址-FA</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>FA（Forwarding Address，转发地址）：</li></ul><blockquote><p>到达所通告的目的地的数据包应该被转发到的地址，如果转发地址为0.0.0.0，那么数据包将被转发到始发ASBR上。</p><p>Type5 AS-External-LSA 和 Type7 NSSA LSA：</p></blockquote><p><img src="https://s3.bmp.ovh/imgs/2023/03/27/1cfc6f10f98ee721.png" srcset="/img/loading.gif" lazyload></p><p><strong>注意OSPF的Type5 LSA和Type7 LSA中包含一个特别的字段FA，FA的引入使得OSPF在某些特殊的场景下可以避免次优路径问题。</strong></p><h2 id="没有FA引发的问题"><a href="#没有FA引发的问题" class="headerlink" title="没有FA引发的问题"></a>没有FA引发的问题</h2><p><img src="https://s3.bmp.ovh/imgs/2023/03/27/6e7710e7d9bac54c.png" srcset="/img/loading.gif" lazyload></p><ul><li>R2、R3和R4运行OSPF，均部署在Area0中。其中R2和R3的GE0&#x2F;0&#x2F;1接口都激活OSPF并建立邻接关系，但是两者与外部路由器R1并不建立OSPF邻接关系。</li></ul><ol><li>R2配置到达10.1.1.1&#x2F;32的静态路由，下一跳为10.1.123.1。</li><li>R2将静态路由引入OSPF，产生Type5 LSA在区域内泛洪。</li><li>R3接收到R2产生的5类LSA，计算出到达10.1.1.1&#x2F;32的外部路由，并且将路由的下一跳指定为R2（10.1.123.2）。</li></ol><ul><li>OSPF域内的路由器如R4到达10.1.1.1&#x2F;32的路径是：R4-R3-R2-R1，该路径是次优路径的。</li></ul><h2 id="利用FA解决次优路径问题"><a href="#利用FA解决次优路径问题" class="headerlink" title="利用FA解决次优路径问题"></a>利用FA解决次优路径问题</h2><p><img src="https://s3.bmp.ovh/imgs/2023/03/27/02b47167a8e0727b.png" srcset="/img/loading.gif" lazyload></p><ul><li>R2向OSPF域内通告到达10.1.1.1&#x2F;32的外部路由时，为对应的Type5 LSA设置FA，值为其自己到达该外部路由的下一跳：10.1.123.1。</li><li>当R3收到该LSA后，计算到达10.1.1.1&#x2F;32的路由时，发现FA为非0，因此它认为到达目标地址10.1.1.1&#x2F;32的下一跳为FA所指定的地址，即：10.1.123.1。</li><li>有FA地址后路径：R4-R3-R1</li></ul><h2 id="FA的取值"><a href="#FA的取值" class="headerlink" title="FA的取值"></a>FA的取值</h2><ul><li>当ASBR引入外部路由时，若Type5 LSA中的FA字段为0，表示路由器认为到达目的网段的数据包应该发往该ASBR；若Type5 LSA中的FA字段不为0，表示路由器认为到达目的网段的数据包应该发往这个FA所标识的设备。</li><li>当以下条件全部满足时，FA字段才可以被设置为非0：</li></ul><blockquote><p>ASBR在其连接外部网络的接口（外部路由的出接口）上激活了OSPF；</p><p>该接口没有被配置为Silent-Interface；</p><p>该接口的OSPF网络类型为Broadcast或NBMA；</p><p>该接口的IP地址在OSPF配置的network命令指定的网段范围内；</p><p>到达FA地址的路由必须是OSPF区域内部路由或区域间路由，这样接收到该外部LSA的路由器才能够加载该LSA进入路由表。加载的外部LSA生成的路由条目下一跳与到达FA地址的下一跳相同。</p></blockquote><ul><li><strong>NSSA区域Type7 LSA转化为Type5 LSA：</strong></li></ul><blockquote><p>为了将NSSA区域引入的外部路由发布到其它区域，需要把Type7 LSA转化为Type5 LSA以便在整个OSPF网络中通告。缺省情况下，转换路由器是NSSA区域中Router ID最大的区域边界路由器（ABR）。</p><p>LSA头部Options字段中的P-bit（Propagate bit）用于告知转化路由器该条Type7 LSA是否需要转化为Type5 LSA。只有P-bit置位并且FA不为0的Type7 LSA才能转化为Type5 LSA。</p><p>区域边界路由器产生的Type7 LSA缺省路由不会置位P-bit。</p></blockquote><p><strong>注意：所有的OSPF LSA有相同的LSA头部，P-bit在LSA头部中的Options字段。</strong></p><h2 id="案例：NSSA场景下FA的典型应用"><a href="#案例：NSSA场景下FA的典型应用" class="headerlink" title="案例：NSSA场景下FA的典型应用"></a>案例：NSSA场景下FA的典型应用</h2><ul><li>当NSSA区域中有多个ABR时，系统会根据规则自动选择一个ABR作为转换器，将Type7 LSA转换为Type5 LSA，其他ABR不做LSA转换。</li><li>如图所示，如果不考虑FA，由于R3的Router ID比R2大，因此它将执行7转5的动作，如此一来，R1将认为必须经由ABR（R3）到达目的网络。这样，流量便会被引导到低带宽链路，即R1-R3-R4-R5。</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/03/27/769a5e388cca1a05.png" srcset="/img/loading.gif" lazyload></p><ul><li><strong>如图所示：</strong></li></ul><blockquote><p>R5引入直连外部路由，且将FA设为自己访问目的网段10.1.5.0&#x2F;24的地址：10.1.45.5。</p><p>R3执行Type7 LSA转换Type5 LSA动作，继续携带FA：10.1.45.5。</p><p>R1收到后，会在自己的OSPF路由表中查询到达这个FA的路由，发现在OSPF路由表中能够找到匹配这个FA的路由，就使用到达这个FA的下一跳地址作为这条外部路由的下一跳地址。</p><p>因此，R1最终会通过R1-R2-R4-R5路径，访问目的网段10.1.5.0&#x2F;24。</p></blockquote><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/DNS_recursive_Server/">建立自有递归DNS服务器</a></li><li><a href="https://songxwn.com/zabbix_data/">Zabbix：历史数据与趋势数据</a></li><li><a href="https://songxwn.com/Juniper_RE-Protect/">Juniper RE防护-过滤SSH&Telnet登录</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>ospf</tag>
      
      <tag>datacom</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Frostmourne (霜之哀伤)日志监控系统部署安装</title>
    <link href="/frostmourne_install/"/>
    <url>/frostmourne_install/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><code>Frostmourne</code>(霜之哀伤)是汽车之家经销商技术部监控系统的开源版本，用于帮助监控几乎所有数据库数据(包括<code>Elasticsearch</code>, <code>Prometheus</code>, <code>SkyWalking</code>, <code>MySql</code> 等等)。如果你已经建立起了日志系统， 指标体系，却苦恼于没有一个配套监控系统，也许它能帮到你。</p><p>支持数据源：Elasticsearch, HTTP, SkyWalking, Prometheus, InfluxDB, MySQL&#x2F;TiDb, ClickHouse, SqlServer, PING, IotDB, Telnet</p><p>支持告警发送方式：钉钉(机器人)、企业微信(机器人)、飞书机器人、OneMessage机器人、Email、短信、HTTP。（text, markdown）</p><p>支持LDAP认证和自动创建用户。</p><p><code>Elasticsearch</code>数据查询、分享和下载</p><p>报警消息抑制功能，防止消息轰炸；也有报警升级功能，避免故障相关方长时间得不到通知。</p><span id="more"></span><p>Github地址：<a href="https://github.com/AutohomeCorp/frostmourne">https://github.com/AutohomeCorp/frostmourne</a> </p><p>环境要求：JAVA8-14、Mysql 8数据库。</p><p>教程使用Linux版本：Rocky Linux 8 （关闭SELinux）</p><p>版本：部署1.0版本</p><p>注意：目前不支持ES8 的加密认证，需要等后期支持JAVA 17。</p><h1 id="使用ZIP包部署（使用Linux环境）"><a href="#使用ZIP包部署（使用Linux环境）" class="headerlink" title="使用ZIP包部署（使用Linux环境）"></a>使用ZIP包部署（使用Linux环境）</h1><h2 id="下载JDK（推荐使用JDK8）"><a href="#下载JDK（推荐使用JDK8）" class="headerlink" title="下载JDK（推荐使用JDK8）"></a>下载JDK（推荐使用JDK8）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>dnf install wget tree<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 安装wget tree</span></span><br><br>cd /opt<br>mkdir java1.8<br>cd /opt/java1.8<br>wget --execute robots=off -nc -nd -r -l1 -A &#x27;*.gz&#x27; https://mirrors.tuna.tsinghua.edu.cn/Adoptium/8/jdk/x64/linux/<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 下载OpenJDK8二进制包，源为清华大学源，会自动下载最新版。</span></span><br><br>tar -zxvf OpenJDK8U-jdk_*.tar.gz <br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 解压</span></span><br><br>tree -L 2 /opt/java1.8/<br>/opt/java1.8/<br>├── jdk8u362-b09<br>│   ├── ASSEMBLY_EXCEPTION<br>│   ├── bin<br>│   ├── include<br>│   ├── jre<br>│   ├── lib<br>│   ├── LICENSE<br>│   ├── man<br>│   ├── NOTICE<br>│   ├── release<br>│   ├── sample<br>│   ├── src.zip<br>│   └── THIRD_PARTY_README<br>└── OpenJDK8U-jdk_x64_linux_hotspot_8u362b09.tar.gz<br><br>7 directories, 7 files<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 查看当前文件树</span></span><br><br></code></pre></td></tr></table></figure><p>PS：JDK也可以手动去<a href="https://mirrors.tuna.tsinghua.edu.cn/Adoptium/8/jdk/x64/linux/">https://mirrors.tuna.tsinghua.edu.cn/Adoptium/8/jdk/x64/linux/</a>  目录下进行下载最新版。</p><h2 id="部署Mysql（建议为8版本）"><a href="#部署Mysql（建议为8版本）" class="headerlink" title="部署Mysql（建议为8版本）"></a>部署Mysql（建议为8版本）</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs clean">dnf install mysql-server<br><br>##Rocky <span class="hljs-number">8</span>源默认安装mysql8<br><br>systemctl enable --now mysqld<br><br>systemctl status mysqld.service <br><br>## 设置开机并启动，查看启动状态<br><br></code></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">mysql_secure_installation <br><br><span class="hljs-comment">## 初始化Mysql</span><br><br><br><span class="hljs-comment">## 如下，都选择Y即可，密码等级选择0，然后配置root密码。</span><br><br><br>Securing <span class="hljs-keyword">the</span> MySQL server deployment.<br><br>Connecting <span class="hljs-built_in">to</span> MySQL <span class="hljs-keyword">using</span> <span class="hljs-keyword">a</span> blank password.<br><br>VALIDATE PASSWORD COMPONENT can be used <span class="hljs-built_in">to</span> test passwords<br><span class="hljs-keyword">and</span> improve security. It checks <span class="hljs-keyword">the</span> strength <span class="hljs-keyword">of</span> password<br><span class="hljs-keyword">and</span> allows <span class="hljs-keyword">the</span> users <span class="hljs-built_in">to</span> <span class="hljs-built_in">set</span> only those passwords which are<br>secure enough. Would you like <span class="hljs-built_in">to</span> setup VALIDATE PASSWORD component?<br><br>Press y|Y <span class="hljs-keyword">for</span> Yes, <span class="hljs-keyword">any</span> other key <span class="hljs-keyword">for</span> No: y<br><br>There are <span class="hljs-literal">three</span> levels <span class="hljs-keyword">of</span> password validation policy:<br><br>LOW    Length &gt;= <span class="hljs-number">8</span><br>MEDIUM Length &gt;= <span class="hljs-number">8</span>, <span class="hljs-keyword">numeric</span>, mixed <span class="hljs-keyword">case</span>, <span class="hljs-keyword">and</span> special <span class="hljs-keyword">characters</span><br>STRONG Length &gt;= <span class="hljs-number">8</span>, <span class="hljs-keyword">numeric</span>, mixed <span class="hljs-keyword">case</span>, special <span class="hljs-keyword">characters</span> <span class="hljs-keyword">and</span> dictionary                  <span class="hljs-built_in">file</span><br><br>Please enter <span class="hljs-number">0</span> = LOW, <span class="hljs-number">1</span> = MEDIUM <span class="hljs-keyword">and</span> <span class="hljs-number">2</span> = STRONG: <span class="hljs-number">0</span><br>Please <span class="hljs-built_in">set</span> <span class="hljs-keyword">the</span> password <span class="hljs-keyword">for</span> root here.<br><br>New password: <br><br>Re-enter <span class="hljs-built_in">new</span> password: <br><br>Estimated strength <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> password: <span class="hljs-number">50</span> <br>Do you wish <span class="hljs-built_in">to</span> continue <span class="hljs-keyword">with</span> <span class="hljs-keyword">the</span> password provided?(Press y|Y <span class="hljs-keyword">for</span> Yes, <span class="hljs-keyword">any</span> other key <span class="hljs-keyword">for</span> No) : y<br>By default, <span class="hljs-keyword">a</span> MySQL installation has <span class="hljs-keyword">an</span> anonymous user,<br>allowing anyone <span class="hljs-built_in">to</span> <span class="hljs-built_in">log</span> <span class="hljs-keyword">into</span> MySQL <span class="hljs-keyword">without</span> having <span class="hljs-built_in">to</span> have<br><span class="hljs-keyword">a</span> user account created <span class="hljs-keyword">for</span> them. This is intended only <span class="hljs-keyword">for</span><br>testing, <span class="hljs-keyword">and</span> <span class="hljs-built_in">to</span> make <span class="hljs-keyword">the</span> installation go <span class="hljs-keyword">a</span> bit smoother.<br>You should remove them <span class="hljs-keyword">before</span> moving <span class="hljs-keyword">into</span> <span class="hljs-keyword">a</span> production<br>environment.<br><br>Remove anonymous users? (Press y|Y <span class="hljs-keyword">for</span> Yes, <span class="hljs-keyword">any</span> other key <span class="hljs-keyword">for</span> No) : y<br>Success.<br><br><br>Normally, root should only be allowed <span class="hljs-built_in">to</span> connect <span class="hljs-built_in">from</span><br><span class="hljs-string">&#x27;localhost&#x27;</span>. This ensures that someone cannot guess <span class="hljs-keyword">at</span><br><span class="hljs-keyword">the</span> root password <span class="hljs-built_in">from</span> <span class="hljs-keyword">the</span> network.<br><br>Disallow root login remotely? (Press y|Y <span class="hljs-keyword">for</span> Yes, <span class="hljs-keyword">any</span> other key <span class="hljs-keyword">for</span> No) : y<br>Success.<br><br>By default, MySQL comes <span class="hljs-keyword">with</span> <span class="hljs-keyword">a</span> database named <span class="hljs-string">&#x27;test&#x27;</span> that<br>anyone can access. This is also intended only <span class="hljs-keyword">for</span> testing,<br><span class="hljs-keyword">and</span> should be removed <span class="hljs-keyword">before</span> moving <span class="hljs-keyword">into</span> <span class="hljs-keyword">a</span> production<br>environment.<br><br><br>Remove test database <span class="hljs-keyword">and</span> access <span class="hljs-built_in">to</span> <span class="hljs-keyword">it</span>? (Press y|Y <span class="hljs-keyword">for</span> Yes, <span class="hljs-keyword">any</span> other key <span class="hljs-keyword">for</span> No) : y<br> - Dropping test database...<br>Success.<br><br> - Removing privileges <span class="hljs-keyword">on</span> <span class="hljs-title">test</span> <span class="hljs-title">database</span>...<br>Success.<br><br>Reloading <span class="hljs-keyword">the</span> privilege tables will ensure that all changes<br>made so far will take effect immediately.<br><br>Reload privilege tables now? (Press y|Y <span class="hljs-keyword">for</span> Yes, <span class="hljs-keyword">any</span> other key <span class="hljs-keyword">for</span> No) : y<br>Success.<br><br>All done! <br><br></code></pre></td></tr></table></figure><h3 id="创建数据库导入SQL文件"><a href="#创建数据库导入SQL文件" class="headerlink" title="创建数据库导入SQL文件"></a>创建数据库导入SQL文件</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">wget https://github.com/AutohomeCorp/frostmourne/blob/master/doc/mysql-schema/frostmourne.sql<br><br>## 可能需要挂国际代理，或浏览器下载，使用SCP上传即可.<br><br>mysql -uroot -p &lt; frostmourne.sql<br><br>#输入密码即可导入创建数据库。<br><br>mysql -uroot -p<br><span class="hljs-section">mysql&gt; show databases;</span><br><span class="hljs-section">+--------------------+</span><br><span class="hljs-section">| Database           |</span><br><span class="hljs-section">+--------------------+</span><br>| frostmourne        |<br>| information<span class="hljs-emphasis">_schema |</span><br><span class="hljs-emphasis">| mysql              |</span><br><span class="hljs-emphasis">| performance_</span>schema |<br><span class="hljs-section">| sys                |</span><br><span class="hljs-section">+--------------------+</span><br>5 rows in set (9527.01 sec)<br><br><br>#查看数据库是否正常创建, quit命令退出。<br><br></code></pre></td></tr></table></figure><h2 id="下载frostmourne"><a href="#下载frostmourne" class="headerlink" title="下载frostmourne"></a>下载frostmourne</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd /opt<br>mkdir frostmourne<br>cd frostmourne<br><br>wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/AutohomeCorp/</span>frostmourne<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/1.0-RELEASE/</span>frostmourne-monitor-<span class="hljs-number">1.0</span>-RELEASE.zip<br><br><span class="hljs-comment">## 可能需要挂国际代理，或浏览器下载，使用SCP上传到opt目录即可.</span><br><span class="hljs-comment">## Github 下载地址 https://github.com/AutohomeCorp/frostmourne/releases</span><br><br>dnf install unzip <br><br>unzip frostmourne-monitor*.zip <br><br>tree <br>.<br>├── application.properties<br>├── env<br>├── frostmourne-monitor-<span class="hljs-number">1.0</span>-RELEASE.jar<br>├── frostmourne-monitor-<span class="hljs-number">1.0</span>-RELEASE.zip<br>└── scripts<br>    ├── shutdown.sh<br>    └── startup.sh<br><br><span class="hljs-number">1</span> directory, <span class="hljs-number">6</span> files<br><span class="hljs-comment">## 文件树如上。</span><br><br></code></pre></td></tr></table></figure><h3 id="修改ENV-环境文件，配置java路径"><a href="#修改ENV-环境文件，配置java路径" class="headerlink" title="修改ENV 环境文件，配置java路径"></a>修改ENV 环境文件，配置java路径</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/opt/</span>frostmourne/env <br><br><br>JAVA_HOME=<span class="hljs-regexp">/opt/</span>java1.<span class="hljs-number">8</span>/jdk8u362-b09<br><span class="hljs-comment">##配置文件上面操作解压的JDK路径即可</span><br><br>JAVA_OPTS=<span class="hljs-string">&quot;-Xms1200m -Xmx2000m -Xss1024K -XX:PermSize=128m -XX:MaxPermSize=256m -Dfile.encoding=utf-8&quot;</span><br><span class="hljs-comment">##JAVA参数，可适当改大内存等参数。</span><br><br></code></pre></td></tr></table></figure><p>修改启动app配置(也可以配置邮件发送服务器和LDAP)</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs routeros">vim /opt/frostmourne/application.properties <br><br><span class="hljs-attribute">alarmlog_reserve_days</span>=30<br><span class="hljs-comment">#配置监控日志保留天数</span><br><br><span class="hljs-attribute">datasource_frostmourne_url</span>=jdbc:mysql://127.0.0.1:3306/frostmourne?characterEncoding=utf8<br><span class="hljs-comment">#配置mysql数据库IP地址、数据库名字、编码。</span><br><br><span class="hljs-attribute">datasource_frostmourne_username</span>=root<br><span class="hljs-attribute">datasource_frostmourne_password</span>=Wow@123<br><span class="hljs-comment">#配置mysql数据库账号密码</span><br><br><br><span class="hljs-attribute">frostmourne_monitor_address</span>=192.168.124.100<br><br><span class="hljs-comment">#配置为本机IP地址即可</span><br><br><span class="hljs-attribute">frostmourne_message_title</span>=Wow<br><span class="hljs-comment">#配置实例名字</span><br><br></code></pre></td></tr></table></figure><h3 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/opt/</span>frostmourne<span class="hljs-regexp">/scripts/</span>startup.sh <br><br>./startup.sh: line <span class="hljs-number">7</span>: dos2unix: command not found<br>LOG_DIR: <span class="hljs-regexp">/opt/</span>frostmourne<span class="hljs-regexp">/scripts/</span>../logs<br>PID_FOLDER: <span class="hljs-regexp">/opt/</span>frostmourne<span class="hljs-regexp">/scripts/</span>../pid<br>Sun Mar <span class="hljs-number">26</span> <span class="hljs-number">16</span>:<span class="hljs-number">42</span>:<span class="hljs-number">27</span> CST <span class="hljs-number">2023</span> ==== Starting ==== <br>Application is running as root (UID <span class="hljs-number">0</span>). This is considered insecure.<br>Started [<span class="hljs-number">5477</span>]<br>Waiting <span class="hljs-keyword">for</span> server startup..<br>Sun Mar <span class="hljs-number">26</span> <span class="hljs-number">16</span>:<span class="hljs-number">42</span>:<span class="hljs-number">37</span> CST <span class="hljs-number">2023</span> Server started <span class="hljs-keyword">in</span> <span class="hljs-number">10</span> seconds<br><br>ss -an | grep <span class="hljs-number">10054</span><br>tcp   LISTEN <span class="hljs-number">0</span>      <span class="hljs-number">100</span>                    *:<span class="hljs-number">10054</span>           *:*                  <br><br><span class="hljs-comment">## 查看10054端口监听即可判断已正常启动。</span><br><br><span class="hljs-regexp">/opt/</span>frostmourne<span class="hljs-regexp">/scripts/</span>shutdown.sh <br><br><span class="hljs-comment">## 停止服务</span><br><br>                 <br><br></code></pre></td></tr></table></figure><p>Web访问：  http:&#x2F;&#x2F;192.168.124.100:10054    即可测试，注意替换IP</p><p>admin 管理账号默认的账号密码是123456</p><p>注意：开启了LDAP认证，admin账号仍然可以用初始密码登录。</p><h2 id="配置为Systemd自定义服务并设置开机启动"><a href="#配置为Systemd自定义服务并设置开机启动" class="headerlink" title="配置为Systemd自定义服务并设置开机启动"></a>配置为Systemd自定义服务并设置开机启动</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs routeros">vim /usr/lib/systemd/system/frostmourne.service <br><br><br>[Unit]<br><span class="hljs-attribute">Description</span>=frost<br><span class="hljs-attribute">After</span>=network.target mysqld.service<br><br>[Service]<br><span class="hljs-attribute">User</span>=root<br><span class="hljs-attribute">Type</span>=forking<br><span class="hljs-attribute">ExecStart</span>=/opt/frostmourne/scripts/startup.sh<br><span class="hljs-attribute">ExecStop</span>=/opt/frostmourne/scripts/shutdown.sh<br><span class="hljs-attribute">RemainAfterExit</span>=<span class="hljs-literal">yes</span><br><br><br><br>[Install]<br><span class="hljs-attribute">WantedBy</span>=multi-user.target<br><br><span class="hljs-comment">##写入到文件保存。</span><br><br>systemctl daemon-reload<br><span class="hljs-comment">## 加载自定义服务</span><br>systemctl start frostmourne.service <br>systemctl status frostmourne.service <br><br><span class="hljs-comment">## 尝试启动，并查看状态。</span><br>systemctl <span class="hljs-built_in">enable</span> frostmourne.service <br><br><span class="hljs-comment">## 设置开启及并启动</span><br><br></code></pre></td></tr></table></figure><p>注意：需要等待网络服务和mysql启动之后，才会启动。</p><h1 id="技术架构"><a href="#技术架构" class="headerlink" title="技术架构"></a>技术架构</h1><p><code>frostmourne-vue</code>：前端项目，使用<code>vue-element-template</code>实现，打包时会把生成的资源文件构建到<code>frostmourne-monitor</code></p><ul><li><code>frostmourne-monitor</code>：监控运行主体服务</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/03/26/03ee6a3d6abcf82b.png" srcset="/img/loading.gif" lazyload></p><h2 id="主要技术栈"><a href="#主要技术栈" class="headerlink" title="主要技术栈"></a>主要技术栈</h2><ul><li><code>springboot 2.x</code></li><li><code>element ui</code></li><li><code>vue-admin-template</code></li><li><code>xxl-job</code></li><li><code>mybatis</code></li><li><code>freemarker</code></li><li><code>elasticsearch</code></li><li><code>InfluxDB</code></li><li><code>jjwt</code></li><li><code>nashorn</code></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>官方文档：<a href="https://github.com/AutohomeCorp/frostmourne">https://github.com/AutohomeCorp/frostmourne</a> </p><p>注意：推荐配合<a href="https://songxwn.com/elk/">https://songxwn.com/elk/</a>  ES部署使用。<br>集群：安装教程：<a href="https://songxwn.com/elk_cluster/">https://songxwn.com/elk_cluster/</a></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/Elasticsearch-x-pack-core/">Elasticsearch 8.7 白金版激活</a></li><li><a href="https://songxwn.com/Linux-growpart/">Linux 虚拟机在线热扩容分区</a></li><li><a href="https://songxwn.com/elk_cluster/">Elasticsearch 安装配置集群系统</a></li><li><a href="https://chengzhaoxi.xyz/361d7ede.html">互联网算法工程开发常用技术</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>ELK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>elk</tag>
      
      <tag>syslog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Veeam Backup Replication 12 安装和激活</title>
    <link href="/Veeam12/"/>
    <url>/Veeam12/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>只需单个平台即可保护并管理所有工作负载、应用及数据：云端、虚拟、物理、SaaS、Kubernetes、VMware、Hyper-V、Windows、Linux、UNIX、NAS、AWS、Azure、企业应用等。</p><p>个人主要用于备份ESXi上的虚拟机，可以实现单次完整备份，和定时的增量备份。</p><p>此文章提供了ISO安装文件的下载和安装激活。</p><span id="more"></span><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>ISO 具体版本为： 12.0.0.1420_20230209<br><a href="https://download2.veeam.com/VBR/v12/VeeamBackup&Replication_12.0.0.1420_20230209.iso">官方网站下载ISO</a></p><p><a href="https://vault.digiboy.ir/veeam/VeeamBackup&Replication_12.0.0.1420_20230209.iso">第三方存档下载ISO</a></p><h2 id="安装要求（推荐）"><a href="#安装要求（推荐）" class="headerlink" title="安装要求（推荐）"></a>安装要求（推荐）</h2><ul><li>操作系统推荐 Windows Server 2016-2022</li><li>CPU要求至少四个内核、内存建议4GB以上。</li><li>存储空间建议100GB以上，备份用空间根据需求来算。</li><li>数据库可使用自带的PostgreSQL 15.1 或安装 SQL Server 2012-2022进行使用。</li></ul><p>注意：安装要断网安装，否则要求授权文件才能，且会联网验证。</p><p>PS：目前支持VMware ESXi 6.0-8.0版本</p><h2 id="安装顺序"><a href="#安装顺序" class="headerlink" title="安装顺序"></a>安装顺序</h2><p>需要安装VBR之后，再安装VBEM</p><h1 id="激活软件为专业版"><a href="#激活软件为专业版" class="headerlink" title="激活软件为专业版"></a>激活软件为专业版</h1><h2 id="下载替换文件"><a href="#下载替换文件" class="headerlink" title="下载替换文件"></a>下载替换文件</h2><p><a href="https://songxwn.com/file/Veeam_12_P.7z">替换文件下载</a></p><p>下载后解压，会有下列文件</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">VeeamLicense</span>.</span></span>dll<br>#替换文件<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Veeam_ASv11_1500</span>.</span></span>lic<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Veeam_BackupRep_v12_5000_1</span>.</span></span>lic<br>#授权文件<br><br></code></pre></td></tr></table></figure><h2 id="停止服务和替换文件"><a href="#停止服务和替换文件" class="headerlink" title="停止服务和替换文件"></a>停止服务和替换文件</h2><p>安装完软件之后</p><p>使用管理员运行PowerShell 执行下面命令：</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-built_in">get-service</span> -<span class="hljs-string">displayname</span> <span class="hljs-string">Veeam</span>* | <span class="hljs-string">stop-service</span><br><span class="hljs-built_in">get-service</span> -<span class="hljs-string">displayname</span> <span class="hljs-string">Veeam</span>*<br><br></code></pre></td></tr></table></figure><p>然后进入C:\Program Files\Common Files\Veeam 目录下，将VeeamLicense.dll 覆盖到其目录下。</p><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><p>然后运行所有服务</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-built_in">get-service</span> -<span class="hljs-string">displayname</span> <span class="hljs-string">Veeam</span>* | <span class="hljs-string">start-service</span><br><br></code></pre></td></tr></table></figure><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>打开Veeam Backup &amp; Replication Console 软件，点击左上角的菜单，选择License选项，点击install，选择</p><p>Veeam_BackupRep_v12_5000_1.lic 文件导入安装即可激活。</p><h2 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h2><p><a href="https://www.digiboy.ir/11840/veeam-backup-replication-12-0-0-1420/">https://www.digiboy.ir/11840/veeam-backup-replication-12-0-0-1420/</a></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/VMware_Vsphere8_key/">VMware Vsphere 8 序列号</a></li><li><a href="https://songxwn.com/ESXi8_IPMI/">VMware ESXi 8 使用IPMITool</a></li><li><a href="https://songxwn.com/ESXI_CVE-2021-21974/">ESXi 勒索病毒ESXiArgs 其CVE-2021-21974漏洞分析和恢复</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>VMware</category>
      
    </categories>
    
    
    <tags>
      
      <tag>esxi</tag>
      
      <tag>vmware</tag>
      
      <tag>backups</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ESXi 勒索病毒ESXiArgs 其CVE-2021-21974漏洞分析和恢复</title>
    <link href="/ESXI_CVE-2021-21974/"/>
    <url>/ESXI_CVE-2021-21974/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ul><li>该漏洞编号为<a href="https://www.vmware.com/security/advisories/VMSA-2021-0002.html">CVE-2021-21974</a>，由 OpenSLP 服务中的堆溢出问题引起，未经身份验证的攻击者可以此进行低复杂度攻击。</li><li>该漏洞主要影响6.x 版和 6.7、7.0版本之前的 ESXi 管理程序，2021年2月23日 ，VMware曾发布补丁修复了该漏洞。（在此之后发布的版本不影响）</li><li>该漏洞启动之后，主要破坏行为为停止所有虚拟机，并加密所有数据文件。</li><li>因为不会加密大文件，所以有很大可能性进行恢复操作。</li></ul><span id="more"></span><h2 id="具体影响版本"><a href="#具体影响版本" class="headerlink" title="具体影响版本"></a>具体影响版本</h2><p>大于以下版本则不受影响</p><ul><li>ESXi versions 7.x prior to ESXi70U1c-17325551</li><li>ESXi versions 6.7.x prior to ESXi670-202102401-SG</li><li>ESXi versions 6.5.x prior to ESXi650-202102101-SG</li></ul><h1 id="被攻击之后的访问管理界面示例"><a href="#被攻击之后的访问管理界面示例" class="headerlink" title="被攻击之后的访问管理界面示例"></a>被攻击之后的访问管理界面示例</h1><p><img src="https://s3.bmp.ovh/imgs/2023/02/07/aafd8c55b6dac39d.png" srcset="/img/loading.gif" lazyload></p><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="线上生产环境ESXI防护方案"><a href="#线上生产环境ESXI防护方案" class="headerlink" title="线上生产环境ESXI防护方案"></a>线上生产环境ESXI防护方案</h1><ul><li><p>停止SLP服务，并停止开机启动。（SSH登录）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">/etc/init.d/slpd stop<br>chkconfig slpd off<br></code></pre></td></tr></table></figure></li><li><p>防火墙过滤公网IP访问SLP等服务。(网络-防火墙-CIM SLP服务限制访问IP)</p></li><li><p>停机升级到最新版本。</p></li></ul><h1 id="安全预防方案"><a href="#安全预防方案" class="headerlink" title="安全预防方案"></a>安全预防方案</h1><ol><li>安装ESXI系统尽量使用最新版发布版本。减少安全漏洞。</li><li>管理尽量使用内网IP，不使用公网IP，减少攻击面。</li><li>ESXI密码设定尽量复杂，防止暴力破解密码。</li><li>可以考虑定期备份ESXI配置和虚拟机文件。</li></ol><h1 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h1><ul><li>虽攻击者说明已盗取数据，但从历史流量来看，没有这个可能性。</li><li>被攻击后，数据文件会被强加密，几乎不可能用正常手段恢复。</li><li>目前从网上公布被攻击数据来看，中国大陆受到的攻击几乎没有。（即使有大量暴露且未打补丁的ESXI）</li></ul><h1 id="恢复手段"><a href="#恢复手段" class="headerlink" title="恢复手段"></a>恢复手段</h1><p>因该病毒只会加密像.vmdk .vmx这样的小文件，但不加密server-flat.vmdk大文件。<br>所以有很大的可能恢复导出数据。</p><p>详细教程： <a href="https://enes.dev/">https://enes.dev</a></p><p>或者使用CISA 机构提供的恢复脚本：<a href="https://github.com/cisagov/ESXiArgs-Recover">https://github.com/cisagov/ESXiArgs-Recover</a></p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://www.freebuf.com/news/356626.html">新型勒索软件正攻击全球VMware ESXi 服务器 - FreeBuf网络安全行业门户</a></p><p><a href="https://kb.vmware.com/s/article/76372">How to Disable&#x2F;Enable the SLP Service on VMware ESXi (76372)</a></p><p><a href="https://security.macnica.co.jp/blog/2023/02/esxiesxiargs.html#:~:text=%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB%E3%81%A7%E3%81%AEESXi%E3%81%AE%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B36.7.0%E3%80%816.5.0%E3%80%816.0.0%E3%80%815.5.0*1%E3%81%AE%E5%90%88%E8%A8%88%E5%8F%B0%E6%95%B0%E3%81%8C57%2C446%E5%8F%B0%E3%80%81%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB%E3%81%A7%E3%81%AE%E8%A2%AB%E5%AE%B3%E7%B7%8F%E6%95%B0%E3%81%AF3%2C162%E5%8F%B0%E3%81%A7%E8%A2%AB%E5%AE%B3%E7%99%BA%E7%94%9F%E5%89%B2%E5%90%88%E3%81%AF5.5%EF%BC%85%E3%81%A8%E3%81%AA%E3%82%8A%E3%81%BE%E3%81%99%E3%80%82%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB%E5%B9%B3%E5%9D%87%E3%81%A7%E3%81%82%E3%82%8B5.5%EF%BC%85%E4%BB%A5%E4%B8%8A%E8%A2%AB%E5%AE%B3%E3%82%92%E5%8F%97%E3%81%91%E3%81%A6%E3%81%84%E3%82%8B%E3%80%81%E3%83%95%E3%83%A9%E3%83%B3%E3%82%B9%E3%80%81%E3%83%95%E3%82%A3%E3%83%B3%E3%83%A9%E3%83%B3%E3%83%89%E3%80%81%E3%82%AB%E3%83%8A%E3%83%80%E3%80%81%E3%83%89%E3%82%A4%E3%83%84%E3%81%A8%E8%A8%80%E3%81%A3%E3%81%9F%E3%82%A6%E3%82%AF%E3%83%A9%E3%82%A4%E3%83%8A%E6%94%AF%E6%8F%B4%E3%81%AB%E7%A9%8D%E6%A5%B5%E7%9A%84%E3%81%AA%E5%9B%BD%E3%81%A7%E3%81%AF%E5%A4%9A%E3%81%8F%E3%81%AE%E8%A2%AB%E5%AE%B3%E3%81%8C%E7%99%BA%E7%94%9F%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%82%82%E8%A6%8B%E3%81%88%E3%81%BE%E3%81%99%E3%80%82%E3%81%93%E3%81%AE%E6%94%BB%E6%92%83%E3%81%8C%E3%82%A6%E3%82%AF%E3%83%A9%E3%82%A4%E3%83%8A%E6%83%85%E5%8B%A2%E3%81%AB%E9%96%A2%E9%80%A3%E3%81%99%E3%82%8B%E3%82%82%E3%81%AE%E3%81%8B%E3%81%AF%E3%80%81%E3%81%93%E3%82%8C%E3%81%A0%E3%81%91%E3%81%A7%E3%81%AF%E5%88%A4%E6%96%AD%E3%83%BB%E6%96%AD%E5%AE%9A%E3%81%A7%E3%81%8D%E3%81%BE%E3%81%9B%E3%82%93%E3%81%8C%E3%80%81%E3%83%87%E3%83%BC%E3%82%BF%E4%B8%8A%E3%81%AF%E4%BD%95%E3%82%89%E3%81%8B%E3%81%AE%E9%96%A2%E9%80%A3%E3%81%8C%E3%81%82%E3%82%8B%E3%81%A8%E6%84%9F%E3%81%98%E3%81%96%E3%82%8B%E3%82%92%E5%BE%97%E3%81%BE%E3%81%9B%E3%82%93%E3%80%82%E5%AE%9F%E9%9A%9B%E3%81%AB%E8%A7%A3%E6%9E%90%E3%82%92%E8%A1%8C%E3%81%A3%E3%81%9F%E3%83%99%E3%83%B3%E3%83%80%E3%81%AE%E6%83%85%E5%A0%B1%E3%82%82%E5%BE%85%E3%81%A1%E3%81%9F%E3%81%84%E3%81%A8%E6%80%9D%E3%81%84%E3%81%BE%E3%81%99%E3%80%82">VMware社のESXiサーバを狙うランサムキャンペーン ESXiArgsに関する調査 - セキュリティ研究センターブログ (macnica.co.jp)</a></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/VMware_Vsphere8_key/">VMware Vsphere 8 序列号</a></li><li><a href="https://songxwn.com/ESXi8_IPMI/">VMware ESXi 8 使用IPMITool</a></li><li><a href="https://songxwn.com/Veeam12/">Veeam Backup Replication 12 安装和激活</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>VMware</category>
      
    </categories>
    
    
    <tags>
      
      <tag>esxi</tag>
      
      <tag>vmware</tag>
      
      <tag>security</tag>
      
      <tag>netwrok</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Juniper Junos系统架构和命令模式浅谈</title>
    <link href="/Juniper_Junos/"/>
    <url>/Juniper_Junos/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Junos OS 是支持瞻博网络广泛的物理和虚拟网络及安全产品组合的单一操作系统。</p><p>Junos OS 包括以下架构变化：</p><ul><li>裸机上运行的 Junos OS FreeBSD 6。这是基于 FreeBSD 6 内核的 Junos OS。（很老版本）</li><li>Junos OS FreeBSD 10 或更高版本的裸机上。这是基于升级后的 FreeBSD 内核的 Junos OS。从 Junos OS 15.1 版开始，某些硬件平台运行升级版 FreeBSD 的 Junos OS。从 Junos OS 版本 16.1 开始，升级版 FreeBSD 的 Junos OS 可作为访客虚拟机 （VM） 在 Linux 虚拟机主机上运行。有关运行具有升级后的 FreeBSD 的 Junos OS 的更多信息，请在功能探索器中搜索 <strong>Junos 内核升级到 FreeBSD 10+</strong> ： <a href="https://apps.juniper.net/feature-explorer/feature-info.html?fKey=6880&fn=Junos+kernel+upgrade+to+FreeBSD+10+">Junos 内核升级到 FreeBSD 10+</a> 。（现有设备版本，裸机跑Linux，KVM虚拟化跑RE引擎）</li><li>Junos OS Evolved。有关 <a href="https://www.juniper.net/documentation/us/en/software/junos/evo-overview/index.html">Junos OS Evolved 的详细信息，请参阅 Junos® OS Evolved</a> 和 <a href="https://www.juniper.net/documentation/us/en/software/junos/evo-install-upgrade/index.html">Junos® OS Evolved 软件安装和升级指南</a> 。（裸机直接跑Junos OS，更开放，可以运行第三方容器）</li></ul><span id="more"></span><h2 id="架构概述"><a href="#架构概述" class="headerlink" title="架构概述"></a>架构概述</h2><p>下图为Junos OS的架构图</p><p><img src="https://s3.bmp.ovh/imgs/2023/01/08/337d34067c7d54d2.png" srcset="/img/loading.gif" lazyload></p><p>使用Intel X86 CPU硬件，运行Linux，使用<a href="https://www.redhat.com/zh/topics/virtualization/what-is-KVM">KVM虚拟化</a>运行 RE（路由引擎），RE系统为用户直接接触的系统，基于FreeBSD内核。</p><p>Linux去控制FPC 转发，控制物理接口。RE与FPC通信下发转发。</p><p><img src="https://s3.bmp.ovh/imgs/2023/01/08/1c533b4569c2b2cc.png" srcset="/img/loading.gif" lazyload></p><h1 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h1><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c">root<span class="hljs-meta">#</span><br>root<span class="hljs-meta"># uname </span><br>FreeBSD<br><br></code></pre></td></tr></table></figure><p>Junos shell模式 （FreeBSD 下sh），使用root登录的默认模式。</p><p>处于Junos底层，可以操作FreeBSD系统。</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gauss">root<span class="hljs-meta"># cli</span><br>root<span class="hljs-comment">@&gt;</span><br><span class="hljs-comment">root@</span>&gt; <span class="hljs-keyword">show</span> version <br><br></code></pre></td></tr></table></figure><p>传统网络设备的CLI，操作模式。</p><p>使用此模式显示设备的当前状态。在操作模式下，您输入命令来监控网络操作系统、设备和网络连接并对其进行故障排除。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-symbol">root@</span>&gt; configure <br>Entering configuration mode<br><br><span class="hljs-symbol">root@</span># <br><br></code></pre></td></tr></table></figure><p>传统网络设备的CLI，配置模式。</p><p>使用此模式配置设备。在此模式下，您输入语句以配置设备的所有属性，包括接口、常规路由信息、路由协议、用户访问以及多个系统和硬件属性。 Junos OS 将配置存储为配置语句的层次结构。</p><h2 id="切换"><a href="#切换" class="headerlink" title="切换"></a>切换</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">user</span><span class="hljs-variable">@host</span><span class="hljs-operator">&gt;</span> <br><span class="hljs-keyword">user</span><span class="hljs-variable">@host</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">start</span> shell<br><span class="hljs-operator">%</span><br><span class="hljs-operator">%</span> su<br>Password:<br><br>root#<br><br></code></pre></td></tr></table></figure><p>非root账号登录，进入CLI操作模式。输入命令可以进入FreeBSD shell模式，访问Junos底层。</p><p>但账号权限是普通账号，可以使用su,切换为root账号，提高权限。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs elixir">root<span class="hljs-comment"># uname </span><br><span class="hljs-title class_">FreeBSD</span><br>root<span class="hljs-comment"># vhclient -s</span><br>root<span class="hljs-variable">@host</span><span class="hljs-symbol">:~</span><span class="hljs-comment"># uname</span><br><span class="hljs-title class_">Linux</span><br><br></code></pre></td></tr></table></figure><p>进入Linux shell模式</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p> <a href="https://www.juniper.net/documentation/cn/zh/software/junos/junos-overview/index.html">Junos 概述</a></p><p> <a href="https://www.juniper.net/documentation/cn/zh/software/junos/cli/topics/topic-map/cli-overview.html">CLI概要</a></p><p> <a href="https://www.juniper.net/documentation/cn/zh/software/junos/junos-install-upgrade/topics/topic-map/vm-host-overview.html">虚拟主机</a></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/team_nav/">部署团队服务导航网站 Team-nav</a></li><li><a href="https://songxwn.com/ESXI_CVE-2021-21974/">ESXi 勒索病毒ESXiArgs 其CVE-2021-21974漏洞分析和恢复</a></li><li><a href="https://songxwn.com/Juniper_RE-Protect/">Juniper RE防护-过滤SSH&Telnet登录</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>netwrok</category>
      
    </categories>
    
    
    <tags>
      
      <tag>netwrok</tag>
      
      <tag>linux</tag>
      
      <tag>juniper</tag>
      
      <tag>freebsd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Juniper RE防护-过滤SSH&amp;Telnet登录</title>
    <link href="/Juniper_RE-Protect/"/>
    <url>/Juniper_RE-Protect/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>1、本教程仅适用于Juniper MX系列和QFX系列设备。（验证过）</p><p>2、提交配置时候，建议使用可自动回退的提交，防止无法远程管理。</p><p>3、本教程主要用于Juniper设备的登录防护，限制IP登录SSH或Telnet等远程控制协议。</p><p>PS：设备如果有公网IP，几乎无时不刻都有扫描和登录攻击。而且Juniper某些版本有Bug可能因此重启。</p><span id="more"></span><h1 id="配置命令"><a href="#配置命令" class="headerlink" title="配置命令"></a>配置命令</h1><h2 id="编写过滤规则"><a href="#编写过滤规则" class="headerlink" title="编写过滤规则"></a>编写过滤规则</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs none">set firewall family inet filter RE-Protect term management_permit from source-address 192.168.2.0/24<br>set firewall family inet filter RE-Protect term management_permit from source-address 172.16.0.1/24<br>set firewall family inet filter RE-Protect term management_permit from protocol tcp<br>set firewall family inet filter RE-Protect term management_permit from destination-port telnet<br>set firewall family inet filter RE-Protect term management_permit from destination-port ssh<br>set firewall family inet filter RE-Protect term management_permit from destination-port ftp<br>set firewall family inet filter RE-Protect term management_permit then accept<br>set firewall family inet filter RE-Protect term management_deny from protocol tcp<br>set firewall family inet filter RE-Protect term management_deny from destination-port telnet<br>set firewall family inet filter RE-Protect term management_deny from destination-port ssh<br>set firewall family inet filter RE-Protect term management_deny from destination-port ftp<br>set firewall family inet filter RE-Protect term management_deny then reject<br>set firewall family inet filter RE-Protect term other-permit then accept<br><br></code></pre></td></tr></table></figure><ul><li>management_permit 语句匹配指定源地址访问SSH Telnet ftp协议允许。</li><li>management_deny 语句匹配访问SSH Telnet ftp协议拒绝。</li><li>other-permit 语句允许所有。</li></ul><p><strong>注意：此规则只匹配了IPv4</strong></p><h2 id="应用到lo0口"><a href="#应用到lo0口" class="headerlink" title="应用到lo0口"></a>应用到lo0口</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">set</span> interfaces lo0 unit <span class="hljs-number">0</span> <span class="hljs-keyword">family</span> <span class="hljs-type">inet</span> <span class="hljs-keyword">filter</span> <span class="hljs-keyword">input</span> RE-Protect<br><br></code></pre></td></tr></table></figure><ul><li>一般情况下，将过滤规则应用到 lo0.0口的入方向，即可全局生效。</li></ul><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">show</span> firewall log<br><br><span class="hljs-attribute">Log</span>:<br><span class="hljs-attribute">Time</span>      Filter  Action  Interface     Protocol   Src Addr        Dest Addr<br><span class="hljs-attribute">15</span>:<span class="hljs-number">17</span>:<span class="hljs-number">11</span>  pfe     R       ge-<span class="hljs-number">0</span>/<span class="hljs-number">0</span>/<span class="hljs-number">0</span>.<span class="hljs-number">0</span>    TCP        <span class="hljs-number">192.168.255.1</span>   <span class="hljs-number">192.168.255.2</span><br><span class="hljs-attribute">15</span>:<span class="hljs-number">12</span>:<span class="hljs-number">04</span>  pfe     R       ge-<span class="hljs-number">0</span>/<span class="hljs-number">0</span>/<span class="hljs-number">0</span>.<span class="hljs-number">0</span>    TCP        <span class="hljs-number">192.168.255.1</span>   <span class="hljs-number">192.168.255.2</span><br><br></code></pre></td></tr></table></figure><ul><li>输出确认来自 192.168.255.1 源地址 的信息流与过滤器术语匹配。列<code>Action</code>显示一个<code>R</code>来指示这些数据包被拒绝。还列出了接口、传输协议以及 源和目标地址。这些结果确认此示例的防火墙过滤器工作正常。</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">show <span class="hljs-built_in">log</span> <span class="hljs-keyword">messages</span> | <span class="hljs-keyword">last</span> <span class="hljs-number">100</span> | <span class="hljs-keyword">match</span> ssh <br><br></code></pre></td></tr></table></figure><ul><li>查看日志匹配ssh，可查看是否有ssh登录失败日志。无则生效。</li></ul><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">show</span> <span class="hljs-keyword">system</span> connections    <br><br></code></pre></td></tr></table></figure><ul><li>可查看监听端口与建立的连接。</li></ul><h2 id="lo口加入VRF导致SSH过滤不生效"><a href="#lo口加入VRF导致SSH过滤不生效" class="headerlink" title="lo口加入VRF导致SSH过滤不生效"></a>lo口加入VRF导致SSH过滤不生效</h2><ul><li>将过滤规则应用到lo0.0 的确可以全局生效，但是在没有lo0其他子接口未被配置到其他routing-instances情况。如果配置了，此routing-instances的IP是不受匹配规则影响。</li><li>只需要单独匹配加入routing-instances的lo0的过滤规则即可。</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.juniper.net/documentation/cn/zh/software/junos/routing-policy/topics/example/firewall-filter-stateless-example-trusted-source-block-telnet-and-ssh-access.html">Juniper文档</a></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/DNS_recursive_Server/">建立自有递归DNS服务器</a></li><li><a href="https://songxwn.com/zabbix_data/">Zabbix：历史数据与趋势数据</a></li><li><a href="https://songxwn.com/ospf-route-FA/">HCIE Datacom-01.3 IGP高级特性-OSPF-其他特性</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>juniper</tag>
      
      <tag>ssh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HCIE Datacom-01.2 IGP高级特性-OSPF-路由控制</title>
    <link href="/ospf-route-c/"/>
    <url>/ospf-route-c/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><strong>OSPF的路由控制包括：</strong></p><ul><li>调整OSPF的接口开销</li><li>设置等价路由</li><li>引入外部路由</li><li>路由聚合</li><li>缺省路由通告</li><li>Filter-Policy</li><li>对发送的LSA进行过滤</li><li>对ABR Type3 LSA进行过滤</li><li>设置LSDB中External LSA的最大数量</li><li>案例</li></ul><p>本文章参考华为认证系列PPT</p><span id="more"></span><h2 id="等价路由"><a href="#等价路由" class="headerlink" title="等价路由"></a>等价路由</h2><ul><li><p>当路由表中存在到达同一目的地址，且同一路由协议发现的多条路由时，若这几条路由的开销值（Cost）也相同，那么这些路由就是等价路由，可以实现负载分担。（OSPF选路基本靠Cost值）</p></li><li><p>设备将按照负载分担的方式从多条等价路由发送报文到同一目的地址。</p><p>   设置进行负载分担的等价路由的最大数量：</p></li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[Huawei-ospf-1]</span> maximum load-balancing number<br><br></code></pre></td></tr></table></figure><p>PS：默认为1，不进行等价路由。</p><p>命令说明：</p><p>[Huawei-ospf-1] maximum load-balancing number</p><p>number：等价路由的最大数量。设备型号不同，取值范围不同，具体请参考相应设备的产品文档。</p><h2 id="等价路由配置举例"><a href="#等价路由配置举例" class="headerlink" title="等价路由配置举例"></a>等价路由配置举例</h2><p><img src="https://s3.bmp.ovh/imgs/2022/12/25/6d24f71b442758ea.png" srcset="/img/loading.gif" lazyload></p><p>通过配置，要求R1可以通过R1-R3路径访问R3的环回口地址，也可以通过R1-R2-R3路径访问R3的环回口地址。</p><p>1、各设备配置接口地址及部署OSPF。（略）</p><p>2、R1配置路由负载分担。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[R1]</span> ospf<br><span class="hljs-string">[R1-ospf-1]</span> maximum load-balancing <span class="hljs-number">3</span><br><br></code></pre></td></tr></table></figure><p>3、结果验证。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">[R1]display ip routing-table <br><span class="hljs-section">Route Flags: R - relay, D - download to fib</span><br><span class="hljs-section">-------------------------------------------------------------------------------------------</span><br><br>Destination/Mask Proto   Pre  Cost   Flags NextHop     Interface<br>10.1.3.3/32    OSPF    10   10       D   10.1.13.3   GigabitEthernet0/0/0<br><span class="hljs-code">                    OSPF    10   10       D   10.1.12.2   GigabitEthernet0/0/1</span><br><br></code></pre></td></tr></table></figure><h2 id="缺省路由"><a href="#缺省路由" class="headerlink" title="缺省路由"></a>缺省路由</h2><ul><li>OSPF实际组网应用中，区域边界和自治系统边界通常都是由多个路由器组成的多出口冗余备份或者负载分担。此时，为了减少路由表的容量，可以配置缺省路由，保证网络的高可用性。</li><li>OSPF缺省路由通常应用于下面两种情况：</li></ul><blockquote><p>由区域边界路由器（ABR）发布Type3 LSA，用来指导特殊区域内路由器进行区域之间报文的转发。</p><p>由自治系统边界路由器（ASBR）发布Type5 LSA或Type7 LSA，用来指导OSPF路由域内路由器进行域外报文的转发。</p></blockquote><p><img src="https://s3.bmp.ovh/imgs/2022/12/31/17a4e512cd1419d4.png" srcset="/img/loading.gif" lazyload></p><ul><li>缺省路由是指目的地址和掩码都是0的路由。当设备无精确匹配的路由时，就可以通过缺省路由进行报文转发。由于OSPF路由的分级管理，Type3缺省路由的优先级高于Type5或Type7路由。</li><li>普通区域：</li></ul><blockquote><p>缺省情况下，普通OSPF区域内的OSPF路由器是不会产生缺省路由的，即使它有缺省路由。当该路由器需要向OSPF发布缺省路由时，必须手工执行default-route-advertise命令，配置完成后，路由器会产生一个缺省ASE LSA（Type5 LSA），并且通告到整个OSPF自治系统中。</p></blockquote><ul><li>Stub区域：</li></ul><blockquote><p>Stub区域不允许自治系统外部的路由（Type5 LSA）在区域内传播。区域内的路由器必须通过ABR学到自治系统外部的路由。</p><p>Stub区域的ABR会自动产生一条缺省的Type3 LSA通告到整个Stub区域。ABR通过该缺省路由，将到达AS外部的流量吸引到自己这里，然后通过ABR转发出去。</p></blockquote><ul><li>Totally Stub区域：</li></ul><blockquote><p>Totally Stub区域既不允许自治系统外部的路由（Type5 LSA）在区域内传播，也不允许区域间路由（Type3 LSA）在区域内传播。区域内的路由器必须通过ABR学到自治系统外部和其他区域的路由。</p><p>Totally Stub区域的ABR会自动产生一条缺省的Type3 LSA通告到整个Stub区域。ABR通过该缺省路由，将到达AS外部和其它区域的流量吸引到自己这里，然后通过ABR转发出去。</p></blockquote><ul><li>NSSA区域：</li></ul><blockquote><p>如果希望到达自治系统外部的路由通过本区域（NSSA区域）的ASBR到达，而其它外部路由通过其它区域出去。此时，ABR会产生一条Type7 LSA的缺省路由，通告到整个NSSA区域内。这样，除了某少部分路由通过NSSA的ASBR到达，其它路由都可以通过NSSA的ABR到达其它区域的ASBR出去。这种情况下，在ABR上无论路由表中是否存在缺省路由0.0.0.0，都会产生Type7 LSA的缺省路由。</p><p>如果希望所有的外部路由只通过本区域（NSSA区域）的ASBR到达，则必须在ASBR上手动执行nssa [default-route-advertise]命令进行配置，使ASBR产生一条缺省的NSSA LSA（Type7 LSA），通告到整个NSSA区域内。这样，所有的外部路由就只能通过本区域NSSA的ASBR到达。这种情况下，在ASBR上只有当路由表中存在缺省路由0.0.0.0时，才会产生Type7 LSA的缺省路由。</p><p>注意：因为缺省路由只是在本NSSA区域内泛洪，并没有泛洪到整个OSPF域中，所以本NSSA区域内的路由器在找不到路由之后可以从该NSSA的ASBR出去，但不能实现其他OSPF域的路由从这个出口出去。Type7 LSA缺省路由不会在ABR上转换成Type5 LSA缺省路由泛洪到整个OSPF域。</p></blockquote><ul><li>Totally NSSA区域：</li></ul><blockquote><p>Totally NSSA的ABR会自动向该区域下发使用Type3 LSA描述的缺省路由，而Totally NSSA的ASBR则不会自动下发缺省路由。因此，在该场景下，对于区域内的路由器而言，可以通过ASBR引入的外部路由到达相应的外部网段、通过ABR下发的缺省路由到达其他网段。</p><p>如果希望Totally NSSA内的路由器选择ASBR作为默认出口，而不是ABR，那么需要让ASBR也下发缺省路由，此时必须在ASBR上手工执行配置。</p></blockquote><h3 id="将缺省路由通告到OSPF路由区域"><a href="#将缺省路由通告到OSPF路由区域" class="headerlink" title="将缺省路由通告到OSPF路由区域"></a>将缺省路由通告到OSPF路由区域</h3><p>1、将缺省路由通告到普通OSPF区域。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[Huawei-ospf<span class="hljs-number">-1</span>] <span class="hljs-keyword">default</span>-route-advertise [ [ <span class="hljs-keyword">always</span> | permit-calculate-other ] | <span class="hljs-keyword">cost</span> <span class="hljs-keyword">cost</span> | <span class="hljs-keyword">type</span> <span class="hljs-keyword">type</span> | route-<span class="hljs-keyword">policy</span> route-<span class="hljs-keyword">policy</span>-<span class="hljs-type">name</span> [ match-<span class="hljs-keyword">any</span> ] ]<br><br></code></pre></td></tr></table></figure><p>缺省情况下，在普通OSPF区域内的OSPF设备不产生缺省路由。</p><p>2、指定Type3 Summary-LSA的缺省开销值。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[Huawei-ospf<span class="hljs-number">-1</span>] <span class="hljs-keyword">default</span>-route-advertise <span class="hljs-keyword">summary</span> <span class="hljs-keyword">cost</span> <span class="hljs-keyword">cost</span><br><br></code></pre></td></tr></table></figure><h4 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h4><ul><li>import-route (OSPF)命令不能引入外部路由的缺省路由。当需要引入其他协议产生的缺省路由时，必须在ASBR上配置default-route-advertise命令，发布缺省路由到整个普通OSPF区域。</li><li>OSPF路由域中在通告缺省路由前，会比较缺省路由的优先级。如果在某OSPF设备上同时配置了静态缺省路由，要使OSPF通告的缺省路由加入到当前的路由表中，则必须保证所配置的静态缺省路由的优先级比OSPF通告的缺省路由的优先级低。</li></ul><h4 id="命令说明："><a href="#命令说明：" class="headerlink" title="命令说明："></a>命令说明：</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[Huawei-ospf<span class="hljs-number">-1</span>] <span class="hljs-keyword">default</span>-route-advertise [ [ <span class="hljs-keyword">always</span> | permit-calculate-other ] | <span class="hljs-keyword">cost</span> <span class="hljs-keyword">cost</span> | <span class="hljs-keyword">type</span> <span class="hljs-keyword">type</span> | route-<span class="hljs-keyword">policy</span> route-<span class="hljs-keyword">policy</span>-<span class="hljs-type">name</span> [ match-<span class="hljs-keyword">any</span> ] ]<br><br></code></pre></td></tr></table></figure><ul><li>always：无论本机是否存在激活的非本OSPF缺省路由，都会产生并发布一个描述缺省路由的LSA。</li></ul><blockquote><p>如果配置了always参数，设备不再计算来自其他设备的缺省路由。</p><p>如果没有配置always参数，本机路由表中必须有激活的非本OSPF缺省路由时才生成缺省路由的LSA。</p></blockquote><ul><li>permit-calculate-other：本机必须存在激活的非本OSPF缺省路由时才会产生并发布一个缺省路由的LSA，且设备仍然计算来自于其他设备的缺省路由。</li><li>type type：指定外部路由的类型。整数形式，取值为1或2，缺省值是2。</li></ul><blockquote><p>值为1：第一类外部路由</p><p>值为2：第二类外部路由</p></blockquote><ul><li>route-policy route-policy-name：通过路由策略，实现在路由表中有匹配的非OSPF产生的缺省路由表项时，按路由策略所配置的参数发布缺省路由。字符串形式，区分大小写，不支持空格，长度范围是1～40。当输入的字符串两端使用双引号时，可在字符串中输入空格。</li><li>match-any：通过路由策略，实现在路由表中有匹配的路由表项时，按路由策略所配置的参数发布缺省路由。</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[Huawei-ospf<span class="hljs-number">-1</span>] <span class="hljs-keyword">default</span>-route-advertise <span class="hljs-keyword">summary</span> <span class="hljs-keyword">cost</span> <span class="hljs-keyword">cost</span><br><br></code></pre></td></tr></table></figure><ul><li>summary：发布指定缺省路由的Type3 LSA。在选用该参数时，必须首先使能VPN，否则路由不能发布。</li><li>cost cost：指定该LSA的开销值。整数形式，取值范围是0～16777214。缺省值是1。</li></ul><p><strong>其他说明：</strong></p><ul><li>always参数：</li></ul><blockquote><p>ASBR已经有缺省路由，执行default-route-advertise命令，将在整个OSPF区域中通告缺省路由0.0.0.0。</p><p>ASBR没有缺省路由，执行default-route-advertise命令时按照以下需求选择是否配置always参数。</p><p>如果配置always参数，无论ASBR是否有缺省路由都将在整个OSPF区域中通告缺省路由0.0.0.0，并且不再计算来自其他设备的缺省路由。</p><p>如果没有配置always参数，ASBR的路由表中必须有激活的非OSPF（BGP除外）缺省路由时才生成缺省路由的LSA。</p></blockquote><ul><li>match-any参数：</li></ul><blockquote><p>使用带match-any参数的路由策略时，如果有多条路由通过策略，选取最优者来生成缺省LSA。路由通过策略时，选取最优者的原则按照优先级从高到低的顺序如下：</p><p>路由设置了type的优先于未设置的，如果都设置了type，值越小越优先。</p><p>路由设置了cost的优先于未设置的，如果都设置了cost，值越小越优先。</p><p>路由设置了tag的优先于未设置的， 如果都设置了tag，值越小越优先。</p></blockquote><h2 id="路由聚合"><a href="#路由聚合" class="headerlink" title="路由聚合"></a>路由聚合</h2><p><strong>背景信息</strong></p><p>当OSPF网络规模较大时，配置路由聚合，可以有效减少路由表中的条目，减小对系统资源的占用，不影响系统的性能。此外，如果被聚合的IP地址范围内的某条链路频繁Up和Down，该变化并不会通告到被聚合的IP地址范围外的设备。因此，可以避免网络中的路由震荡，在一定程度上提高了网络的稳定性。</p><p>ABR向其它区域发送路由信息时，以网段为单位生成Type3 LSA。当区域中存在连续的网段（具有相同前缀的路由信息）时，可以通过abr-summary命令将这些网段聚合成一个网段，ABR向其他区域只发送一条聚合后的LSA，所有指定的聚合网段范围的LSA将不会再被单独发送。从而减小路由表的规模，提高交换机的性能。</p><p>请在运行OSPF协议的交换机上进行以下配置。</p><ul><li><strong>配置ABR路由聚合</strong></li></ul><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs smali">1、执行命令system-view，进入系统视图。<br>2、执行命令ospf [ process-id ]，进入OSPF进程视图。<br>3、执行命令area area-id，进入OSPF区域视图。<br>4、执行命令<br>abr-summary ip-address mask [ [ cost &#123; cost | inherit-minimum &#125; | [ advertise [ generate-null0-route ] |<span class="hljs-built_in"> not-advertise </span>| generate-null0-route [ advertise ] ] ] * ]<br>配置OSPF的ABR路由聚合。<br><br></code></pre></td></tr></table></figure><ul><li><strong>配置ASBR路由聚合</strong></li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">执行命令<span class="hljs-keyword">system</span>-<span class="hljs-keyword">view</span>，进入系统视图。<br><br>执行命令ospf [ process-id ]，进入OSPF进程视图。<br><br>（可选）执行命令<br>asbr-<span class="hljs-keyword">summary</span> <span class="hljs-keyword">type</span> nssa-trans-<span class="hljs-keyword">type</span>-reference [ <span class="hljs-keyword">cost</span> nssa-trans-<span class="hljs-keyword">cost</span>-reference ]，<br>配置OSPF设置聚合路由类型（<span class="hljs-keyword">Type</span>）和开销值（<span class="hljs-keyword">Cost</span>）时考虑Type7转换到Type5的LSA。<br><br>缺省情况下，OSPF在设置聚合路由类型和开销时不考虑Type7转换到Type5的LSA。<br><br>执行命令<br>asbr-<span class="hljs-keyword">summary</span> ip-address mask [ <span class="hljs-keyword">not</span>-advertise | tag tag | <span class="hljs-keyword">cost</span> <span class="hljs-keyword">cost</span> | distribute-delay <span class="hljs-type">interval</span> ] *，<br>配置OSPF的ASBR路由聚合。<br><br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>在配置路由聚合后，本地OSPF设备的路由表保持不变。但是其他OSPF设备的路由表中将只有一条聚合路由，没有具体路由。直到网络中被聚合的路由都出现故障而消失时，该聚合路由才会消失。</p><h2 id="对发送的LSA进行过滤"><a href="#对发送的LSA进行过滤" class="headerlink" title="对发送的LSA进行过滤"></a>对发送的LSA进行过滤</h2><ul><li>当两台路由器之间存在多条链路时，可以在某些链路上通过对发送的LSA进行过滤，减少不必要的重传，节省带宽资源。</li><li>通过对OSPF接口出方向的LSA进行过滤可以不向邻居发送无用的LSA，从而减少邻居LSDB的大小，提高网络收敛速度。</li></ul><p>注意：OSPF是链路状态动态路由协议，互相不直接发送路由，无法通过路由策略等工具进行过滤发送路由。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">配置对OSPF接口出方向的LSA进行过滤：<br><br></code></pre></td></tr></table></figure><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fortran">[Huawei-GigabitEthernet0/<span class="hljs-number">0</span>/<span class="hljs-number">1</span>] ospf filter-lsa-<span class="hljs-keyword">out</span> &#123; <span class="hljs-built_in">all</span> | &#123; summary [ acl &#123; acl-<span class="hljs-keyword">number</span> | acl-<span class="hljs-keyword">name</span> &#125; ] | ase [ acl &#123; acl-<span class="hljs-keyword">number</span> | acl-<span class="hljs-keyword">name</span> &#125; ] | nssa [ acl &#123; acl-<span class="hljs-keyword">number</span> | acl-<span class="hljs-keyword">name</span> &#125; ] &#125; &#125;<br><br></code></pre></td></tr></table></figure><p>对于已经发送的LSA，要到3600秒才能达到老化时间。</p><h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fortran">[Huawei-GigabitEthernet0/<span class="hljs-number">0</span>/<span class="hljs-number">1</span>] ospf filter-lsa-<span class="hljs-keyword">out</span> &#123; <span class="hljs-built_in">all</span> | &#123; summary [ acl &#123; acl-<span class="hljs-keyword">number</span> | acl-<span class="hljs-keyword">name</span> &#125; ] | ase [ acl &#123; acl-<span class="hljs-keyword">number</span> | acl-<span class="hljs-keyword">name</span> &#125; ] | nssa [ acl &#123; acl-<span class="hljs-keyword">number</span> | acl-<span class="hljs-keyword">name</span> &#125; ] &#125; &#125;<br><br></code></pre></td></tr></table></figure><p>all：对除Grace LSA外的所有LSA进行过滤。</p><p>summary：对Network Summary LSA（Type3 LSA）进行过滤。</p><p>ase：对AS External LSA（Type5 LSA）进行过滤。</p><p>nssa：对NSSA LSA（Type7 LSA）进行过滤。</p><p>acl acl-number：指定基本访问控制列表编号。整数形式，取值范围是2000～2999。</p><p>acl acl-name：指定访问控制列表名称。字符串形式，不支持空格，区分大小写，长度范围是1～32，以英文字母a～z或A～Z开始。</p><h3 id="对ABR-Type3-LSA进行过滤"><a href="#对ABR-Type3-LSA进行过滤" class="headerlink" title="对ABR Type3 LSA进行过滤"></a>对ABR Type3 LSA进行过滤</h3><ul><li>对区域内出、入方向ABR Type3 LSA（Summary LSA）设置过滤条件，只有通过过滤的LSA才能被发布和接收。</li><li>通过对区域内的LSA进行过滤可以不向邻居发送无用的LSA，从而减少LSDB的大小，提高网络收敛速度。</li></ul><p> 配置对区域内出方向的Type3 LSA进行过滤：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[Huawei-ospf<span class="hljs-number">-1</span>-area<span class="hljs-number">-0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>] <span class="hljs-keyword">filter</span> &#123; acl-number | acl-<span class="hljs-type">name</span> acl-<span class="hljs-type">name</span> | ip-prefix ip-prefix-<span class="hljs-type">name</span> | route-<span class="hljs-keyword">policy</span> route-<span class="hljs-keyword">policy</span>-<span class="hljs-type">name</span> &#125; export<br><br></code></pre></td></tr></table></figure><p>配置对区域内入方向的Type3 LSA进行过滤：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[Huawei-ospf<span class="hljs-number">-1</span>-area<span class="hljs-number">-0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>] <span class="hljs-keyword">filter</span> &#123; acl-number | acl-<span class="hljs-type">name</span> acl-<span class="hljs-type">name</span> | ip-prefix ip-prefix-<span class="hljs-type">name</span> | route-<span class="hljs-keyword">policy</span> route-<span class="hljs-keyword">policy</span>-<span class="hljs-type">name</span> &#125; <span class="hljs-keyword">import</span><br><br></code></pre></td></tr></table></figure><h4 id="命令-1"><a href="#命令-1" class="headerlink" title="命令"></a>命令</h4><p>[Huawei-ospf-1-area-0.0.0.1] filter { acl-number | acl-name acl-name | ip-prefix ip-prefix-name | route-policy route-policy-name } export</p><p>acl-number：指定基本访问控制列表号。整数形式，取值范围是2000～2999。</p><h4 id="使能Mesh-Group特性"><a href="#使能Mesh-Group特性" class="headerlink" title="使能Mesh-Group特性"></a>使能Mesh-Group特性</h4><p><strong>背景信息</strong></p><p>当交换机和邻居存在并行链路时，使能Mesh-Group特性，可以减轻链路的压力。</p><p>Mesh-Group时以邻居的Router-id唯一标识一个Group。是几条并行的LSA，合并为一个组，只泛洪一次。只有同时满足以下三个条件的接口才能属于同一个Mesh-Group：</p><ul><li>属于相同区域和OSPF进程</li><li>接口状态大于Exchange</li><li>只连着同一个邻居</li></ul><p>请在运行OSPF协议的交换机上进行以下配置。</p><h4 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol><li><p>执行命令system-view，进入系统视图。</p></li><li><p>执行命令ospf [ </p><p><em>process-id</em></p><p> ]，进入OSPF进程视图。</p></li><li><p>执行命令mesh-group enable，使能Mesh-Group特性。</p></li></ol><h2 id="OSPF-Database-Overflow概述（数据库溢出）"><a href="#OSPF-Database-Overflow概述（数据库溢出）" class="headerlink" title="OSPF Database Overflow概述（数据库溢出）"></a>OSPF Database Overflow概述（数据库溢出）</h2><ul><li>OSPF要求同一个区域中的路由器保存相同的LSDB。随着网络上路由数量不断增加，一些路由器由于系统资源有限，不能再承载如此多的路由信息，这种状态就被称为数据库超限（OSPF Database Overflow）。</li><li>对于路由信息不断增加导致路由器系统资源耗尽而失效的问题，可以通过配置Stub或NSSA区域来解决，<strong>但Stub或NSSA区域的方案不能解决动态路由增长导致的数据库超限问题</strong>。为了解决数据库超限引发的问题，通过设置LSDB中External LSA的最大条目数，可以动态限制数据库的规模。（特殊区域只会限制生成路由条目，但不会限制接收LSA）</li></ul><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs delphi">设置OSPF的LSDB中<span class="hljs-keyword">External</span> LSA的最大条目数：<br><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[Huawei-ospf-1]</span> lsdb-<span class="hljs-attribute">overflow</span>-limit number<br><br></code></pre></td></tr></table></figure><p>当OSPF引入的外部路由（Type5 LSA和Type7 LSA）数量超过允许的范围，会导致超出的外部路由无法得到正常处理，丢失引入的路由。为了解决上述问题，通过配置OSPF的LSDB中External LSA的最大条目数，保证引入的外部路由在一个合理的范围内，调整和优化OSPF网络。</p><p>命令：[Huawei-ospf-1] lsdb-overflow-limit number</p><p>number：指定LSDB中External LSA的最大条目数。整数形式，取值范围是1～1000000。</p><h3 id="避免OSPF-Database-Overflow工作原理"><a href="#避免OSPF-Database-Overflow工作原理" class="headerlink" title="避免OSPF Database Overflow工作原理"></a>避免OSPF Database Overflow工作原理</h3><ul><li>为了避免数据库超限，可以设置路由器上非缺省外部路由数量的上限。</li><li>OSPF网络中所有路由器都配置相同的上限值，只要路由器上外部路由的数量达到该上限，路由器就进入Overflow状态，并同时启动Overflow状态定时器（默认超时时间为5秒），路由器在定时器超过5秒后自动退出Overflow状态。<img src="https://s3.bmp.ovh/imgs/2022/12/31/741d4f6a6e8e83cb.png" srcset="/img/loading.gif" lazyload></li></ul><h2 id="路由控制配置案例"><a href="#路由控制配置案例" class="headerlink" title="路由控制配置案例"></a>路由控制配置案例</h2><h3 id="OSPF路由控制配置举例-过滤LSA3，发送默认路由"><a href="#OSPF路由控制配置举例-过滤LSA3，发送默认路由" class="headerlink" title="OSPF路由控制配置举例(过滤LSA3，发送默认路由)"></a>OSPF路由控制配置举例(过滤LSA3，发送默认路由)</h3><p><img src="https://s3.bmp.ovh/imgs/2022/12/31/8b9eec40783d83a7.png" srcset="/img/loading.gif" lazyload></p><ul><li>如图所示，为减少R3的LSA数量，同时确保R3可以和其它区域内的路由器正常通行，要求：</li></ul><blockquote><p>R2不向Area1中注入Type3 LSA。</p><p>R2发布缺省路由。</p></blockquote><p>1、各设备配置接口地址及部署OSPF。（略）</p><p>2、配置R2过滤Type3 LSA。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs armasm">[<span class="hljs-built_in">R2</span>] acl <span class="hljs-number">2000</span><br>[<span class="hljs-built_in">R2</span>-acl-basic-<span class="hljs-number">2000</span>] rule deny <br>[<span class="hljs-built_in">R2</span>-acl-basic-<span class="hljs-number">2000</span>] quit<br>[<span class="hljs-built_in">R2</span>] ospf<br>[<span class="hljs-built_in">R2</span>-ospf-<span class="hljs-number">1</span>] <span class="hljs-meta">area</span> <span class="hljs-number">1</span><br>[<span class="hljs-built_in">R2</span>-ospf-<span class="hljs-number">1</span>-<span class="hljs-meta">area</span>-<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>] filter <span class="hljs-number">2000</span> <span class="hljs-meta">import</span><br><br></code></pre></td></tr></table></figure><p>PS：本质上和配置Stub区域没啥区别。</p><p><img src="https://s3.bmp.ovh/imgs/2022/12/31/8b9eec40783d83a7.png" srcset="/img/loading.gif" lazyload></p><h4 id="验证配置"><a href="#验证配置" class="headerlink" title="验证配置"></a>验证配置</h4><p>1、查看R3的LSDB。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dns">[R3]display ospf lsdb<br> OSPF Process <span class="hljs-number">1</span> with Router ID <span class="hljs-number">10.1.23.3</span><br> Link State Database <br>         Area: <span class="hljs-number">0.0.0.1</span><br> Type LinkState ID AdvRouterAge  Len  Sequence   Metric<br> Router <span class="hljs-number">10.1.23.3</span>       <span class="hljs-number">10.1.23.3</span> <span class="hljs-number">731</span>  <span class="hljs-number">48</span>    <span class="hljs-number">80000004</span>       <span class="hljs-number">1</span><br> Router  <span class="hljs-number">10.1.12.2</span>       <span class="hljs-number">10.1.12.2</span><span class="hljs-number">406</span>  <span class="hljs-number">36</span>    <span class="hljs-number">80000008</span>       <span class="hljs-number">1</span><br> Network <span class="hljs-number">10.1.23.2</span>       <span class="hljs-number">10.1.12.2</span><span class="hljs-number">730</span>  <span class="hljs-number">32</span>    <span class="hljs-number">80000002</span>       <span class="hljs-number">0</span><br> <br>               AS External Database<br> Type      LinkState ID AdvRouterAge  Len  Sequence   Metric<br> External  <span class="hljs-number">0.0.0.0</span>         <span class="hljs-number">10.1.12.2</span><span class="hljs-number">406</span>  <span class="hljs-number">36</span>   <span class="hljs-number">80000001</span>       <span class="hljs-number">1</span><br> <br>可以看到Area1内设备R3的LSDB中没有Type3 LSA，但是有Type5缺省LSA。<br>R3可以通过缺省路由访问其他区域设备。<br><br></code></pre></td></tr></table></figure><p>2、查看R3的路由表。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">[R3]dis ip routing-table <br><span class="hljs-section">Route Flags: R - relay, D - download to fib</span><br><span class="hljs-section">-----------------------------------------------------------------------------------------</span><br>Routing Tables: Public<br><span class="hljs-code">         Destinations : 9        Routes : 9        </span><br>Destination/Mask    Proto    Pre  CostFlags NextHop     Interface<br>0.0.0.0/0       O_ASE    150   1D     10.1.23.2   GigabitEthernet0/0/1<br>……<br><br></code></pre></td></tr></table></figure><h3 id="OSPF路由控制案例分析（通过Cost值控制路由）"><a href="#OSPF路由控制案例分析（通过Cost值控制路由）" class="headerlink" title="OSPF路由控制案例分析（通过Cost值控制路由）"></a>OSPF路由控制案例分析（通过Cost值控制路由）</h3><p><img src="https://s3.bmp.ovh/imgs/2022/12/31/cc466417575073a0.png" srcset="/img/loading.gif" lazyload></p><ul><li><strong>网络部署：</strong></li></ul><blockquote><p>某企业网络内有财务部和市场部两张网络。</p><p>该企业网络通过OSPF实现内部网络的互联互通，其中骨干网络部署在Area0，财务部网络客户端部署在Area1，市场部网络客户端部署在Area2。</p><p>边界设备通过静态路由访问各部门服务器，并在OSPF进程内引入该静态路由。</p></blockquote><ul><li>**财务部数据转发需求： **</li></ul><blockquote><p>只要边界-1路由器及其上联链路正常运行，财务部数据流就只会通过边界-1路由器进行数据转发。</p><p>只要核心-1路由器及其上联链路正常运行，财务部数据流就只会通过核心-1路由器进行数据转发。</p></blockquote><ul><li><strong>市场部数据转发需求：（忽略）</strong></li></ul><blockquote><p>只要边界-2路由器及其上联链路正常运行，市场部数据流就只会通过边界-2路由器进行数据转发。</p><p>只要核心-2路由器及其上联链路正常运行，市场部数据流就只会通过核心-2路由器进行数据转发。</p></blockquote><h4 id="控制流量出口（外部路由）"><a href="#控制流量出口（外部路由）" class="headerlink" title="控制流量出口（外部路由）"></a>控制流量出口（外部路由）</h4><p><img src="https://s3.bmp.ovh/imgs/2022/12/31/66b4f4603dbdf548.png" srcset="/img/loading.gif" lazyload></p><ul><li><strong>实现方式：</strong></li></ul><blockquote><p>在R1（边界-1）和R2（边界-2）的OSPF进程内引入去往财务部服务器的静态路由，实现出口备份（可以通过路由策略实现）；</p><p>设置引入外部路由类型为Type2；</p><p>在R1上设置外部路由开销为100，在R2上设置外部路由开销为200。</p></blockquote><ul><li>配置结果：</li></ul><blockquote><p>网络中存在2条同一网段不同开销的Type2外部路由时，网络设备会优选开销较小的路由。此时，网络中各设备会优选R1作为出口。</p></blockquote><p>控制流量出口时，不考虑到达各ASBR的内部路径开销。</p><p>Type2 外部路由在内部传递时，不累加Cost值</p><h3 id="控制内部路径：调整汇聚到核心开销"><a href="#控制内部路径：调整汇聚到核心开销" class="headerlink" title="控制内部路径：调整汇聚到核心开销"></a>控制内部路径：调整汇聚到核心开销</h3><p><img src="https://s3.bmp.ovh/imgs/2022/12/31/9cb09ec6210fe5d3.png" srcset="/img/loading.gif" lazyload></p><ul><li>若S1与R1间链路故障，由于S1运行正常，则要求S3优选路径1，次选路径2。</li><li>实现方式：</li></ul><blockquote><p>路径1-Cost &lt; 路径2-Cost，即：</p></blockquote><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm">[Cost(<span class="hljs-built_in">S3</span>-<span class="hljs-built_in">S1</span>) + Cost(<span class="hljs-built_in">S1</span>-<span class="hljs-built_in">S2</span>) + Cost(<span class="hljs-built_in">S2</span>-<span class="hljs-built_in">R1</span>)] &lt; [Cost(<span class="hljs-built_in">S3</span>-<span class="hljs-built_in">S2</span>) + Cost(<span class="hljs-built_in">S2</span>-<span class="hljs-built_in">R1</span>)]<br><br></code></pre></td></tr></table></figure><blockquote><p>通过调整汇聚到核心设备间的路径开销可以实现路径1。</p></blockquote><h3 id="控制内部路径：调整核心到边界开销"><a href="#控制内部路径：调整核心到边界开销" class="headerlink" title="控制内部路径：调整核心到边界开销"></a>控制内部路径：调整核心到边界开销</h3><p><img src="https://s3.bmp.ovh/imgs/2022/12/31/791faad82d56041d.png" srcset="/img/loading.gif" lazyload></p><ul><li>若S3与S1间链路故障，由于S1运行正常，则要求S3优选路径1，次选路径2。</li><li>实现方式：</li></ul><blockquote><p>路径1-Cost &lt; 路径2-Cost，即：</p></blockquote><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm">[Cost(<span class="hljs-built_in">S3</span>-<span class="hljs-built_in">S2</span>) + Cost(<span class="hljs-built_in">S2</span>-<span class="hljs-built_in">S1</span>) + Cost(<span class="hljs-built_in">S1</span>-<span class="hljs-built_in">R1</span>)] &lt; [Cost(<span class="hljs-built_in">S3</span>-<span class="hljs-built_in">S2</span>) + Cost(<span class="hljs-built_in">S2</span>-<span class="hljs-built_in">R1</span>)]<br><br></code></pre></td></tr></table></figure><blockquote><p>通过调整核心到边界设备间的路径开销可以实现优选路径1。</p></blockquote><h3 id="OSPF路由控制案例主要配置-引入外部路由-R1"><a href="#OSPF路由控制案例主要配置-引入外部路由-R1" class="headerlink" title="OSPF路由控制案例主要配置 (引入外部路由-R1)"></a>OSPF路由控制案例主要配置 (引入外部路由-R1)</h3><p><img src="https://s3.bmp.ovh/imgs/2022/12/31/83ac07a2c2399ab7.png" srcset="/img/loading.gif" lazyload></p><blockquote><p>R1部署路由策略应用开销值100：</p></blockquote><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs smali">[R1] acl 2000<br>[R1-acl-basic-2000] rule permit source 192.168.10.0 0.0.0.255<br>[R1-acl-basic-2000] quit<br><br>[R1] route-policy<span class="hljs-keyword"> static</span>2ospf permit node 10<br>[R1-route-policy]<span class="hljs-built_in"> if-match </span>acl 2000<br>[R1-route-policy] apply cost 100<br>[R1-route-policy] quit<br>[R1] route-policy<span class="hljs-keyword"> static</span>2ospf permit node 20<br>[R1-route-policy] quit<br><br></code></pre></td></tr></table></figure><p>R1在OSPF进程中引入静态路由：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[R1]</span> ospf<br><span class="hljs-string">[R1-ospf-1]</span> <span class="hljs-keyword">import</span>-route static route-policy static2ospf type <span class="hljs-number">2</span><br><br></code></pre></td></tr></table></figure><h3 id="OSPF路由控制案例主要配置-引入外部路由-R2"><a href="#OSPF路由控制案例主要配置-引入外部路由-R2" class="headerlink" title="OSPF路由控制案例主要配置 (引入外部路由-R2)"></a>OSPF路由控制案例主要配置 (引入外部路由-R2)</h3><p><img src="https://s3.bmp.ovh/imgs/2022/12/31/83ac07a2c2399ab7.png" srcset="/img/loading.gif" lazyload></p><ul><li>R2部署路由策略应用开销值200：</li></ul><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs smali">[R2] acl 2000<br>[R2-acl-basic-2000] rule permit source 192.168.10.0 0.0.0.255<br>[R2-acl-basic-2000] quit<br><br>[R2] route-policy<span class="hljs-keyword"> static</span>2ospf permit node 10<br>[R2-route-policy]<span class="hljs-built_in"> if-match </span>acl 2000<br>[R2-route-policy] apply cost 200<br>[R2-route-policy] quit<br>[R2] route-policy<span class="hljs-keyword"> static</span>2ospf permit node 20<br>[R2-route-policy] quit<br><br></code></pre></td></tr></table></figure><p>R2在OSPF进程中引入静态路由：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[R2]</span> ospf<br><span class="hljs-string">[R2-ospf-1]</span> <span class="hljs-keyword">import</span>-route static route-policy static2ospf type <span class="hljs-number">2</span><br><br></code></pre></td></tr></table></figure><h3 id="OSPF路由控制案例主要配置-内部路由Cost"><a href="#OSPF路由控制案例主要配置-内部路由Cost" class="headerlink" title="OSPF路由控制案例主要配置 (内部路由Cost)"></a>OSPF路由控制案例主要配置 (内部路由Cost)</h3><p><img src="https://s3.bmp.ovh/imgs/2022/12/31/0d566c105630c8a9.png" srcset="/img/loading.gif" lazyload></p><p>设置接口OSPF开销（以R1的GE0&#x2F;0&#x2F;1口为例）：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[R1] <span class="hljs-keyword">interface</span> GigabitEthernet <span class="hljs-number">0</span><span class="hljs-regexp">/0/</span><span class="hljs-number">1</span><br>[R1-GigabitEthernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">1</span>] ospf cost <span class="hljs-number">50</span><br><br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p> <a href="https://support.huawei.com/enterprise/zh/doc/EDOC1000141374/b48f063">控制OSPF的路由信息</a></p><p> <a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/OSPF.html">什么是OSPF？</a></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/DNS_recursive_Server/">建立自有递归DNS服务器</a></li><li><a href="https://songxwn.com/zabbix_data/">Zabbix：历史数据与趋势数据</a></li><li><a href="https://songxwn.com/ospf-route-FA/">HCIE Datacom-01.3 IGP高级特性-OSPF-其他特性</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>ospf</tag>
      
      <tag>datacom</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HCIE Datacom-01.1 IGP高级特性-OSPF-快速收敛</title>
    <link href="/ospf-frr/"/>
    <url>/ospf-frr/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ul><li>OSPF和IS-IS都是基于链路状态的内部网关路由协议，运行这两种协议的路由器通过同步LSDB，采用SPF算法计算最优路由。</li><li>当网络拓扑发生变化时，OSPF和IS-IS支持多种快速收敛和保护机制，能够降低网络故障导致的流量丢失。</li><li>为了实现对路由表规模的控制，OSPF和IS-IS支持路由选路及路由信息的控制，能够减少特定路由器路由表的大小。</li><li>本系列文章将介绍OSPF和IS-IS的高级特性，包括：快速收敛机制、路由控制、其他特性等。</li><li>此文章参考于华为认证系列PPT。</li></ul><h1 id="OSPF快速收敛概述"><a href="#OSPF快速收敛概述" class="headerlink" title="OSPF快速收敛概述"></a>OSPF快速收敛概述</h1><ul><li>OSPF快速收敛是为了提高路由的收敛速度而做的扩展特性，包括：PRC（Partial Route Calculation，部分路由计算）和智能定时器。</li><li>同时，OSPF支持故障恢复快速收敛，例如通过OSPF IP FRR（Fast ReRoute，快速重路由）实现备份链路的快速切换，也可以与BFD联动实现对故障的快速感知。</li><li>快速收敛是为了满载电信级的要求，50ms内完成收敛减少丢包。</li></ul><span id="more"></span><h2 id="PRC（Partial-Route-Calculate，部分路由计算算法）"><a href="#PRC（Partial-Route-Calculate，部分路由计算算法）" class="headerlink" title="PRC（Partial Route Calculate，部分路由计算算法）"></a>PRC（Partial Route Calculate，部分路由计算算法）</h2><ul><li>PRC的工作原理：当网络上路由发生变化的时候，只对发生变化的路由进行重新计算。</li><li>PRC不计算节点路径，而是根据SPF算法算出来的最短路径树来更新路由。</li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/12/24/23783227cc19ec7a.png" srcset="/img/loading.gif" lazyload></p><p>在路由计算中，节点代表路由器，叶子代表路由，PRC只处理变化的叶子信息。</p><ul><li>场景介绍：</li></ul><ol><li>某网络运行OSPF，网络收敛后，左图是以R1为根的最短路径树。此时R1访问节点R5时，通过[R1下行链路的出接口，R3上行链路接口的IP地址]到达该目的地。</li><li>R5将环回口Loopback0开启OSPF，即OSPF网络内有新增网段。</li></ol><ul><li>PRC计算：</li></ul><ol><li>R5全网泛洪新增LSA。</li><li>R1收到该LSA后会创建新的路由，继承原有访问节点R5的路径及下一跳，即最短路径树不变，只在节点R5上新增叶子。</li><li>因此R1访问R5的Loopback0时，通过[R1下行链路的出接口，R3上行链路接口的IP地址]到达该目的地。</li></ol><ul><li>价值：</li></ul><blockquote><p>OSPF网络新增网段时，只关注发生变化的路由，加快了路由的计算。</p></blockquote><p>注意：大部分现代网络设备都默认开启此功能。此功能也依赖于I-SPF算法，ISIS也会默认开启。</p><h2 id="智能定时器（Intelligent-Timer）"><a href="#智能定时器（Intelligent-Timer）" class="headerlink" title="智能定时器（Intelligent Timer）"></a>智能定时器（Intelligent Timer）</h2><ul><li>智能定时器是在进行SPF计算和产生LSA的时候用到的一种定时器。</li><li>智能定时器既可以对少量的外界突发事件进行快速响应，又可以避免过度地占用CPU。</li></ul><h3 id="控制LSA的生成与接收"><a href="#控制LSA的生成与接收" class="headerlink" title="控制LSA的生成与接收"></a>控制LSA的生成与接收</h3><ul><li>OSPF通过如下两个规定来避免网络连接或者路由频繁动荡引起的过多占用设备资源的情况。</li></ul><blockquote><p>同一条LSA在1秒内不能再次生成，即LSA的更新时间间隔5秒。</p><p>LSA被接收的时间间隔为1秒。</p></blockquote><ul><li>在网络相对稳定、对路由收敛时间要求较高的组网环境中，可以通过智能定时器指定LSA的更新时间间隔为0来取消LSA的更新时间间隔，使得拓扑或者路由的变化可以立即通过LSA发布到网络中，或者立即被感知到，从而加快网络中路由的收敛速度。</li></ul><h3 id="控制路由计算"><a href="#控制路由计算" class="headerlink" title="控制路由计算"></a>控制路由计算</h3><ul><li>当网络发生变化时，OSPF的LSDB会发生改变，需要重新计算最短路径。如果网络频繁变化，由于不断地计算最短路径，会占用大量系统资源，影响设备的效率。</li><li>通过配置智能定时器，设置合理的SPF计算的间隔时间，可以避免占用过多的路由器内存和带宽资源。</li></ul><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><ul><li>如果触发路由计算的时间间隔较长，同样会影响网络的收敛速度。</li><li>智能定时器首次超时时间是一个固定的时间。如果在定时器超时前，又有触发定时器的事件发生，则该定时器下一次的超时时间会增加。</li><li>现代网络设备性能都比较强了，可以适当调小时间间隔。</li></ul><h3 id="配置命令"><a href="#配置命令" class="headerlink" title="配置命令"></a>配置命令</h3><h4 id="1、设置OSPF-LSA更新的时间间隔。"><a href="#1、设置OSPF-LSA更新的时间间隔。" class="headerlink" title="1、设置OSPF LSA更新的时间间隔。"></a>1、设置OSPF LSA更新的时间间隔。</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[Huawei-ospf-1]</span> lsa-originate-<span class="hljs-built_in">int</span>erval &#123; <span class="hljs-number">0</span> | &#123; <span class="hljs-built_in">int</span>elligent-timer max-<span class="hljs-built_in">int</span>erval start-<span class="hljs-built_in">int</span>erval hold-<span class="hljs-built_in">int</span>erval | other-type <span class="hljs-built_in">int</span>erval &#125; &#125;<br><br></code></pre></td></tr></table></figure><p>缺省情况下，使能智能定时器intelligent-timer，更新LSA的最长间隔时间max-interval为5000毫秒、初始间隔时间start-interval为500毫秒、基数间隔时间hold-interval为1000毫秒。（以毫秒为单位的时间间隔）</p><h5 id="使用智能定时器后："><a href="#使用智能定时器后：" class="headerlink" title="使用智能定时器后："></a>使用智能定时器后：</h5><ol><li>初次更新LSA的间隔时间由start-interval参数指定。</li><li>第n（n≥2）次更新LSA的间隔时间为hold-interval×2(n-2)。</li><li>当hold-interval×2(n-2)达到指定的最长间隔时间max-interval时，OSPF连续三次更新LSA的时间间隔都是最长间隔时间，之后，再次返回步骤1，按照初始间隔时间start-interval更新LSA。</li></ol><h5 id="命令介绍："><a href="#命令介绍：" class="headerlink" title="命令介绍："></a>命令介绍：</h5><p>[Huawei-ospf] lsa-originate-interval { 0 | { intelligent-timer max-interval start-interval hold-interval | other-type interval } }</p><p>0：指定LSA更新的时间间隔为0，即取消LSA的5秒的更新时间间隔。</p><p>intelligent-timer：指定通过智能定时器设置OSPF Router LSA和Network LSA的更新间隔时间。</p><p>max-interval：指定更新OSPF LSA的最长间隔时间。整数形式，取值范围是1～120000，单位是毫秒。缺省值是5000。</p><p>start-interval：指定更新OSPF LSA的初始间隔时间。整数形式，取值范围是0～60000，单位是毫秒。缺省值是500。</p><p>hold-interval：指定更新OSPF LSA的基数间隔时间。整数形式，取值范围是1～60000，单位是毫秒。缺省值是1000。</p><p>other-type：指定设置除OSPF Router LSA和Network LSA外LSA的更新间隔时间。</p><p>interval：指定LSA更新的时间间隔。整数形式，取值范围是0～10，单位是秒。缺省值是5。</p><h4 id="2、设置OSPF-LSA接收的时间间隔。"><a href="#2、设置OSPF-LSA接收的时间间隔。" class="headerlink" title="2、设置OSPF LSA接收的时间间隔。"></a>2、设置OSPF LSA接收的时间间隔。</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[Huawei-ospf-1]</span> lsa-arrival-<span class="hljs-built_in">int</span>erval &#123; <span class="hljs-built_in">int</span>erval | <span class="hljs-built_in">int</span>elligent-timer max-<span class="hljs-built_in">int</span>erval start-<span class="hljs-built_in">int</span>erval hold-<span class="hljs-built_in">int</span>erval &#125;<br><br></code></pre></td></tr></table></figure><p>缺省情况下，使能智能定时器intelligent-timer，接收LSA的最长间隔时间max-interval为1000毫秒、初始间隔时间start-interval为500毫秒、基数间隔时间hold-interval为500毫秒。（以毫秒为单位的时间间隔）</p><h5 id="使用智能定时器后：-1"><a href="#使用智能定时器后：-1" class="headerlink" title="使用智能定时器后："></a>使用智能定时器后：</h5><p>初次接收LSA的间隔时间由start-interval参数指定。</p><p>第n（n≥2）次接收LSA的间隔时间为hold-interval×2(n-2)。</p><p>当hold-interval×2(n-2)达到指定的最长间隔时间max-interval时，OSPF连续三次接收LSA的时间间隔都是最长间隔时间，之后，再次返回步骤1，按照初始间隔时间start-interval接收LSA。</p><h5 id="命令："><a href="#命令：" class="headerlink" title="命令："></a>命令：</h5><p>[Huawei-ospf-1] lsa-arrival-interval { interval | intelligent-timer max-interval start-interval hold-interval }</p><p>interval：指定LSA接收的时间间隔。整数形式，取值范围是0～10000，单位是毫秒。</p><p>intelligent-timer：指定通过智能定时器设置LSA接收的间隔时间。</p><p>max-interval：指定接收OSPF LSA的最长间隔时间。整数形式，取值范围是1～120000，单位是毫秒。缺省值是1000。</p><p>start-interval：指定接收OSPF LSA的初始间隔时间。整数形式，取值范围是0～60000，单位是毫秒。缺省值是500。</p><p>hold-interval：指定接收OSPF LSA的基数间隔时间。整数形式，取值范围是1～60000，单位是毫秒。缺省值是500。</p><h4 id="3、设置OSPF路由计算时间间隔。"><a href="#3、设置OSPF路由计算时间间隔。" class="headerlink" title="3、设置OSPF路由计算时间间隔。"></a>3、设置OSPF路由计算时间间隔。</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[Huawei-ospf-1]</span> spf-schedule-<span class="hljs-built_in">int</span>erval &#123; <span class="hljs-built_in">int</span>erval1 | <span class="hljs-built_in">int</span>elligent-timer max-<span class="hljs-built_in">int</span>erval start-<span class="hljs-built_in">int</span>erval hold-<span class="hljs-built_in">int</span>erval | millisecond <span class="hljs-built_in">int</span>erval2 &#125;<br><br></code></pre></td></tr></table></figure><p>缺省情况下，使能智能定时器intelligent-timer，SPF计算的最长间隔时间max-interval为10000毫秒、初始间隔时间start-interval为500毫秒、基数间隔时间hold-interval为1000毫秒。（以毫秒为单位的时间间隔）。</p><h5 id="使用智能定时器后，SPF计算的时间间隔如下："><a href="#使用智能定时器后，SPF计算的时间间隔如下：" class="headerlink" title="使用智能定时器后，SPF计算的时间间隔如下："></a>使用智能定时器后，SPF计算的时间间隔如下：</h5><ol><li>初次计算SPF的间隔时间由start-interval参数指定。</li><li>第n（n≥2）次计算SPF的间隔时间为hold-interval×2(n-2)。</li><li>当hold-interval×2(n-2)达到指定的最长间隔时间max-interval时，OSPF连续三次计算SPF的时间间隔都是最长间隔时间，之后，再次返回步骤1，按照初始间隔时间start-interval计算SPF。</li></ol><h5 id="命令：-1"><a href="#命令：-1" class="headerlink" title="命令："></a>命令：</h5><p>[Huawei-ospf-1] spf-schedule-interval { interval1 | intelligent-timer max-interval start-interval hold-interval | millisecond interval2 }</p><p>interval1：指定OSPF SPF计算间隔时间。整数形式，取值范围是1～10，单位是秒。</p><p>intelligent-timer：指定通过智能定时器设置OSPF SPF计算的间隔时间。</p><p>max-interval：指定OSPF SPF计算的最长间隔时间。整数形式，取值范围是1～120000，单位是毫秒。缺省值是10000。</p><p>start-interval：指定OSPF SPF计算的初始间隔时间。整数形式，取值范围是1～60000，单位是毫秒。缺省值是500。</p><p>hold-interval：指定OSPF SPF计算的基数间隔时间。整数形式，取值范围是1～60000，单位是毫秒。缺省值是1000。</p><p>millisecond interval2：指定OSPF SPF计算间隔时间。整数形式，取值范围是1～10000，单位是毫秒。</p><h2 id="OSPF-IP-FRR（快速重路由）"><a href="#OSPF-IP-FRR（快速重路由）" class="headerlink" title="OSPF IP FRR（快速重路由）"></a>OSPF IP FRR（快速重路由）</h2><ul><li>OSPF IP FRR是动态IP FRR，利用LFA（Loop-Free Alternates）算法预先计算出备份路径，保存在转发表中，以备在故障时将流量快速切换到备份链路上，保证流量不中断，从而达到流量保护的目的，该功能可将故障恢复时间降低到50 ms以内。</li><li>LFA计算备份链路的基本思路是：</li></ul><blockquote><p>以可提供备份链路的邻居为根节点，利用SPF算法计算出到目的节点的最短距离。然后，按照不等式计算出开销最小且无环的备份链路。</p></blockquote><h3 id="OSPF-IP-FRR组网应用"><a href="#OSPF-IP-FRR组网应用" class="headerlink" title="OSPF IP FRR组网应用"></a>OSPF IP FRR组网应用</h3><ul><li>OSPF IP FRR的流量保护分为链路保护和节点链路双保护。</li><li>Distance_opt(X, Y) 是指节点X到Y之间的最短路径</li></ul><h5 id="链路保护"><a href="#链路保护" class="headerlink" title="链路保护"></a>链路保护</h5><p>链路保护公式：</p><pre><code class="hljs">Distance_opt(N,D)\&lt;Distance_opt(N,S)+Distance_opt(S,D)</code></pre><p>保证从节点N-&gt;D的流量不会再经过节点S，即保证没有环路。</p><p><img src="https://s3.bmp.ovh/imgs/2022/12/24/af6885ece9bcf07c.png" srcset="/img/loading.gif" lazyload></p><blockquote><p>S：流量转发的源节点</p><p>D：流量转发的目的节点</p><p>N：备份链路的节点</p></blockquote><ul><li>流量从设备S到D进行转发，网络开销值满足链路保护公式，可保证当主链路故障后，设备S将流量切换到备份链路S到N后可以继续向下游转发，确保流量中断小于50 ms。</li></ul><h5 id="节点链路双保护"><a href="#节点链路双保护" class="headerlink" title="节点链路双保护"></a>节点链路双保护</h5><p>链路保护公式：</p><pre><code class="hljs">Distance_opt(N,D)\&lt;Distance_opt(N,S)+Distance_opt(S,D)</code></pre><p>节点保护公式：</p><pre><code class="hljs">Distance_opt(N,D)\&lt;Distance_opt(N,E)+Distance_opt(E,D)</code></pre><p>保证从节点N-&gt;D的流量不会经过节点S和E，即保证没有环路。</p><p><img src="https://s3.bmp.ovh/imgs/2022/12/24/a2cfff0e1a26b333.png" srcset="/img/loading.gif" lazyload></p><ul><li>节点链路双保护必须同时满足以上两个公式。</li></ul><h5 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h5><ul><li>节点链路双保护：</li></ul><blockquote><p>如正文右图：流量从设备S到D进行转发，网络开销值满足节点链路保护公式，可保证当主链路故障后，设备S将流量切换到备份链路S到N后可以继续向下游转发，确保流量中断小于50 ms。</p></blockquote><ul><li>OSPF IP FRR的流量保护分为链路保护和节点链路双保护。</li></ul><blockquote><p>当需要保护的对象是经过特定链路的流量时，流量保护类型为链路保护。</p><p>当需要保护的对象是经过特定设备的流量时，流量保护类型为节点链路双保护。节点保护优先级高于链路保护。</p></blockquote><h3 id="配置命令-1"><a href="#配置命令-1" class="headerlink" title="配置命令"></a>配置命令</h3><ol><li>使能OSPF IP FRR。</li></ol><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[Huawei-ospf-1]</span> frr<br><span class="hljs-string">[Huawei-ospf-1-frr]</span><br><br></code></pre></td></tr></table></figure><p>创建并进入OSPF FRR视图。</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams">[Huawei-ospf<span class="hljs-number">-1</span>-frr] <span class="hljs-keyword">loop</span>-<span class="hljs-keyword">free</span>-alternate<br><br></code></pre></td></tr></table></figure><p>使能OSPF IP FRR功能，利用LFA算法计算备份下一跳和备份出接口。</p><p>2、（可选）阻止OSPF接口的FRR能力。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">[Huawei-GigabitEthernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">1</span>] ospf frr block<br><br></code></pre></td></tr></table></figure><p>对于承载重要业务的节点设备，通过该命令在指定接口上禁止OSPF IP FRR功能，从而使此接口相连的对端设备不成为备份链路上的节点设备，避免使能OSPF IP FRR功能后对节点设备上运行的重要业务造成影响。</p><h3 id="OSPF-IP-FRR配置举例"><a href="#OSPF-IP-FRR配置举例" class="headerlink" title="OSPF IP FRR配置举例"></a>OSPF IP FRR配置举例</h3><p>当R1与R3之间的链路出现故障时，R1转发的流量能够快速切换到备份链路，通过R2进行流量转发。</p><p>1、各设备配置接口地址及部署OSPF。（略）</p><p>2、配置各设备OSPF开销值。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[R1] <span class="hljs-keyword">interface</span> GigabitEthernet <span class="hljs-number">0</span><span class="hljs-regexp">/0/</span><span class="hljs-number">0</span><br>[R1-GigabitEthernet <span class="hljs-number">0</span><span class="hljs-regexp">/0/</span><span class="hljs-number">0</span>] ospf cost <span class="hljs-number">10</span><br>[R1-GigabitEthernet <span class="hljs-number">0</span><span class="hljs-regexp">/0/</span><span class="hljs-number">0</span>] quit<br>[R1] <span class="hljs-keyword">interface</span> GigabitEthernet <span class="hljs-number">0</span><span class="hljs-regexp">/0/</span><span class="hljs-number">1</span><br>[R1-GigabitEthernet <span class="hljs-number">0</span><span class="hljs-regexp">/0/</span><span class="hljs-number">1</span>] ospf cost <span class="hljs-number">10</span><br>[R1-GigabitEthernet <span class="hljs-number">0</span><span class="hljs-regexp">/0/</span><span class="hljs-number">1</span>] quit<br><br></code></pre></td></tr></table></figure><p>3、在R1上使能OSPF IP FRR。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">[<span class="hljs-built_in">R1</span>] ospf<br>[<span class="hljs-built_in">R1</span>-ospf-<span class="hljs-number">1</span>] frr<br>[<span class="hljs-built_in">R1</span>-ospf-<span class="hljs-number">1</span>-frr] <span class="hljs-keyword">loop</span>-free-alternate<br>[<span class="hljs-built_in">R1</span>-ospf-<span class="hljs-number">1</span>-frr] quit<br>[<span class="hljs-built_in">R1</span>-ospf-<span class="hljs-number">1</span>] quit<br><br><br></code></pre></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2022/12/24/d67d27ed5c815772.jpg" srcset="/img/loading.gif" lazyload><img src="https://s3.bmp.ovh/imgs/2022/12/24/5d37b0bb79811852.jpg" srcset="/img/loading.gif" lazyload></p><h3 id="查看OSPF-IP-FRR配置结果"><a href="#查看OSPF-IP-FRR配置结果" class="headerlink" title="查看OSPF IP FRR配置结果"></a>查看OSPF IP FRR配置结果</h3><p>查看R1到R4的GE0&#x2F;0&#x2F;1接口地址的路由信息。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ada">[R1]display ospf routing <span class="hljs-number">10.1</span>.<span class="hljs-number">34.4</span><br>       OSPF Process <span class="hljs-number">1</span> <span class="hljs-keyword">with</span> Router ID <span class="hljs-number">10.1</span>.<span class="hljs-number">1.1</span><br> Destination :    10.1.34.0/24       <br> AdverRouter :    10.1.4.4    <span class="hljs-type">Area</span> :      0.0.0.0  <br> Cost :           15    <span class="hljs-type">Type</span> :      <span class="hljs-type">Transit</span> <br> NextHop :        10.1.13.3   <span class="hljs-type">Interface</span> : <span class="hljs-type">GigabitEthernet0</span>/<span class="hljs-number">0</span>/<span class="hljs-number">0</span>  <br> Priority :       <span class="hljs-type">Low</span>   Age : 00<span class="hljs-type">h01m59s</span>  <br> Backup Nexthop : 10.1.12.2   <span class="hljs-type">Backup</span> <span class="hljs-keyword">Interface</span>:GigabitEthernet0/<span class="hljs-number">0</span>/<span class="hljs-number">1</span><br> Backup <span class="hljs-keyword">Type</span> <span class="hljs-type">:    </span>LFA LINK  <br><br><br></code></pre></td></tr></table></figure><p>注意看上面<strong>Backup Nexthop</strong>和<strong>Backup Type</strong>，由于R1使能了OSPF IP FRR功能，OSPF生成了一条备份链路。</p><p><img src="https://s3.bmp.ovh/imgs/2022/12/24/86fb3edf8ba9be03.jpg" srcset="/img/loading.gif" lazyload></p><h2 id="OSPF与BFD联动"><a href="#OSPF与BFD联动" class="headerlink" title="OSPF与BFD联动"></a>OSPF与BFD联动</h2><ul><li>网络上的链路故障或拓扑变化都会导致设备重新进行路由计算，所以缩短路由协议的收敛时间对于提高网络的性能是非常重要的。</li><li>OSPF与BFD联动就是将BFD和OSPF关联起来，一旦与邻居之间的链路出现故障，BFD对链路故障的快速感应能够加快OSPF对于网络拓扑变化的响应。</li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/12/24/e4f471f05c987460.jpg" srcset="/img/loading.gif" lazyload></p><ul><li>OSPF与BFD联动工作原理：</li></ul><blockquote><p>三台设备（R1、R2、R3）间建立OSPF邻居关系。邻居状态到达Full时通知BFD建立BFD会话。</p><p>R1到R2间的链路出现故障后，BFD首先感知到并通知R1。R1处理BFD会话Down事件，重新进行路由计算，新的路径为：R1-R3-R2。</p></blockquote><ul><li>OSPF通过周期性的向邻居发送Hello报文来实现邻居检测，检测到故障所需时间比较长，超过1秒钟（默认通过OSPF Dead Timer超时判断邻居失效，缺省为40秒）。随着科技的发展，语音、视频及其它点播业务应用广泛，而这些业务对于丢包和延时非常敏感，当数据达到吉比特速率级时，较长的检测时间会导致大量数据丢失，无法满足电信级网络高可靠性的需求。</li><li>为了解决上述问题，配置指定进程或指定接口的OSPF与BFD联动功能，可以快速检测链路的状态，故障检测时间可以达到毫秒级，提高链路状态变化时OSPF的收敛速度。</li></ul><h3 id="OSPF与BFD联动的基础配置命令"><a href="#OSPF与BFD联动的基础配置命令" class="headerlink" title="OSPF与BFD联动的基础配置命令"></a>OSPF与BFD联动的基础配置命令</h3><p>1、配置OSPF的BFD特性。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[Huawei-ospf-1]<span class="hljs-built_in"> bfd </span>all-interfaces <span class="hljs-built_in">enable</span><br><br></code></pre></td></tr></table></figure><p>在OSPF进程下使能BFD特性。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[Huawei-ospf-1]</span> bfd all-<span class="hljs-built_in">int</span>erfaces &#123; min-rx-<span class="hljs-built_in">int</span>erval receive-<span class="hljs-built_in">int</span>erval | min-tx-<span class="hljs-built_in">int</span>erval transmit-<span class="hljs-built_in">int</span>erval | detect-multiplier multiplier-value | frr-binding &#125; <br><br></code></pre></td></tr></table></figure><p>配置BFD会话的参数值。</p><p>2、配置指定接口的BFD特性。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[Huawei-GigabitEthernet0/0/1]<span class="hljs-built_in"> ospf bfd </span><span class="hljs-built_in">enable</span><br><br></code></pre></td></tr></table></figure><p>在使能OSPF的特定接口下使能BFD特性。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[Huawei-GigabitEthernet0/0/1]</span> ospf bfd &#123; min-rx-<span class="hljs-built_in">int</span>erval receive-<span class="hljs-built_in">int</span>erval | min-tx-<span class="hljs-built_in">int</span>erval transmit-<span class="hljs-built_in">int</span>erval | detect-multiplier multiplier-value | frr-binding &#125;<br><br></code></pre></td></tr></table></figure><p>在使能OSPF的特定接口下配置BFD会话的参数值。</p><ul><li>配置前提：</li></ul><blockquote><p>如果需要使用BFD功能快速检测链路故障，则必须在系统视图下执行bfd命令，使能全局BFD功能。</p></blockquote><ul><li>接口配置的BFD特性优先级高于进程配置的BFD特性优先级。如果打开了接口的BFD开关，则按照接口上BFD参数建立BFD会话。</li><li>可以配置OSPF IP FRR与BFD联动：</li></ul><blockquote><p>配置OSPF IP FRR特性时，需要底层能够快速响应链路变化，以便迅速将流量切换到备份链路。</p><p>将OSPF IP FRR与BFD会话绑定可以达到快速感知故障的目的，确保故障后流量切换的及时性。</p></blockquote><ul><li>命令：[Huawei-ospf-1] bfd all-interfaces { min-rx-interval receive-interval | min-tx-interval transmit-interval | detect-multiplier multiplier-value | frr-binding }</li></ul><p> </p><blockquote><p>min-rx-interval receive-interval：指定期望从对端接收BFD报文的最小接收间隔。整数形式，取值范围是10～2000，单位是毫秒。缺省值是1000毫秒。</p><p>min-tx-interval transmit-interval：指定向对端发送BFD报文的最小发送间隔。整数形式，取值范围是10～2000，单位是毫秒。缺省值是1000毫秒。</p><p>detect-multiplier multiplier-value：指定本地检测倍数。整数形式，取值范围是3～50，缺省值是3。</p><p>frr-binding：将BFD会话状态与接口的链路状态进行绑定。当BFD会话状态变为Down时，接口的物理层链路状态也会变为Down，从而触发流量切换到备份路径。</p></blockquote><h2 id="OSPF-Smart-discover（智能发现）"><a href="#OSPF-Smart-discover（智能发现）" class="headerlink" title="OSPF Smart-discover（智能发现）"></a>OSPF Smart-discover（智能发现）</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>通常情况下，路由器会周期性地从运行OSPF协议的接口上发送Hello报文。这个周期被称为Hello Interval，通过一个Hello Timer定时器控制Hello报文的发送。这种按固定周期发送报文的方式减缓了OSPF邻居关系的建立。</p><p>通过使能Smart-discover特性，可以在特定场景下加快OSPF邻居的建立。</p><table><thead><tr><th align="left">接口是否配置Smart-discover</th><th align="left">处理</th></tr></thead><tbody><tr><td align="left">接口没有配置Smart-discover</td><td align="left">必须等待Hello Timer到时才能发送Hello报文；两次报文发送间隔为Hello Interval；在这期间邻居一直在等待接收报文。</td></tr><tr><td align="left">接口上配置Smart-discover</td><td align="left">直接发送Hello报文，不需要等待Hello Timer超时；邻居可以很快收到报文迅速进行状态迁移。</td></tr></tbody></table><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>在以下场景中，使能了Smart-discover特性的接口不需要等待Hello Timer到时，可以主动向邻居发送Hello报文：</p><ul><li>当邻居状态首次到达2-way状态。</li><li>当邻居状态从2-way或更高状态迁移到Init状态。</li></ul><h3 id="配置命令-2"><a href="#配置命令-2" class="headerlink" title="配置命令"></a>配置命令</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">[Huawei-GigabitEthernet0<span class="hljs-regexp">/0/</span><span class="hljs-number">1</span>]ospf smart-discover<br><br></code></pre></td></tr></table></figure><p>配置接口的Smart-discover功能, 网络中邻居状态，或者DR、BDR发生变化时，设备不必等到Hello定时器到就可以立刻主动的向邻居发送Hello报文。从而提高建立邻居的速度，达到网络快速收敛的目的。</p><p>参考：<a href="https://support.huawei.com/enterprise/zh/doc/EDOC1000047393/b2b66017">华为文档</a></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/DNS_recursive_Server/">建立自有递归DNS服务器</a></li><li><a href="https://songxwn.com/zabbix_data/">Zabbix：历史数据与趋势数据</a></li><li><a href="https://songxwn.com/ospf-route-FA/">HCIE Datacom-01.3 IGP高级特性-OSPF-其他特性</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>ospf</tag>
      
      <tag>datacom</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>红帽的重复数据删除VDO</title>
    <link href="/vdo/"/>
    <url>/vdo/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Virtual Data Optimizer(VDO)以重复数据删除（deduplication）、压缩和精简置备的形式为 Linux 提供内联数据降低。当您设置 VDO 卷时，您可以指定一个块设备来构建 VDO 卷以及您要存在的逻辑存储量。</p><ul><li>当托管活动的虚拟机或容器时，红帽建议按 10:1 的逻辑与物理比例配置存储：也就是说，如果您使用 1TB 的物理存储，则将其显示为 10TB 的逻辑存储。</li><li>对于对象存储，如 Ceph 提供的类型，红帽建议使用 3:1 的逻辑与物理比例：1TB 的物理存储将显示为 3TB 的逻辑存储。</li></ul><p>在这两种情况下，您只需将文件系统放在 VDO 提供的逻辑设备之上，然后直接使用它，或将其作为分布式云存储架构的一部分。</p><p>由于 VDO 是迅速置备的，所以文件系统和应用程序只会看到使用中的逻辑空间，且不知道可用的实际物理空间。使用脚本来监控实际的可用空间，并在使用超过阈值时产生一个报警：例如，当 VDO 卷已满 80% 时。</p><span id="more"></span><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>注意：基于RHEL 8系列</p><h2 id="安装须知"><a href="#安装须知" class="headerlink" title="安装须知"></a>安装须知</h2><p>1、建议有多余的CPU和内存用于重删，因其会占用大量性能。建议每1TB存储给予1GB内存。</p><p>2、存储设备须为块设备，可以为一个物理硬盘或单独分区。</p><h2 id="正式安装"><a href="#正式安装" class="headerlink" title="正式安装"></a>正式安装</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> lvm2 kmod-kvdo vdo     <span class="hljs-comment">#使用yum安装</span><br><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">vdo create \<br>      <span class="hljs-attribute">--name</span>=vdo1 \<br>      <span class="hljs-attribute">--device</span>=/dev/sdb \<br>      <span class="hljs-attribute">--vdoLogicalSize</span>=300G<br><br></code></pre></td></tr></table></figure><p>创建VDO虚拟设备，指定名字、块设备名称、逻辑大小（推荐为块设备实际大小的10倍）</p><h2 id="格式化并挂载"><a href="#格式化并挂载" class="headerlink" title="格式化并挂载"></a>格式化并挂载</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">fdisk -l <span class="hljs-regexp">/dev/m</span>apper/vdo1<br><br></code></pre></td></tr></table></figure><p>vdo会默认创建在mapper文件夹下。使用fdisk可以查看信息。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkfs.xfs <span class="hljs-regexp">/dev/m</span>apper/vdo1<br><br>mount <span class="hljs-regexp">/dev/m</span>apper<span class="hljs-regexp">/vdo1 /m</span>nt<br><br></code></pre></td></tr></table></figure><p>格式化为xfs文件系统，并挂载使用。</p><p>（注意，挂载后显示的容量为逻辑容量）</p><h2 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">vdostats <span class="hljs-comment">--human-readable</span><br><br></code></pre></td></tr></table></figure><p>查看状态，显示实际物理容量占用大小。</p><h1 id="实际效果"><a href="#实际效果" class="headerlink" title="实际效果"></a>实际效果</h1><p><img src="https://s3.bmp.ovh/imgs/2022/12/24/dd3f90c5eac63eac.png" srcset="/img/loading.gif" lazyload></p><p>存储文件为，连续两天备份的Mariadb数据库文件。图例为cockpit查看。</p><p>参考：<a href="https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/8/html/deduplicating_and_compressing_storage/index">红帽文档</a></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/team_nav/">部署团队服务导航网站 Team-nav</a></li><li><a href="https://songxwn.com/Juniper_Junos/">Juniper Junos系统架构和命令模式浅谈</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>storage</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sublime Text4 4143 安装激活</title>
    <link href="/Sublime_Text4_4143/"/>
    <url>/Sublime_Text4_4143/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>此教程用于Windows 下Sublime Text4 4143版本的安装和激活。</p><p>官网： <a href="https://www.sublimetext.com/">https://www.sublimetext.com</a></p><span id="more"></span><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p><a href="https://download.sublimetext.com/sublime_text_build_4143_x64_setup.exe">https://download.sublimetext.com/sublime_text_build_4143_x64_setup.exe</a></p><h1 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h1><p>安装之后，使用sublime text 打开安装目录下的sublime_text.exe文件。</p><p>搜到到<code>8078 0500 0f94 c1</code></p><p>更改为<code>c640 0501 4885 c9</code></p><p>然后另存到其他路径，然后关闭sublime text，将原sublime_text.exe进行替换即可。</p><h2 id="输入激活码（理论不需要）"><a href="#输入激活码（理论不需要）" class="headerlink" title="输入激活码（理论不需要）"></a>输入激活码（理论不需要）</h2><p>打开Sublime text，点击菜单栏-–&gt;Help—&gt;Enter License</p><p>输入下列激活码即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs License">—– BEGIN LICENSE —–<br>Mifeng User<br>Single User License<br>EA7E-1184812<br>C0DAA9CD 6BE825B5 FF935692 1750523A<br>EDF59D3F A3BD6C96 F8D33866 3F1CCCEA<br>1C25BE4D 25B1C4CC 5110C20E 5246CC42<br>D232C83B C99CCC42 0E32890C B6CBF018<br>B1D4C178 2F9DDB16 ABAA74E5 95304BEF<br>9D0CCFA9 8AF8F8E2 1E0A955E 4771A576<br>50737C65 325B6C32 817DCB83 A7394DFA<br>27B7E747 736A1198 B3865734 0B434AA5<br>—— END LICENSE —<br></code></pre></td></tr></table></figure><p>点击菜单栏 Help—&gt;About Sublime Text 可检测激活状态。</p><h1 id="软件安装中文语言包"><a href="#软件安装中文语言包" class="headerlink" title="软件安装中文语言包"></a>软件安装中文语言包</h1><p>1、点击菜单栏Tools—&gt;Install Package Control 跳出弹框点击 确定按钮</p><p>2、点击菜单栏 Preferences – Package Control</p><p>3、弹框中输入 install package，选中 Package Control: Install Package 然后等待弹窗(可能需要耐心等待一段时间)</p><p>4、等出现如下弹窗后, 在弹窗的搜索框中输入 ChineseLocalizations , 点击出现的选项</p><p>5、等待一段时间，如果出现了如下画面则汉化步骤全部完成</p><p>6、后续若需要更改，可点击菜单栏 帮助-–&gt;Language 选择进行更改。</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/Sublime_Text4/">Sublime Text4 4126 安装激活</a></li><li><a href="https://songxwn.com/KMS-Windows/">Windows 部署私有KMS服务器。</a></li><li><a href="https://chengzhaoxi.xyz/2bffefb0.html">Windows包管理工具scoop</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>IDE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>IDE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>交换机基本原理</title>
    <link href="/switch/"/>
    <url>/switch/</url>
    
    <content type="html"><![CDATA[<h1 id="1、交换机的作用"><a href="#1、交换机的作用" class="headerlink" title="1、交换机的作用"></a>1、交换机的作用</h1><ul><li>连接多个以太网物理段，隔离冲突域</li><li>对以太网帧进行高速而透明的交换转发</li><li>自行学习和维护MAC地址表</li></ul><p>交换机工作在二层，可以用来隔离冲突域，在OSI参考模型中，二层的作用是寻址，这边寻址指的是MAC地址，而交换机就是对MAC地址进行转发，在每个交换机中，都有一张MAC地址表，这个表是交换机自动学习的。</p><p>所以，总得来说交换机的作用是寻址和转发，这边需要注意的是寻址和转发都是MAC地址，需要路由器区分开来，路由器寻址寻的是IP地址，而交换机是MAC地址。</p><span id="more"></span><h1 id="2、交换机特点"><a href="#2、交换机特点" class="headerlink" title="2、交换机特点"></a>2、交换机特点</h1><p>主要工作在OSI模型的物理层、数据链路层</p><ul><li>提供以太网间的透明桥接和交换</li><li>依据链路层的MAC地址，将以太网数据帧在端口间进行转发</li></ul><h1 id="3、交换机MAC地址表转发过程"><a href="#3、交换机MAC地址表转发过程" class="headerlink" title="3、交换机MAC地址表转发过程"></a>3、交换机MAC地址表转发过程</h1><p>MAC地址表初始化：</p><p><img src="https://s3.bmp.ovh/imgs/2022/12/23/063319de6da5c3c7.png" srcset="/img/loading.gif" lazyload></p><p>交换机刚启动时，MAC地址表中无表项。以上图中的交换机就是刚刚启动的时候的MAC地址表。可以看出并没有任何的表项，当接入PC的时候，交换机开始进行学习MAC地址，见下图：</p><p>MAC地址表学习过程（1）</p><p><img src="https://s3.bmp.ovh/imgs/2022/12/23/549d562d7361bbdb.png" srcset="/img/loading.gif" lazyload></p><p>PCA发出数据帧</p><ul><li>交换机把PCA的帧中的源地址MAC_A与接收到此帧的端口E1&#x2F;0&#x2F;1关联起来</li><li>交换机把PCA的帧从所有其他端口发送出去（除了接收到帧的端口E1&#x2F;0&#x2F;1）</li></ul><p>MAC地址表学习过程（2）</p><p><img src="https://s3.bmp.ovh/imgs/2022/12/23/3661b45f7cde2822.png" srcset="/img/loading.gif" lazyload></p><p>PCB、PCC、PCD发出数据帧交换机会把接收到的帧中的源地址与相应的端口关联起来，至此，交换机的MAC地址表学习完成，开始进行数据的转发。</p><p>4、交换机对数据帧的转发与过滤</p><p>单播帧的转发：</p><p><img src="https://s3.bmp.ovh/imgs/2022/12/23/b428b3eb9274d8b9.png" srcset="/img/loading.gif" lazyload></p><p>PCA发出目的到PCD的单播数据帧</p><ul><li>交换机根据帧中的目的地址，从相应的端口E1&#x2F;0&#x2F;4发送出去</li><li>交换机不在其他端口上转发此单播数据帧</li></ul><p>广播、组播和未知单播帧的转发：</p><p><img src="https://s3.bmp.ovh/imgs/2022/12/23/f83e2db064103da2.png" srcset="/img/loading.gif" lazyload></p><p>交换机会把广播、组播和未知单播帧从所有其他端口发送出去（除了接收到帧的端口）</p><h1 id="4、交换机三大行为概述"><a href="#4、交换机三大行为概述" class="headerlink" title="4、交换机三大行为概述"></a>4、交换机三大行为概述</h1><h2 id="泛洪"><a href="#泛洪" class="headerlink" title="泛洪"></a>泛洪</h2><p>除收到报文的接口以外的所有接口发送报文。</p><p>当收到收到组播、广播、未知单播（目的MAC地址不存在于MAC地址表）。</p><h2 id="转发"><a href="#转发" class="headerlink" title="转发"></a>转发</h2><p>点对点的进行报文转发</p><p>当目的MAC地址存在于MAC地址表的单播帧。</p><h2 id="丢弃"><a href="#丢弃" class="headerlink" title="丢弃"></a>丢弃</h2><p>（1）交换机收到数据帧后根据MAC地址表做转发，不从其他端口泛洪数据帧；</p><p>（2）交换机接收到数据帧的端口和转发数据帧的端口是同一个端口，则丢弃数据帧不转发；（环路）</p><p>参考：<a href="https://zhuanlan.zhihu.com/p/122241071">https://zhuanlan.zhihu.com/p/122241071</a></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/DNS_recursive_Server/">建立自有递归DNS服务器</a></li><li><a href="https://songxwn.com/zabbix_data/">Zabbix：历史数据与趋势数据</a></li><li><a href="https://songxwn.com/ospf-route-FA/">HCIE Datacom-01.3 IGP高级特性-OSPF-其他特性</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>datacom</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MPLS VPN随笔（L3 单域）</title>
    <link href="/MPLS_VPN/"/>
    <url>/MPLS_VPN/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>全称应该叫BGP&#x2F;MPLS IP VPN，是一个多协议集合的三层VPN解决方案。(适用于专网)</p><p>它使用MP-BGP在服务提供商骨干网上发布VPN路由，使用MPLS在服务提供商骨干网上转发VPN报文。</p><p>其中，MPLS标签由MP-BGP(内网)和LDP（公网）分发，公网标签也可以使用RSVP分发，用于流量工程（MPLS-TE）。</p><span id="more"></span><h2 id="CE-PE-P-设备角色"><a href="#CE-PE-P-设备角色" class="headerlink" title="CE-PE-P 设备角色"></a>CE-PE-P 设备角色</h2><p>CE 用户边缘设备，用于连接PE，与MPLS VPN无直接关系。<br>只用于对接PE，交换路由信息。使用静态路由、OSPF RIP ISIS BGP等交换路由表。</p><p>PE 运营商边缘设备，与CE直连，通过MP-BGP连接对端PE.<br>运行 MP-BGP，使用VRF通过绑定与CE连接的接口。隔离本地不同用户的路由表，打上RD和RT标签。<br>使用RD在BGP传输的过程中区分路由。<br>使用RT（VPN Target），确保导入对端PE的VRF。<br>是承载全部MPLS VPN功能的角色。</p><p>P 运营商骨干设备，与PE设备连接。只需要转发MPLS数据,使用IGP打通底层路由。</p><h2 id="RD、RT、VRF说明"><a href="#RD、RT、VRF说明" class="headerlink" title="RD、RT、VRF说明"></a>RD、RT、VRF说明</h2><h3 id="VRF-Virtual-Route-Forwarding"><a href="#VRF-Virtual-Route-Forwarding" class="headerlink" title="VRF(Virtual Route Forwarding):"></a>VRF(Virtual Route Forwarding):</h3><p>VRF的目的是解决不同企业私网地址段相同，为了防止冲突，采用将相同私网地址放到不同的VRF表中。VRF区分不同CE端进来边界PE的相同私网路由，路由器的每一个VRF都自动生成相应VRF表，比如show route vrf A ，show route vrf B。对于每一个VRF表，都具有路由区分符(Route Distinguisher：RD)和路由目标(Route Target：RT)两大属性。</p><h3 id="RD-Route-Distinguisher"><a href="#RD-Route-Distinguisher" class="headerlink" title="RD(Route-Distinguisher):"></a>RD(Route-Distinguisher):</h3><p>8个字节的RD+4个字节的IPv4地址组成96位bit VPNv4路由，使不唯一的私网IPv4地址转化为唯一的VPN-IPv4地址,该VPNv4路由在ISP域内传递（区分），RD给某VRF里面的路由打上标签，进而实现地址的复用而不产生冲突。RD用来区分本地VRF，该属性仅本地有效。</p><h3 id="RT-Route-Tagert"><a href="#RT-Route-Tagert" class="headerlink" title="RT(Route Tagert):"></a>RT(Route Tagert):</h3><p>BGP的扩展团体属性，它分成Import RT和Export RT，分别用于路由的导入、导出策略。也即RT是控制这个VRF里面可以发出和接受什么样的路由。RT具有全局唯一性，并且只能被一个VPN使用。<br>关于RT，新人还要注意的点：<br>当从VRF表中导出VPN路由给BGP邻居时，要用Export RT对VPN路由进行标记；在往BGP邻居的VRF表中导入VPN路由时，只有所带RT标记与VRF表中任意一个Import RT相符的路由才会被导入到VRF表中。RT使得PE路由器只包含和其直接相连的VPN的路由，而不是全网所有VPN的路由，从而节省了PE路由器的资源，提高了网络拓展性。（将connect路由发给BGP邻居，而）</p><p>通过配置import和export RT，来控制收发路由。</p><p>1.当从VRF表中导出VPN路由时，要用Export RT对VPN路由进行标记。</p><p>2.当往VRF表中导入VPN路由时，只有所带RT标记与VRF表中任意一个Import RT相符的路由才会被导入到VRF表中。</p><p>RD,这条路由是谁发出来的，因此每一个vrf有它的rd值<br>RT,这条路由从从哪来，要去哪里。（接收方和发送方这个值一样，区别是一个是export,一个是inport）</p><h2 id="MPLS-VPN路由发布"><a href="#MPLS-VPN路由发布" class="headerlink" title="MPLS VPN路由发布"></a>MPLS VPN路由发布</h2><p>CE到PE之间的路由交换（使用静态或动态路由）</p><p>PE将接收的路由，注入指定的VRF (VRF与和CE连接的接口绑定)</p><p>PE将VRF的路由注入MP-BGP（打上RD和RT标签，还有MPLS私网标签）成为VPNv4路由<br>其中RD和RT为手动指定，MPLS私网标签为MP-BGP分配。</p><p>VPNv4路由通过MP-BGP在骨干网上传递，到指定的对端PE</p><p>对端PE 根据RT导入指定的VRF。</p><p>对端PE将路由发送给CE。</p><p>VRF(虚拟路由转发)用于隔离路由表。</p><h2 id="MPLS-VPN数据转发"><a href="#MPLS-VPN数据转发" class="headerlink" title="MPLS VPN数据转发"></a>MPLS VPN数据转发</h2><p>数据从CE到入站PE（只是普通IP转发，入站PE的接口绑定VRF）</p><p>数据从入站PE到中间 P 设备，<br>首先压入私网标签，此标签是MP-BGP分配的，与VPNv4路由对应。LSP只是两端的PE之间建立。<br>然后压入公网标签，此标签是LDP分配的，LSP是入站PE、中间P设备、出站PE之间建立。<br>其中，P设备对于内层的私网标签是无感知的，只根据公网标签进行数据转发。</p><p>中间 P 设备到出站PE+<br>当出站PE收到数据的时候，只剩下一层私网标签。（PHP原因，倒数第二跳弹出标签）<br>然后根据私网标签，转发到指定的VRF。（剥离私网标签）</p><p>数据从出站PE到远端CE （只是普通IP转发，出站PE的接口绑定VRF）</p><p>（为什么需要外网标签呢？ 因为P设备没有VPNv4的私网路由，无法建立LSP）</p><h2 id="公网标签与私网标签还有LSP"><a href="#公网标签与私网标签还有LSP" class="headerlink" title="公网标签与私网标签还有LSP"></a>公网标签与私网标签还有LSP</h2><p>公网标签通过LDP建立，PE和PE设备都参与一条LSP。<br>私网标签，通过MP-BGP建立，两端PE进行建立LSP。<br>所以私网标签只需要MP-BGP建立邻居关系。（P与PE之间，只需要底层路由互通，不需要BGP。）</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/DNS_recursive_Server/">建立自有递归DNS服务器</a></li><li><a href="https://songxwn.com/zabbix_data/">Zabbix：历史数据与趋势数据</a></li><li><a href="https://songxwn.com/ospf-route-FA/">HCIE Datacom-01.3 IGP高级特性-OSPF-其他特性</a></li><li><a href="https://blogs.kainy.cn/2010/04/不同系统下_VPN_设置教程/">不同系统下 VPN 设置教程</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>vpn</tag>
      
      <tag>mpls</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何成为全栈网络工程师？</title>
    <link href="/Full_Stack_Network_Engineer/"/>
    <url>/Full_Stack_Network_Engineer/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>写一下对一个现代全栈网络工程师的发展方向个人理解。</p><p>也算是个人未来的职业规划。</p><span id="more"></span><h1 id="数通网络"><a href="#数通网络" class="headerlink" title="数通网络"></a>数通网络</h1><p>作为网络工程师最基础的东西，相关学习认证可以考取思科的CCIE-EI，华为的HCIE-Datacom等进行系统化的学习。<br>最近都有更新自动化、无线、SR等新内容。<br>熟悉各大厂商的硬件和配置CLI（Cisco、华为、H3C、Juniper等）</p><h1 id="Linux系统运维"><a href="#Linux系统运维" class="headerlink" title="Linux系统运维"></a>Linux系统运维</h1><p>Linux各大发行版的基础操作，如RHEL系列、Debian系列、Ubuntu等及其衍生发行版。<br>可以考取学习红帽RHCE认证。</p><p>学习网站推荐：<a href="https://www.linuxprobe.com/">https://www.linuxprobe.com</a></p><h1 id="桌面运维（HelpDesk）、Windows-Server。"><a href="#桌面运维（HelpDesk）、Windows-Server。" class="headerlink" title="桌面运维（HelpDesk）、Windows Server。"></a>桌面运维（HelpDesk）、Windows Server。</h1><p>最基础的PC和Windows桌面系统的维护，和Windows Server（AD、SMB、DNS、DHCP）等服务的使用。</p><h1 id="网络安全"><a href="#网络安全" class="headerlink" title="网络安全"></a>网络安全</h1><p>建议直接去学思科的CCNP 安全认证，相对来说思科的更全面更通用一些。</p><h1 id="虚拟化（VMware-KVM-容器-K8S等）"><a href="#虚拟化（VMware-KVM-容器-K8S等）" class="headerlink" title="虚拟化（VMware KVM 容器 K8S等）"></a>虚拟化（VMware KVM 容器 K8S等）</h1><p>熟悉VMware的虚拟化产品，开源的KVM和容器技术。<br>可以考取VMware的VCP系列证书。<br>学习虚拟化网络、K8s等网络架构。</p><h1 id="公有云"><a href="#公有云" class="headerlink" title="公有云"></a>公有云</h1><p>国内的阿里云、腾讯云、华为云等的基础操作和内部网络架构。<br>国外有AWS、GCP、Azure。</p><h1 id="监控、日志"><a href="#监控、日志" class="headerlink" title="监控、日志"></a>监控、日志</h1><p>Zabbix、Cati、ELK、Prometheus等开源产品，用于监控设备状态、日志等信息。</p><h1 id="网络自动化（DevNet）"><a href="#网络自动化（DevNet）" class="headerlink" title="网络自动化（DevNet）"></a>网络自动化（DevNet）</h1><p>学习Python和相关网络库、Ansible等运维自动化。<br>推荐学习：<a href="https://www.zhihu.com/people/wang-yin-31-84">https://www.zhihu.com/people/wang-yin-31-84</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>领英： <a href="https://www.linkedin.com/pulse/how-become-full-stack-network-engineer-mohammad-abbasi-darabi/">https://www.linkedin.com/pulse/how-become-full-stack-network-engineer-mohammad-abbasi-darabi/</a></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/DNS_recursive_Server/">建立自有递归DNS服务器</a></li><li><a href="https://songxwn.com/zabbix_data/">Zabbix：历史数据与趋势数据</a></li><li><a href="https://songxwn.com/ospf-route-FA/">HCIE Datacom-01.3 IGP高级特性-OSPF-其他特性</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>planning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Juniper MPLS L3VPN实验配置</title>
    <link href="/Juniper_L3-MPLS/"/>
    <url>/Juniper_L3-MPLS/</url>
    
    <content type="html"><![CDATA[<h1 id="实验说明"><a href="#实验说明" class="headerlink" title="实验说明"></a>实验说明</h1><p>使用Juniper vMX进行实验。</p><p>ISIS L2 作为 IGP打通底层路由，LDP 作为公网MPLS标签分发，PE之间使用MP-IBGP</p><p>PS: 此文章只有PE的配置，用于学习和理解Juniper配置。</p><span id="more"></span><h1 id="配置ISIS"><a href="#配置ISIS" class="headerlink" title="配置ISIS"></a>配置ISIS</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">set</span> interfaces lo0 unit <span class="hljs-number">0</span> family inet address <span class="hljs-number">192.168.0.1</span>/<span class="hljs-number">32</span><br><span class="hljs-attribute">set</span> interfaces lo0 unit <span class="hljs-number">0</span> family iso address <span class="hljs-number">49</span>.<span class="hljs-number">0002</span>.<span class="hljs-number">0192</span>.<span class="hljs-number">0168</span>.<span class="hljs-number">0001</span>.<span class="hljs-number">00</span><br><span class="hljs-comment"># 配置ISO的 NET地址，用于ISIS</span><br><span class="hljs-attribute">set</span> protocols isis interface lo0.<span class="hljs-number">0</span> passive<br><br><span class="hljs-attribute">set</span> protocols isis level <span class="hljs-number">2</span> wide-metrics-only<br><span class="hljs-comment"># 开启L2路由器的宽度量值计算</span><br><span class="hljs-attribute">set</span> protocols isis level <span class="hljs-number">1</span> disable<br><span class="hljs-comment"># 关闭L1路由器</span><br><span class="hljs-attribute">set</span> interfaces ge-<span class="hljs-number">0</span>/<span class="hljs-number">0</span>/<span class="hljs-number">1</span> unit <span class="hljs-number">0</span> family inet address <span class="hljs-number">12.1.1.2</span>/<span class="hljs-number">24</span><br><span class="hljs-attribute">set</span> interfaces ge-<span class="hljs-number">0</span>/<span class="hljs-number">0</span>/<span class="hljs-number">1</span> unit <span class="hljs-number">0</span> family iso<br><span class="hljs-comment"># 开启物理接口的ISO，用于ISIS。</span><br><br><span class="hljs-attribute">set</span> protocols isis interface ge-<span class="hljs-number">0</span>/<span class="hljs-number">0</span>/<span class="hljs-number">1</span><br><br><span class="hljs-comment"># 宣告 物理接口</span><br><br><span class="hljs-attribute">set</span> protocols isis interface ge-<span class="hljs-number">0</span>/<span class="hljs-number">0</span>/<span class="hljs-number">1</span> point-to-point<br><br><span class="hljs-comment"># 配置邻居类型为P2P</span><br><br><span class="hljs-attribute">set</span> protocols isis interface ge-<span class="hljs-number">0</span>/<span class="hljs-number">0</span>/<span class="hljs-number">1</span> hello-padding disable<br><br><span class="hljs-comment"># 关闭Hello 报文填充</span><br><br><span class="hljs-attribute">set</span> protocols isis interface ge-<span class="hljs-number">0</span>/<span class="hljs-number">0</span>/<span class="hljs-number">1</span> level <span class="hljs-number">2</span> metric <span class="hljs-number">1000</span><br><span class="hljs-comment"># 配置ISIS 接口度量值</span><br></code></pre></td></tr></table></figure><h2 id="验证ISIS"><a href="#验证ISIS" class="headerlink" title="验证ISIS"></a>验证ISIS</h2><p><code>show isis adjacency </code></p><p>#确认邻居状态为UP</p><p><code>show route protocol isis</code></p><p>#查看通过ISIS学习的路由表</p><h1 id="配置LDP"><a href="#配置LDP" class="headerlink" title="配置LDP"></a>配置LDP</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros"> <br><span class="hljs-built_in">set</span> protocols<span class="hljs-built_in"> ldp interface </span>all<br><span class="hljs-built_in">set</span> protocols<span class="hljs-built_in"> ldp interface </span>lo0.0<br><br><span class="hljs-comment"># 开启接口的LDP协议</span><br><span class="hljs-built_in">set</span> protocols<span class="hljs-built_in"> mpls interface </span>lo0.0<br><span class="hljs-built_in">set</span> protocols<span class="hljs-built_in"> mpls interface </span>all<br><br><span class="hljs-comment"># 开启接口的MPLS</span><br><br><br><span class="hljs-built_in">set</span> interfaces ge-0/0/9 unit 0 family<span class="hljs-built_in"> mpls </span><br><br><span class="hljs-comment"># 开启接口的MPLS</span><br></code></pre></td></tr></table></figure><h2 id="验证LDP"><a href="#验证LDP" class="headerlink" title="验证LDP"></a>验证LDP</h2><p><code>show ldp session</code></p><p>##正常状态为：  Operational</p><p><code>show route table inet.3</code></p><p>#查看公网LDP分配的标签。</p><p>PS： LDP转发路径完全依赖与IGP路由的选路，且FEC默认只会匹配&#x2F;32路由建立LSP。</p><h1 id="配置MP-BGP"><a href="#配置MP-BGP" class="headerlink" title="配置MP-BGP"></a>配置MP-BGP</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> routing-options router-id 1.1.1.1<br><span class="hljs-comment"># 配置全局的路由ID</span><br><br><span class="hljs-built_in">set</span> routing-options autonomous-system 100<br><span class="hljs-comment"># 配置全局的 AS号</span><br><br><span class="hljs-built_in">set</span> protocols<span class="hljs-built_in"> bgp group </span>RR<span class="hljs-built_in"> type </span>internal<br><span class="hljs-comment"># 建立BGP组，配置标签为IBGP</span><br><br><span class="hljs-built_in">set</span> protocols<span class="hljs-built_in"> bgp group </span>RR local-address 1.1.1.1<br><span class="hljs-comment"># 配置BGP的源IP为 Lookback 地址。</span><br><br><span class="hljs-built_in">set</span> protocols<span class="hljs-built_in"> bgp group </span>RR family inet unicast<br><span class="hljs-built_in">set</span> protocols<span class="hljs-built_in"> bgp group </span>RR family inet-vpn unicast<br><span class="hljs-comment"># 开启单播IPv4地址族，开启VPNv4地址族。</span><br><br><span class="hljs-built_in">set</span> protocols<span class="hljs-built_in"> bgp group </span>RR<span class="hljs-built_in"> neighbor </span>4.4.4.4<br><span class="hljs-comment"># 配置BGP邻居。</span><br></code></pre></td></tr></table></figure><h2 id="验证BGP"><a href="#验证BGP" class="headerlink" title="验证BGP"></a>验证BGP</h2><p><code> show bgp neighbor</code></p><p>#查看BGP邻居</p><h1 id="VRF配置"><a href="#VRF配置" class="headerlink" title="VRF配置"></a>VRF配置</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> routing-instances VLL-VPN1 instance-type vrf<br><br><span class="hljs-comment"># 配置路由实例标签为VRF</span><br><span class="hljs-built_in">set</span> routing-instances VLL-VPN1<span class="hljs-built_in"> interface </span>ge-0/0/0.0<br><br><span class="hljs-comment"># 配置接口加入到路由实例</span><br><span class="hljs-built_in">set</span> routing-instances VLL-VPN1 route-distinguisher 100:1<br><span class="hljs-built_in">set</span> routing-instances VLL-VPN1 vrf-target target:100:1<br><br><span class="hljs-comment">#配置RD RT值，用于本地路由区分，和路由VRF的区分导入</span><br><span class="hljs-built_in">set</span> routing-instances VLL-VPN1 vrf-table-label<br><br><span class="hljs-comment">#为VRF里面的所有路由生成VPN MPLS标签</span><br></code></pre></td></tr></table></figure><p>##在VRF路由表里面的，都会建立LSP发送路由到对端的MP-BGP邻居</p><h2 id="验证VPN路由传递"><a href="#验证VPN路由传递" class="headerlink" title="验证VPN路由传递"></a>验证VPN路由传递</h2><p><code>show route table VLL-VPN1.inet</code></p><p>#查看VPN路由表，是否传递到对端PE。也可以查其分配的内网MPLS标签。</p><p>参考： <a href="https://supportportal.juniper.net/s/article/SRX-Example-Configuring-L3VPN-over-MPLS?language=en_US">https://supportportal.juniper.net/s/article/SRX-Example-Configuring-L3VPN-over-MPLS?language=en_US</a></p><h1 id="配置BGP-反射器"><a href="#配置BGP-反射器" class="headerlink" title="配置BGP 反射器"></a>配置BGP 反射器</h1><h2 id="反射器配置"><a href="#反射器配置" class="headerlink" title="反射器配置"></a>反射器配置</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> protocols<span class="hljs-built_in"> bgp group </span>RR cluster 2.2.2.2<br><span class="hljs-comment">#配置自己为路由反射器</span><br><span class="hljs-built_in">set</span> protocols<span class="hljs-built_in"> bgp group </span>RR<span class="hljs-built_in"> neighbor </span>4.4.4.4<br><span class="hljs-comment">#与客户端建立对等体</span><br></code></pre></td></tr></table></figure><h2 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> protocols<span class="hljs-built_in"> bgp group </span>RR<span class="hljs-built_in"> neighbor </span>2.2.2.2<br><span class="hljs-comment">#与RR反射器建立对等体。</span><br></code></pre></td></tr></table></figure><p>参考：<a href="https://www.juniper.net/documentation/us/en/software/junos/bgp/topics/topic-map/bgp-rr.html#id-understanding-bgp-route-reflectors">https://www.juniper.net/documentation/us/en/software/junos/bgp/topics/topic-map/bgp-rr.html#id-understanding-bgp-route-reflectors</a></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/DNS_recursive_Server/">建立自有递归DNS服务器</a></li><li><a href="https://songxwn.com/zabbix_data/">Zabbix：历史数据与趋势数据</a></li><li><a href="https://songxwn.com/ospf-route-FA/">HCIE Datacom-01.3 IGP高级特性-OSPF-其他特性</a></li><li><a href="https://blogs.kainy.cn/2010/04/不同系统下_VPN_设置教程/">不同系统下 VPN 设置教程</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>juniper</tag>
      
      <tag>vpn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sublime Text4 4126 安装激活</title>
    <link href="/Sublime_Text4/"/>
    <url>/Sublime_Text4/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>此教程用于Windows 下Sublime Text4 4126版本的安装和激活。</p><p>官网： <a href="https://www.sublimetext.com/">https://www.sublimetext.com</a></p><span id="more"></span><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p><a href="https://download.sublimetext.com/sublime_text_build_4126_x64_setup.exe">https://download.sublimetext.com/sublime_text_build_4126_x64_setup.exe</a></p><h1 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h1><p>安装之后，使用sublime text 打开安装目录下的sublime_text.exe文件。</p><p>搜到到<code>8078 0500 0f94 c1</code></p><p>更改为<code>c640 0501 4885 c9</code></p><p>然后另存到其他路径，然后关闭sublime text，将原sublime_text.exe进行替换即可。</p><h2 id="输入激活码（理论不需要）"><a href="#输入激活码（理论不需要）" class="headerlink" title="输入激活码（理论不需要）"></a>输入激活码（理论不需要）</h2><p>打开Sublime text，点击菜单栏-–&gt;Help—&gt;Enter License</p><p>输入下列激活码即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs License">—– BEGIN LICENSE —–<br>Mifeng User<br>Single User License<br>EA7E-1184812<br>C0DAA9CD 6BE825B5 FF935692 1750523A<br>EDF59D3F A3BD6C96 F8D33866 3F1CCCEA<br>1C25BE4D 25B1C4CC 5110C20E 5246CC42<br>D232C83B C99CCC42 0E32890C B6CBF018<br>B1D4C178 2F9DDB16 ABAA74E5 95304BEF<br>9D0CCFA9 8AF8F8E2 1E0A955E 4771A576<br>50737C65 325B6C32 817DCB83 A7394DFA<br>27B7E747 736A1198 B3865734 0B434AA5<br>—— END LICENSE —<br></code></pre></td></tr></table></figure><p>点击菜单栏 Help—&gt;About Sublime Text 可检测激活状态。</p><h1 id="软件安装中文语言包"><a href="#软件安装中文语言包" class="headerlink" title="软件安装中文语言包"></a>软件安装中文语言包</h1><p>1、点击菜单栏Tools—&gt;Install Package Control 跳出弹框点击 确定按钮</p><p>2、点击菜单栏 Preferences – Package Control</p><p>3、弹框中输入 install package，选中 Package Control: Install Package 然后等待弹窗(可能需要耐心等待一段时间)</p><p>4、等出现如下弹窗后, 在弹窗的搜索框中输入 ChineseLocalizations , 点击出现的选项</p><p>5、等待一段时间，如果出现了如下画面则汉化步骤全部完成</p><p>6、后续若需要更改，可点击菜单栏 帮助-–&gt;Language 选择进行更改。</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/Sublime_Text4_4143/">Sublime Text4 4143 安装激活</a></li><li><a href="https://songxwn.com/KMS-Windows/">Windows 部署私有KMS服务器。</a></li><li><a href="https://chengzhaoxi.xyz/2bffefb0.html">Windows包管理工具scoop</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>IDE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>IDE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ELK Stack 安装教程，RHEL及衍生系统。</title>
    <link href="/elk/"/>
    <url>/elk/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>“ELK”是三个开源项目的首字母缩写，这三个项目分别是：Elasticsearch、Logstash 和 Kibana。Elasticsearch 是一个搜索和分析引擎。Logstash 是服务器端数据处理管道，能够同时从多个来源采集数据，转换数据，然后将数据发送到诸如 Elasticsearch 等“存储库”中。Kibana 则可以让用户在 Elasticsearch 中使用图形和图表对数据进行可视化。</p><p>目前最新的名字叫 Elastic Stack 是 ELK Stack 的更新换代产品。（增加了各种Beats）</p><p><img src="https://www.elastic.co/static-res/images/elk/elk-stack-elkb-diagram.svg" srcset="/img/loading.gif" lazyload alt="示意图"></p><p>注意：本文章主要用于syslog类型的日志收集，取消ES的加密访问是为了方便接入frostmourne进行日志告警。</p><span id="more"></span><h1 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h1><p>系统： AlmaLinux 9 （关闭SE Linux）</p><p>Java：OpenJDK 19 （从RPM 8.5版本开始使用内置19版本）</p><p>浏览器：Firefox、Chrome、Safari、Edge（使用最新版）</p><p>软件版本，使用ELK 8.5+</p><p>也适用于其他RHEL8-9版本衍生版系统：如Centos Stream、Rocky Linux等。</p><p>兼容性查询：<a href="https://www.elastic.co/cn/support/matrix">https://www.elastic.co/cn/support/matrix</a></p><p>PS: 参考 <a href="https://www.skynemo.cn/archives/base-on-centos79-install-elasticsearch81-standalone-and-config#">https://www.skynemo.cn/archives/base-on-centos79-install-elasticsearch81-standalone-and-config#</a></p><p>官网文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/master/rpm.html">https://www.elastic.co/guide/en/elasticsearch/reference/master/rpm.html</a></p><h1 id="官网下载地址"><a href="#官网下载地址" class="headerlink" title="官网下载地址"></a>官网下载地址</h1><p><a href="https://www.elastic.co/cn/downloads/elasticsearch">Download Elasticsearch | Elastic</a></p><p>下载RPM包</p><h2 id="使用清华大学镜像源进行安装"><a href="#使用清华大学镜像源进行安装" class="headerlink" title="使用清华大学镜像源进行安装"></a>使用清华大学镜像源进行安装</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs txt">vim /etc/yum.repos.d/elasticsearch.repo<br><br>[elasticsearch]<br>name=Elasticsearch repository for 8.x packages<br>baseurl=https://mirrors.tuna.tsinghua.edu.cn/elasticstack/8.x/yum<br>gpgcheck=0<br>enabled=1<br>autorefresh=1<br>type=rpm-md<br></code></pre></td></tr></table></figure><p>#创建elasticsearch.repo 至 &#x2F;etc&#x2F;yum.repos.d&#x2F;中，注意安装前检查SELinux是否关闭。</p><p>#注意：关闭了GPG认证</p><p>PS: <a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.3/rpm.html#rpm-repo">使用 RPM |安装 Elasticsearch弹性搜索指南 [8.3]</a></p><p><code>dnf install elasticsearch logstash kibana</code></p><h2 id="使用dnf进行安装"><a href="#使用dnf进行安装" class="headerlink" title="使用dnf进行安装"></a>使用dnf进行安装</h2><p><code>systemctl enable --now elasticsearch.service kibana.service logstash.service </code></p><p>#启动并设定开机启动。</p><h3 id="默认初始化配置"><a href="#默认初始化配置" class="headerlink" title="默认初始化配置"></a>默认初始化配置</h3><p>使用dnf安装的时候，需要检查输入日志，会有类似以下的输出。</p><p>默认开启HTTPS，并生成默认管理员账号elastic账号的密码。可以使用下面命令进行重置密码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/usr/share/elasticsearch/bin/elasticsearch-reset-password -u elastic<br></code></pre></td></tr></table></figure><p>可以使用下面的命令生成 Kibana 访问Elasticsearch的令牌。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/elasticsearch/</span>bin/elasticsearch-create-enrollment-token -s kibana <br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs log">--------------------------- Security autoconfiguration information ------------------------------<br><br>Authentication and authorization are enabled.<br>TLS for the transport and HTTP layers is enabled and configured.<br><br>The generated password for the elastic built-in superuser is : wm7khlFyj3VrHKOtb5S9<br><br>If this node should join an existing cluster, you can reconfigure this with<br>&#x27;/usr/share/elasticsearch/bin/elasticsearch-reconfigure-node --enrollment-token &lt;token-here&gt;&#x27;<br>after creating an enrollment token on your existing cluster.<br><br>You can complete the following actions at any time:<br><br>Reset the password of the elastic built-in superuser with <br>&#x27;/usr/share/elasticsearch/bin/elasticsearch-reset-password -u elastic&#x27;.<br><br>Generate an enrollment token for Kibana instances with <br> &#x27;/usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s kibana&#x27;.<br><br>Generate an enrollment token for Elasticsearch nodes with <br>&#x27;/usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s node&#x27;.<br></code></pre></td></tr></table></figure><h3 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h3><p><a href="https://192.168.198.6:9200/">https://192.168.198.6:9200</a> 使用HTTPS访问测试，用管理员账号密码。</p><h1 id="Elasticsearch-配置"><a href="#Elasticsearch-配置" class="headerlink" title="Elasticsearch 配置"></a>Elasticsearch 配置</h1><h3 id="切换客户API为不加密，HTTP访问。"><a href="#切换客户API为不加密，HTTP访问。" class="headerlink" title="切换客户API为不加密，HTTP访问。"></a>切换客户API为不加密，HTTP访问。</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/elasticsearch/elasticsearch.yml <br></code></pre></td></tr></table></figure><p>打开文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Enable encryption for HTTP API client connections, such as Kibana, Logstash, and Agents</span><br><span class="hljs-attr">xpack.security.http.ssl:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">keystore.path:</span> <span class="hljs-string">certs/http.p12</span><br></code></pre></td></tr></table></figure><p>修改上述配置为 false.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl restart elasticsearch.service  <br></code></pre></td></tr></table></figure><p>重启服务，以生效配置。</p><p>访问 <a href="http://192.168.198.6:9200/">http://192.168.198.6:9200</a>  ，使用http测试。</p><h2 id="日志告警"><a href="#日志告警" class="headerlink" title="日志告警"></a>日志告警</h2><p>关闭https是为了兼容frostmourne做日志告警。</p><p>教程：<a href="https://songxwn.com/frostmourne_install/">https://songxwn.com/frostmourne_install/</a></p><h1 id="Kibana-配置"><a href="#Kibana-配置" class="headerlink" title="Kibana 配置"></a>Kibana 配置</h1><p>Kibana 数据都存储在ES数据库，且为data角色的。</p><h2 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h2><p>默认为 5601 端口，默认绑定为127.0.0.1 地址。使用HTTP协议。</p><p>可以修改kibana.yml 文件修改绑定地址，或者使用Nginx反向代理。</p><h2 id="修改语言"><a href="#修改语言" class="headerlink" title="修改语言"></a>修改语言</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">vim</span> <span class="hljs-string">/etc/kibana/kibana.yml</span>  <br></code></pre></td></tr></table></figure><p>vim修改配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">i18n.locale:</span> <span class="hljs-string">&quot;zh-CN&quot;</span><br><span class="hljs-attr">server.host:</span> <span class="hljs-string">&quot;0.0.0.0&quot;</span><br><br></code></pre></td></tr></table></figure><h1 id="修改此行为中文配置，重启服务生效。第二行为配置监听IP"><a href="#修改此行为中文配置，重启服务生效。第二行为配置监听IP" class="headerlink" title="修改此行为中文配置，重启服务生效。第二行为配置监听IP."></a>修改此行为中文配置，重启服务生效。第二行为配置监听IP.</h1><h2 id="基本认证配置"><a href="#基本认证配置" class="headerlink" title="基本认证配置"></a>基本认证配置</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># =================== System: Elasticsearch ===================</span><br><span class="hljs-comment"># The URLs of the Elasticsearch instances to use for all your queries.</span><br><span class="hljs-attr">elasticsearch.hosts:</span> [<span class="hljs-string">&quot;http://127.0.0.1:9200&quot;</span>]<br><br><span class="hljs-comment"># If your Elasticsearch is protected with basic authentication, these settings provide</span><br><span class="hljs-comment"># the username and password that the Kibana server uses to perform maintenance on the Kibana</span><br><span class="hljs-comment"># index at startup. Your Kibana users still need to authenticate with Elasticsearch, which</span><br><span class="hljs-comment"># is proxied through the Kibana server.</span><br><span class="hljs-attr">elasticsearch.username:</span> <span class="hljs-string">&quot;kibana_system&quot;</span><br><span class="hljs-attr">elasticsearch.password:</span> <span class="hljs-string">&quot;he5l=fIIbD1WhD_=aNg_&quot;</span><br></code></pre></td></tr></table></figure><p>修改文件，配置ES访问地址，配置系统默认账号kibana_system的密码，填入配置文件。（必须为此账号）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br> /usr/share/elasticsearch/bin/elasticsearch-reset-password -u kibana_system<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重置密码</span><br><br></code></pre></td></tr></table></figure><p>PS： 参考 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/security-minimal-setup.html#add-built-in-users">https://www.elastic.co/guide/en/elasticsearch/reference/current/security-minimal-setup.html#add-built-in-users</a></p><h1 id="Logstash-配置"><a href="#Logstash-配置" class="headerlink" title="Logstash 配置"></a>Logstash 配置</h1><h2 id="开启syslog，将数据转发给ES"><a href="#开启syslog，将数据转发给ES" class="headerlink" title="开启syslog，将数据转发给ES."></a>开启syslog，将数据转发给ES.</h2><p><code>vim /etc/logstash/conf.d/syslog.conf</code></p><p>创建修改syslog配置文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><br>input <span class="hljs-punctuation">&#123;</span><br>  syslog <span class="hljs-punctuation">&#123;</span><br>    type =&gt; <span class="hljs-string">&quot;system-syslog&quot;</span><br>    port =&gt; <span class="hljs-number">514</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br>output <span class="hljs-punctuation">&#123;</span><br>  elasticsearch <span class="hljs-punctuation">&#123;</span><br>    hosts =&gt; <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;http://127.0.0.1:9200&quot;</span><span class="hljs-punctuation">]</span><br>    index =&gt; <span class="hljs-string">&quot;system-syslog-%&#123;+YYYY.MM&#125;&quot;</span><br>    user =&gt; <span class="hljs-string">&quot;elastic&quot;</span><br>    password =&gt; <span class="hljs-string">&quot;2H*Y9rL5D=xFbvLAz_Nr&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span> <br><br></code></pre></td></tr></table></figure><p>配置为syslog输入，端口为默认的514。</p><p>将数据输出到ES，配置索引前缀为 system-syslog，按月分割索引。</p><p>注意 中括号。</p><h2 id="修改systemd服务文件。"><a href="#修改systemd服务文件。" class="headerlink" title="修改systemd服务文件。"></a>修改systemd服务文件。</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf">vim /lib/systemd/system/logstash.service<br><br>[Service]<br><span class="hljs-attribute">Type</span><span class="hljs-operator">=</span>simple<br><span class="hljs-attribute">User</span><span class="hljs-operator">=</span>root<br><span class="hljs-attribute">Group</span><span class="hljs-operator">=</span>root<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>systemctl daemon-reload<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重载</span><br><br></code></pre></td></tr></table></figure><p>需要修改启动用户为ROOT才能使用小于1024的端口号。(linux对于非root权限用户不能使用1024以下的端口，)</p><h1 id="Kibana-WEB配置"><a href="#Kibana-WEB配置" class="headerlink" title="Kibana WEB配置"></a>Kibana WEB配置</h1><h2 id="创建数据视图"><a href="#创建数据视图" class="headerlink" title="创建数据视图"></a>创建数据视图</h2><p>在主菜单-Stack Management-Kibana-数据视图里面创建</p><p>参考文档： <a href="https://www.elastic.co/guide/en/kibana/current/data-views.html">https://www.elastic.co/guide/en/kibana/current/data-views.html</a></p><p>使用类似 syslog* 匹配索引和日期。</p><h2 id="索引管理"><a href="#索引管理" class="headerlink" title="索引管理"></a>索引管理</h2><p>在主菜单-Stack Management-数据-索引管理里面查看所有索引。</p><h2 id="数据查看"><a href="#数据查看" class="headerlink" title="数据查看"></a>数据查看</h2><p>路径：<a href="http://127.0.0.1:5601/app/discover">http://127.0.0.1:5601/app/discover</a> （选择数据视图查看）</p><p>PS： 主机名字段问题</p><p><a href="https://songxwn.com/ELK-logstash-hostname/">https://songxwn.com/ELK-logstash-hostname/</a></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/ELK-logstash-hostname/">ELK Logstash解析系统日志错误</a></li><li><a href="https://songxwn.com/ELK-AD-LDAP-Authentication/">Elasticsearch 接入微软Active Directory认证</a></li><li><a href="https://songxwn.com/podman/">Podman 容器管理工具</a></li><li><a href="https://chengzhaoxi.xyz/361d7ede.html">互联网算法工程开发常用技术</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>ELK</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>elk</tag>
      
      <tag>elasticsearch</tag>
      
      <tag>syslog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu Netplan配置工具</title>
    <link href="/netplan/"/>
    <url>/netplan/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Netplan 是从Ubuntu 18.04开始使用的网络配置工具。</p><p><a href="https://netplan.io/examples">Netplan官方配置指南</a></p><span id="more"></span><p>配置文件路径 &#x2F;etc&#x2F;netplan&#x2F;*.yaml</p><h2 id="配置静态IP"><a href="#配置静态IP" class="headerlink" title="配置静态IP"></a>配置静态IP</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># This is the network config written by &#x27;subiquity&#x27;</span><br><span class="hljs-attr">network:</span><br>  <span class="hljs-attr">ethernets:</span><br>    <span class="hljs-attr">ens33:</span><br>      <span class="hljs-attr">dhcp4:</span> <span class="hljs-literal">no</span>          <span class="hljs-comment">#关闭dhcp</span><br>      <span class="hljs-attr">dhcp6:</span> <span class="hljs-literal">no</span>          <span class="hljs-comment">#关闭dhcpv6</span><br>      <span class="hljs-attr">accept-ra:</span> <span class="hljs-literal">no</span>      <span class="hljs-comment">#关闭IPv6无状态</span><br>      <span class="hljs-attr">addresses:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">10.230</span><span class="hljs-number">.31</span><span class="hljs-number">.55</span><span class="hljs-string">/24</span>   <span class="hljs-comment">#配置ipv4地址</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">2001</span><span class="hljs-string">:1::1/64</span>      <span class="hljs-comment">#配置ipv6地址</span><br>      <span class="hljs-attr">nameservers:</span><br>        <span class="hljs-attr">addresses:</span> [<span class="hljs-number">114.114</span><span class="hljs-number">.114</span><span class="hljs-number">.114</span>,<span class="hljs-number">1.1</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span>,<span class="hljs-number">2002</span><span class="hljs-string">::1</span>] <span class="hljs-comment">#配置dns服务器</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">to:</span> <span class="hljs-string">default</span><br>          <span class="hljs-attr">via:</span> <span class="hljs-number">10.230</span><span class="hljs-number">.31</span><span class="hljs-number">.1</span>   <span class="hljs-comment">#配置默认路由，即网关。</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">to:</span> <span class="hljs-string">default</span><br>          <span class="hljs-attr">via:</span> <span class="hljs-number">2001</span><span class="hljs-string">:1::2</span>     <span class="hljs-comment">#配置Ipv6网关。</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">to:</span> <span class="hljs-number">10.100</span><span class="hljs-number">.100</span><span class="hljs-number">.0</span><span class="hljs-string">/24</span><br>          <span class="hljs-attr">via:</span> <span class="hljs-number">10.230</span><span class="hljs-number">.31</span><span class="hljs-number">.2</span><br>          <span class="hljs-attr">metric:</span> <span class="hljs-number">300</span>       <span class="hljs-comment">#配置静态路由，并配置开销。</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="应用配置"><a href="#应用配置" class="headerlink" title="应用配置"></a>应用配置</h3><p><code>netplan apply</code></p><p>PS: netplan对文件格式要求及其严格，必须比对好配置的层级划分，才能生效。</p><h2 id="验证配置"><a href="#验证配置" class="headerlink" title="验证配置"></a>验证配置</h2><h3 id="查看dns服务器配置"><a href="#查看dns服务器配置" class="headerlink" title="查看dns服务器配置"></a>查看dns服务器配置</h3><p><code>systemd-resolve --status</code></p><p><code>resolvectl status</code></p><h3 id="查看路由配置"><a href="#查看路由配置" class="headerlink" title="查看路由配置"></a>查看路由配置</h3><p><code>ip route</code></p><p>查看路由表</p><p><code>ip -6 route</code></p><p>查看ipv6路由表</p><h3 id="查看网卡详细信息和流量"><a href="#查看网卡详细信息和流量" class="headerlink" title="查看网卡详细信息和流量"></a>查看网卡详细信息和流量</h3><p><code>ip -s -h link</code></p><h3 id="查看IP地址和网卡"><a href="#查看IP地址和网卡" class="headerlink" title="查看IP地址和网卡"></a>查看IP地址和网卡</h3><p><code>ip addr</code></p><h3 id="查看网络邻居"><a href="#查看网络邻居" class="headerlink" title="查看网络邻居"></a>查看网络邻居</h3><p><code>ip neigh</code></p><p><code>ip -6 neigh</code></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/Elasticsearch-x-pack-core/">Elasticsearch 8.7 白金版激活</a></li><li><a href="https://songxwn.com/Linux-growpart/">Linux 虚拟机在线热扩容分区</a></li><li><a href="https://songxwn.com/elk_cluster/">Elasticsearch 安装配置集群系统</a></li><li><a href="https://chengzhaoxi.xyz/361d7ede.html">互联网算法工程开发常用技术</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>Ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OSI七层网络参考模型 随笔</title>
    <link href="/OSI/"/>
    <url>/OSI/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>开放式系统互联模型（英语：Open System Interconnection Model，缩写：OSI；简称为OSI模型）是一种概念模型，由国际标准化组织提出，一个试图使各种计算机在世界范围内互连为网络的标准框架。定义于ISO&#x2F;IEC 7498-1。</p><p>该模型将通信系统中的数据流划分为七个层，从分布式应用程序数据的最高层表示到跨通信介质传输数据的物理实现。每个中间层为其上一层提供功能，其自身功能则由其下一层提供。功能的类别通过标准的通信协议在软件中实现。</p><p>开放式系统互联模型的开发始于上世纪70年代后期，用以支持各种计算机联网方法的出现。在上世纪80年代，该模型成为国际标准化组织（ISO）开放系统互连小组的工作产品。</p><span id="more"></span><h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><p>承上启下,虚拟化上一层，向下一层提供服务。<br>让每一层具有互连性、互操作性和应用的可移植性的功能。</p><h1 id="物理层（Physical-Layer）第一层"><a href="#物理层（Physical-Layer）第一层" class="headerlink" title="物理层（Physical Layer）第一层"></a>物理层（Physical Layer）第一层</h1><p>主要功能为定义了网络的物理结构，传输的电磁标准，Bit流的编码及网络的时间原则，如分时复用及分频复用。决定了网络连接类型(端到端或多端连接)及物理拓扑结构。说的通俗一些，这一层主要负责实际的信号传输。</p><p>PS：实际的主要作用传输比特流，也就是物理现象表示的0或1，比如电流的电压差，电磁波的波形等。<br>透明传输：屏蔽不同的物理层介质和通信协议。</p><h1 id="数据链路层（Data-Link-Layer）第二层"><a href="#数据链路层（Data-Link-Layer）第二层" class="headerlink" title="数据链路层（Data Link Layer）第二层"></a>数据链路层（Data Link Layer）第二层</h1><p>负责网络寻址、错误侦测和改错。当表头和表尾被加至数据包时，会形成信息框（Info Box）。数据链表头（DLH）是包含了物理地址和错误侦测及改错的方法。数据链表尾（DLT）是一串指示数据包末端的字符串。例如以太网、无线局域网（Wi-Fi）和通用分组无线服务（GPRS）等。</p><p>分为两个子层：逻辑链路控制（logical link control，LLC）子层和介质访问控制（Media access control，MAC）子层。</p><p>PS：个人理解的作用为成帧和寻址，成帧就是将比特流切割成一个个帧，以太网根据帧头尾的帧定界符分割以太网帧。<br>以太网使用MAC进行链路内的寻址，物理层只管点对点传输，数据链路有了标识之后，用于广播网络，可进行单播通信。</p><p>根据帧后面的CRC进行校验帧的完整性。</p><h1 id="网络层（Network-Layer）-第三层"><a href="#网络层（Network-Layer）-第三层" class="headerlink" title="网络层（Network Layer） 第三层"></a>网络层（Network Layer） 第三层</h1><p>主要负责路由，选择合适的路径，进行阻塞控制等功能。</p><p>PS：为什么有了MAC地址寻址，还需要IP地址呢？ 因为当时的链路层协议并不是一个，所以可以通过IP连接不同的计算机网络。<br>且IP可被路由，不需要广播寻址信息。可以说在互联网上，主机的唯一标识就是IP地址。<br>其实每一层本质上都是对上一层的虚拟化、逻辑化。</p><h1 id="传输层（Transport-Layer）第四层"><a href="#传输层（Transport-Layer）第四层" class="headerlink" title="传输层（Transport Layer）第四层"></a>传输层（Transport Layer）第四层</h1><p>向拥护提供可靠的端到端(End-to-End)服务，它屏蔽了下层的数据通信细节，让用户及应用程序不需要考虑实际的通信方法。</p><p>PS：为什么有了IP地址了，咋还要传输层呢？<br>IP地址只能代表主机本身，不能区分主机上的不同应用。比如同一个服务器有DNS和HTTP服务，就可以通过53和80端口区分。<br>TCP也有提供可靠传输的作用。</p><h1 id="会话层（Session-Layer）第五层"><a href="#会话层（Session-Layer）第五层" class="headerlink" title="会话层（Session Layer）第五层"></a>会话层（Session Layer）第五层</h1><p>主要负责两个会话进程之间的通信，即两个会话层实体之间的信息交换，管理数据的交换。</p><p>PS：比如说做一个语音通话，表示层需要做拨号、呼叫、通话、暂停、挂断。</p><h1 id="表示层（Presentation-Layer）第六层"><a href="#表示层（Presentation-Layer）第六层" class="headerlink" title="表示层（Presentation Layer）第六层"></a>表示层（Presentation Layer）第六层</h1><p>把数据转换为能与接收者的系统格式兼容并适合传输的格式。</p><p>PS：数据的压缩、加密、转换服务。比如说视频编码H.264，安全协议TLS。<br>其实会话层和表示层出现都没有大规格单独实现过，都由应用层去实现。划分这两层的作用是为了让千千万万个应用共享标准的会话层和表示层。<br>像IP地址一样，应用不需要考虑数据在第三层是怎么传输的。</p><h1 id="应用层（Application-Layer）-第七层"><a href="#应用层（Application-Layer）-第七层" class="headerlink" title="应用层（Application Layer） 第七层"></a>应用层（Application Layer） 第七层</h1><p>提供为应用软件而设计的接口，以设置与另一应用软件之间的通信。例如：HTTP、HTTPS、FTP、Telnet、SSH、SMTP、POP3等。</p><h1 id="现实"><a href="#现实" class="headerlink" title="现实"></a>现实</h1><p>由于OSI是一个理想、学术上的模型，实际应用中表示层和会话层并不被单独实现。所以TCP&#x2F;IP 五层模型更加接近现实。</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/DNS_recursive_Server/">建立自有递归DNS服务器</a></li><li><a href="https://songxwn.com/zabbix_data/">Zabbix：历史数据与趋势数据</a></li><li><a href="https://songxwn.com/ospf-route-FA/">HCIE Datacom-01.3 IGP高级特性-OSPF-其他特性</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>什么是VXLAN</title>
    <link href="/VXLAN/"/>
    <url>/VXLAN/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>VXLAN（Virtual eXtensible Local Area Network，虚拟扩展局域网），<a href="https://datatracker.ietf.org/doc/rfc7348/">RFC7348</a><br>是由IETF定义的NVO3（Network Virtualization over Layer 3）标准技术之一，（还有NVGRE、STT等技术）<br>是对传统VLAN协议的一种扩展。VXLAN的特点是将L2的以太帧封装到UDP报文（即L2 over L4）中，并在L3网络中传输。</p><p>VXLAN本质上是一种隧道技术，在源网络设备与目的网络设备之间的IP网络上，建立一条逻辑隧道，<br>将用户侧报文经过特定的封装后通过这条隧道转发。从用户的角度来看，<br>接入网络的服务器就像是连接到了一个虚拟的二层交换机的不同端口上，可以方便地进行二层通信。</p><p>已经是事实上的网络虚拟化标准，公有云（阿里云、华为云、AWS等）的VPC大多数都是用VXLAN来作为数据转发层面。<br>不止在虚拟化环境，还有园区网络、运营商网络也开始使用。(灵活的二层接入、二层VPN隧道)</p><p><img src="https://i.328888.xyz/2023/05/10/iQuTyy.png" srcset="/img/loading.gif" lazyload></p><p>VXLAN已经成为当前构建数据中心的主流技术，是因为它能很好地满足数据中心里虚拟机动态迁移和多租户等需求。</p><span id="more"></span><h1 id="VXLAN有什么作用？"><a href="#VXLAN有什么作用？" class="headerlink" title="VXLAN有什么作用？"></a>VXLAN有什么作用？</h1><p>为什么需要VXLAN呢？这和数据中心服务器侧的虚拟化趋势紧密相关，<br>一方面服务器虚拟化后出现了虚拟机动态迁移，<br>要求提供一个无障碍接入的网络；另一方面，数据中心规模越发庞大，租户数量激增，<br>需要网络提供隔离海量租户的能力。采用VXLAN可以满足上述两个关键需求。</p><h2 id="虚拟机动态迁移，要求提供一个无障碍接入的网络"><a href="#虚拟机动态迁移，要求提供一个无障碍接入的网络" class="headerlink" title="虚拟机动态迁移，要求提供一个无障碍接入的网络"></a>虚拟机动态迁移，要求提供一个无障碍接入的网络</h2><h3 id="什么是服务器虚拟化技术？"><a href="#什么是服务器虚拟化技术？" class="headerlink" title="什么是服务器虚拟化技术？"></a><strong>什么是服务器虚拟化技术？</strong></h3><p>传统的数据中心物理服务器利用率太低，平均只有10%～15%，浪费了大量的电力能源和机房资源，所以出现了服务器虚拟化技术。如<a href="https://support.huawei.com/enterprise/zh/doc/EDOC1100087027#zh-cn_topic_0244767469_fig128721245865">图1-2</a>所示，服务器虚拟化技术是把一台物理服务器虚拟化成多台逻辑服务器，这种逻辑服务器被称为虚拟机（VM）。每个VM都可以独立运行，有自己的操作系统、APP，当然也有自己独立的MAC地址和IP地址，它们通过服务器内部的虚拟交换机（vSwitch）与外部实体网络连接。</p><p>图1-2 服务器虚拟化示意</p><p><img src="https://i.328888.xyz/2023/05/10/iYZVtE.png" srcset="/img/loading.gif" lazyload></p><p>通过服务器虚拟化，可以有效地提高服务器的利用率，降低能源消耗，降低数据中心的运营成本，所以虚拟化技术目前得到了广泛的应用。图1-3 传统的二三层网络架构限制了虚拟机的动态迁移范围</p><h3 id="什么是虚拟机动态迁移？"><a href="#什么是虚拟机动态迁移？" class="headerlink" title="什么是虚拟机动态迁移？"></a><strong>什么是虚拟机动态迁移？</strong></h3><p>所谓虚拟机动态迁移，就是在保证虚拟机上服务正常运行的同时，将一个虚拟机系统从一个物理服务器移动到另一个物理服务器的过程。该过程对于最终用户来说是无感知的，从而使得管理员能够在不影响用户正常使用的情况下，灵活调配服务器资源，或者对物理服务器进行维修和升级。</p><p>在服务器虚拟化后，虚拟机动态迁移变得常态化，为了保证迁移时业务不中断，就要求在虚拟机迁移时，不仅虚拟机的IP地址不变，而且虚拟机的运行状态也必须保持原状（例如TCP会话状态），所以虚拟机的动态迁移只能在同一个二层域中进行，而不能跨二层域迁移。</p><p>如<a href="https://support.huawei.com/enterprise/zh/doc/EDOC1100087027#zh-cn_topic_0244767469_fig387719372029">图1-3</a>所示，传统的二三层网络架构限制了虚拟机的动态迁移范围，迁移只能在一个较小的局部范围内进行，应用受到了极大的限制。</p><p><img src="https://i.328888.xyz/2023/05/10/iYZfmC.png" srcset="/img/loading.gif" lazyload></p><p>为了打破这种限制，实现虚拟机的大范围甚至跨地域的动态迁移，就要求把VM迁移可能涉及的所有服务器都纳入同一个二层网络域，这样才能实现VM的大范围无障碍迁移。</p><h3 id="VXLAN如何满足虚拟机动态迁移时对网络的要求？"><a href="#VXLAN如何满足虚拟机动态迁移时对网络的要求？" class="headerlink" title="VXLAN如何满足虚拟机动态迁移时对网络的要求？"></a><strong>VXLAN如何满足虚拟机动态迁移时对网络的要求？</strong></h3><p>众所周知，同一台二层交换机可以实现下挂服务器之间的二层通信，而且服务器从该二层交换机的一个端口迁移到另一个端口时，IP地址是可以保持不变的。这样就可以满足虚拟机动态迁移的需求了。VXLAN的设计理念和目标正是由此而来的。</p><p>从上一个小节我们可以知道，VXLAN本质上是一种隧道技术，当源和目的之间有通信需求时，便在数据中心IP网络之上创建一条虚拟的隧道，透明转发用户数据。而数据中心内相互通信的需求众多，这种隧道的建立方式几乎是全互联形态才能满足通信需求。</p><p>VXLAN可以提供一套方法论，在数据中心IP网络基础上，构建一张全互联的二层隧道虚拟网络，保证任意两点之间都能通过VXLAN隧道来通信，并忽略底层网络的结构和细节。从服务器的角度看，VXLAN为它们将整个数据中心基础网络虚拟成了一台巨大的“二层交换机”，所有服务器都连接在这台虚拟二层交换机上。而基础网络之内如何转发都是这台“巨大交换机”内部的事情，服务器完全无需关心。</p><p>图1-4 VXLAN将整个数据中心基础网络虚拟成了一台巨大的“二层交换机”</p><p><img src="https://i.328888.xyz/2023/05/10/iYZUGJ.png" srcset="/img/loading.gif" lazyload></p><p>基于这种“二层交换机”的模型，就很容易理解为什么VXLAN可以实现VM动态迁移了：将虚拟机从“二层交换机”的一个端口换到另一个端口，完全无需变更IP地址。</p><blockquote><p>说明：使用这种理念的技术协议，除了VXLAN外，还有NVGRE、STT等，本文仅对VXLAN进行说明。</p></blockquote><h3 id="数据中心租户数量激增，要求提供一个可隔离海量租户的网络"><a href="#数据中心租户数量激增，要求提供一个可隔离海量租户的网络" class="headerlink" title="数据中心租户数量激增，要求提供一个可隔离海量租户的网络"></a>数据中心租户数量激增，要求提供一个可隔离海量租户的网络</h3><p>众所周知，在传统的VLAN网络中，标准定义所支持的可用VLAN数量只有4000个左右。服务器虚拟化后，一台物理服务器中承载了多台虚拟机，每个虚拟机都有独立的IP地址和MAC地址，相当于接入数据中心的服务器成倍扩大了。另外，公有云或其它大型虚拟化云数据中心动辄需容纳上万甚至更多租户，VLAN的能力显然已经力不从心。</p><p>VXLAN如何来解决上述问题呢？VXLAN在VXLAN帧头中引入了类似VLAN ID的网络标识，称为VXLAN网络标识VNI（VXLAN Network ID），由24比特组成，理论上可支持多达16M的VXLAN段，从而满足了大规模不同网络之间的标识、隔离需求。下文我们会介绍VNI的详细作用。</p><h2 id="VXLAN与VLAN之间有何不同"><a href="#VXLAN与VLAN之间有何不同" class="headerlink" title="VXLAN与VLAN之间有何不同"></a>VXLAN与VLAN之间有何不同</h2><p>VLAN作为传统的网络隔离技术，在标准定义中VLAN的数量只有4000个左右，无法满足大型数据中心的租户间隔离需求。另外，VLAN的二层范围一般较小且固定，无法支持虚拟机大范围的动态迁移。图1-5 VXLAN报文格式（以外层IP头为IPv4格式为例）</p><p>VXLAN完美地弥补了VLAN的上述不足，一方面通过VXLAN中的24比特VNI字段（如<a href="https://support.huawei.com/enterprise/zh/doc/EDOC1100087027#zh-cn_topic_0244198676_fig516416432554">图1-5</a>所示），提供多达<strong>16M</strong>租户的标识能力，远大于VLAN的4000；另一方面，VXLAN本质上在两台交换机之间构建了一条穿越数据中心基础IP网络的虚拟隧道，将数据中心网络虚拟成一个巨型“二层交换机”，满足虚拟机大范围动态迁移的需求。</p><p>虽然从名字上看，VXLAN是VLAN的一种扩展协议，但VXLAN构建虚拟隧道的本领已经与VLAN迥然不同了。</p><p>下面就让我们来看下，VXLAN报文到底长啥样。</p><p><img src="https://i.328888.xyz/2023/05/10/iYZk7o.png" srcset="/img/loading.gif" lazyload></p><p>图1-5 VXLAN报文格式（以外层IP头为IPv4格式为例）</p><p><img src="https://i.328888.xyz/2023/05/10/iYZ0PN.png" srcset="/img/loading.gif" lazyload></p><p>如上图所示，VTEP对VM发送的原始以太帧（Original L2 Frame）进行了以下“包装”：</p><ul><li>VXLAN Header</li><li>UDP Header</li><li>Outer IP Header</li><li>Outer MAC Header</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://support.huawei.com/enterprise/zh/doc/EDOC1100087027">https://support.huawei.com/enterprise/zh/doc/EDOC1100087027</a></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/zabbix-reboot-SNMPv3/">Zabbix SNMPv3 设备重启后无法监控问题</a></li><li><a href="https://songxwn.com/DNS_recursive_Server/">建立自有递归DNS服务器</a></li><li><a href="https://songxwn.com/zabbix_data/">Zabbix：历史数据与趋势数据</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>network</category>
      
      <category>vxlan</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>vxlan</tag>
      
      <tag>l2vpn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QinQ 随笔</title>
    <link href="/QINQ/"/>
    <url>/QINQ/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>QinQ（802.1Q-in-802.1Q），也叫做VLAN Stacking或Double VLAN，由IEEE 802.1ad标准定义，<br>是一项扩展VLAN空间的技术，通过在802.1Q标签报文的基础上再增加一层802.1Q的Tag来达到扩展VLAN空间的目的。<br>一般应用在骨干网中，通过将用户私网VLAN Tag封装在公网VLAN Tag中，使报文带着两层VLAN Tag穿越运营商的骨干网络（公网），扩充VLAN数量，实现对用户的精细化管理。</p><span id="more"></span><h2 id="QINQ实现方式"><a href="#QINQ实现方式" class="headerlink" title="QINQ实现方式"></a>QINQ实现方式</h2><p>QinQ可分为两种：基本QinQ和灵活QinQ。<br>(1) 基本QinQ<br>基本QinQ是基于端口方式实现的。开启端口的基本QinQ功能后，当该端口接收到报文，设备会为该报文打上本端口缺省VLAN的VLAN Tag。如果接收到的是已经带有VLAN Tag的报文，该报文就成为双Tag的报文；如果接收到的是不带VLAN Tag的报文，该报文就成为带有端口缺省VLAN Tag的报文。<br>(2) 灵活QinQ<br>灵活QinQ是对QinQ的一种更灵活的实现，它是基于端口与VLAN相结合的方式实现的。除了能实现所有基本QinQ的功能外，对于同一个端口接收的报文还可以根据不同的VLAN做不同的动作，可以实现以下功能：</p><ul><li>为具有不同内层VLAN ID的报文添加不同的外层VLAN Tag。（基本只能固定一个）</li><li>根据报文的原有内层VLAN的802.1p优先级标记外层VLAN报文的802.1p优先级。</li><li>可以在添加外层VLAN Tag的同时对内层用户VLAN ID进行修改。（标签替换）</li></ul><h2 id="为什么？"><a href="#为什么？" class="headerlink" title="为什么？"></a>为什么？</h2><p>IEEE 802.1Q中定义的VLAN ID只有12个比特，仅能表示4096个VLAN域，随着网络规模的扩大，4096个VLAN域已无法满足网络扩容的需求，为此，IEEE 802.1ad中在原有的802.1Q报文的基础上增加一层802.1Q Tag（也叫做VLAN Tag或标签），使VLAN数量增加到4094×4094，这种双层Tag的报文就叫做QinQ报文。</p><p>随着以太网的进一步发展以及运营商精细化运作的要求，QinQ的双层Tag又有了新的应用场景。它的内外层Tag可以代表不同的信息，如内层Tag代表用户，外层Tag代表业务。另外，QinQ报文带着两层Tag穿越运营商网络，内层Tag透明传送，也是一种简单、实用的VPN技术。</p><p>所以，QinQ产生的两大背景是：一是解决日益紧缺的VLAN ID资源问题；二是满足业务精细化管理的需求。</p><h2 id="报文结构"><a href="#报文结构" class="headerlink" title="报文结构"></a>报文结构</h2><pre><code class="hljs">        +-----------+-----------+-----------+-----------+-------------+------------------+----------+        |   DMAC    |   SMAC    |   ETPE    |    TAG    |  LEN/ETYPE  |       Data       |   FCS    |        |  6 Bytes  |  6 Bytes  |  2 Bytes  |  2 Bytes  |   2 Bytes   |  Variable length | 4 Bytes  |        +-----------+-----------+-----------+-----------+-------------+------------------+----------+                                |                       |                              |     |                      |                           |            |                      |                        |                   |                       |                        |                       |                       |+-----------+-----------+-----------+-----------+-----------+-----------+-------------+------------------+----------+|   DMAC    |   SMAC    |   ETPE    |    TAG    |   ETPE    |    TAG    |  LEN/ETYPE  |       Data       |   FCS    ||  6 Bytes  |  6 Bytes  |  2 Bytes  |  2 Bytes  |  2 Bytes  |  2 Bytes  |   2 Bytes   |  Variable length | 4 Bytes  |+-----------+-----------+-----------+-----------+-----------+-----------+-------------+------------------+----------+                        |           |           |                     |           |                    |                  |           |                            |               |           |                                       |               +-----------+--------------+---------+--------------+               |   0x8100  |   Priority   |   CFI   |  VLAN ID     |               +-----------+--------------+---------+--------------+                                          </code></pre><h2 id="基本QinQ"><a href="#基本QinQ" class="headerlink" title="基本QinQ"></a>基本QinQ</h2><h2 id="灵活QinQ"><a href="#灵活QinQ" class="headerlink" title="灵活QinQ"></a>灵活QinQ</h2><h1 id="VLAN-Mapping-VLAN-映射-x2F-vlan-translation"><a href="#VLAN-Mapping-VLAN-映射-x2F-vlan-translation" class="headerlink" title="VLAN Mapping (VLAN 映射&#x2F; vlan-translation)"></a>VLAN Mapping (VLAN 映射&#x2F; vlan-translation)</h1><p>VLAN Mapping通过修改报文携带的VLAN Tag来实现不同VLAN的相互映射。</p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>在某些场景中，两个VLAN相同的二层用户网络通过骨干网络互联，为了实现用户之间的二层互通，以及二层协议（例如MSTP等）的统一部署，需要实现两个用户网络的无缝连接，此时就需要骨干网可以传输来自用户网络的带有VLAN Tag的二层报文。而在通常情况下，骨干网的VLAN规划和用户网络的VLAN规划是不一致的，所以在骨干网中无法直接传输用户网络的带有VLAN Tag的二层报文。</p><p>解决这个问题的方法有两个，其中一个是通过QinQ或者VPLS等二层隧道技术，将用户带有VLAN Tag的二层报文封装在骨干网报文中进行传输，可以实现用户带有VLAN Tag的二层报文的透传。但是这种方法一方面需要增加额外的报文开销（增加一层封装），另外一方面，二层隧道技术可能会对某些二层协议报文的透传支持不是非常完善。另外一种方法就是通过VLAN Mapping技术，一侧用户网络的带有VLAN Tag的二层报文进入骨干网后，骨干网边缘设备将用户网络的VLAN（C-VLAN）修改为骨干网中可以识别和承载的VLAN（S-VLAN），传输到另一侧之后，边缘设备再将S-VLAN修改为C-VLAN。这样就可以很好的实现两个用户网络二层无缝连接。</p><p>在另一种场景中，如果由于规划的差异，导致两个直接相连的二层网络中部署的VLAN ID不一致。但是用户又希望可以把两个网络作为单个二层网络进行统一管理，例如用户二层互通和二层协议的统一部署。此时也可以在连接两个网络的交换机上部署VLAN Mapping功能，实现两个网络之间不同VLAN ID的映射，达到二层互通和统一管理的目的</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/QinQ.html">https://info.support.huawei.com/info-finder/encyclopedia/zh/QinQ.html</a></p><p><a href="https://support.huawei.com/enterprise/zh/doc/EDOC1100197875/10f2c347">https://support.huawei.com/enterprise/zh/doc/EDOC1100197875/10f2c347</a></p><p><a href="http://www.h3c.com/cn/d_200805/605855_30003_0.htm">http://www.h3c.com/cn/d_200805/605855_30003_0.htm</a></p><p><a href="http://www.h3c.com/cn/d_201904/1173020_30005_0.htm">http://www.h3c.com/cn/d_201904/1173020_30005_0.htm</a></p><p><a href="https://www.cisco.com/c/zh_cn/support/docs/smb/switches/cisco-350-series-managed-switches/smb5822-configure-vlan-mapping-on-a-switch-through-the-cli.html?dtid=osscdc000283">https://www.cisco.com/c/zh_cn/support/docs/smb/switches/cisco-350-series-managed-switches/smb5822-configure-vlan-mapping-on-a-switch-through-the-cli.html?dtid=osscdc000283</a></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/DNS_recursive_Server/">建立自有递归DNS服务器</a></li><li><a href="https://songxwn.com/zabbix_data/">Zabbix：历史数据与趋势数据</a></li><li><a href="https://songxwn.com/ospf-route-FA/">HCIE Datacom-01.3 IGP高级特性-OSPF-其他特性</a></li><li><a href="https://blogs.kainy.cn/2010/04/不同系统下_VPN_设置教程/">不同系统下 VPN 设置教程</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>vpn</tag>
      
      <tag>vlan</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下的网络测试</title>
    <link href="/network-test/"/>
    <url>/network-test/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本文章介绍了 Linux下iperf3（点对点测试），speedtest（公网测试）的安装和使用方法。</p><span id="more"></span><h2 id="iperf3"><a href="#iperf3" class="headerlink" title="iperf3"></a>iperf3</h2><h3 id="Centos-RHEL、Fedora、Rocky-Linux等Redhat系发行版-安装iperf3"><a href="#Centos-RHEL、Fedora、Rocky-Linux等Redhat系发行版-安装iperf3" class="headerlink" title="Centos (RHEL、Fedora、Rocky Linux等Redhat系发行版) 安装iperf3"></a>Centos (RHEL、Fedora、Rocky Linux等Redhat系发行版) 安装iperf3</h3><p>yum -y install iperf3</p><p>systemctl stop firewalld.service</p><p>临时关闭防火墙，作为服务端启动时候，默认会使用5201端口，需要放开此端口。</p><h3 id="Ubuntu（Mint、Debian系发行版）安装iperf3"><a href="#Ubuntu（Mint、Debian系发行版）安装iperf3" class="headerlink" title="Ubuntu（Mint、Debian系发行版）安装iperf3"></a>Ubuntu（Mint、Debian系发行版）安装iperf3</h3><p>sudo apt update</p><p>sudo apt install iperf3</p><p>sudo ufw disable</p><p>永久关闭防火墙，作为服务端启动时候，默认会使用5201端口，需要放开此端口。</p><h3 id="iperf3-使用方法（全平台通用）"><a href="#iperf3-使用方法（全平台通用）" class="headerlink" title="iperf3 使用方法（全平台通用）"></a>iperf3 使用方法（全平台通用）</h3><p>iperf3 -s</p><p>开启iperf3 服务器端，默认使用5201端口。</p><p>iperf3 -s -p 9527</p><p>开启服务器端，指定开启端口为9527。</p><p>iperf3 -c 192.168.0.1 </p><p>-c 参数客户端指定服务器端IP或域名进行打流测试，默认使用TCP端口5201测试。<br>(默认使用最大带宽，TCP 延迟过大可能导致带宽打不满，建议使用 -P 5 参数多线程测试)</p><p>iperf3 -c 192.168.0.1 -p 12345 -i 1 -t 20 -R </p><p>-p 为指定服务器端口， -i 为信息输出间隔时间，-t 为指定测试时间，-R 为反向模式，客户端收，服务器发。</p><p>iperf3 -c 192.168.0.1 -u -b 30m</p><p>-u 为UDP测试数据，-b为指定带宽去测试， UDP默认只使用1M。</p><p>iperf官网： <a href="https://iperf.fr/">https://iperf.fr</a></p><p>PS: 注意云服务器会有安全组，也需要开放端口。</p><h2 id="speedtest"><a href="#speedtest" class="headerlink" title="speedtest"></a>speedtest</h2><h3 id="Centos-speedtest-CLI客户端安装-RHEL、Fedora、Rocky-Linux等Redhat系发行版"><a href="#Centos-speedtest-CLI客户端安装-RHEL、Fedora、Rocky-Linux等Redhat系发行版" class="headerlink" title="Centos speedtest CLI客户端安装  (RHEL、Fedora、Rocky Linux等Redhat系发行版)"></a>Centos speedtest CLI客户端安装  (RHEL、Fedora、Rocky Linux等Redhat系发行版)</h3><p>curl -s <a href="https://install.speedtest.net/app/cli/install.rpm.sh">https://install.speedtest.net/app/cli/install.rpm.sh</a> | sudo bash</p><p>sudo yum -y install speedtest</p><p>添加yum源 进行安装。</p><h3 id="Ubuntu-speedtest-CLI客户端安装-（Mint、Debian系发行版）"><a href="#Ubuntu-speedtest-CLI客户端安装-（Mint、Debian系发行版）" class="headerlink" title="Ubuntu speedtest CLI客户端安装 （Mint、Debian系发行版）"></a>Ubuntu speedtest CLI客户端安装 （Mint、Debian系发行版）</h3><p>sudo apt-get install curl</p><p>curl -s <a href="https://install.speedtest.net/app/cli/install.deb.sh">https://install.speedtest.net/app/cli/install.deb.sh</a> | sudo bash</p><p>sudo apt-get install speedtest</p><p>添加apt源进行安装，</p><h3 id="二进制包-speedtest-CLI客户端安装（下载二进制包解压运行）"><a href="#二进制包-speedtest-CLI客户端安装（下载二进制包解压运行）" class="headerlink" title="二进制包 speedtest CLI客户端安装（下载二进制包解压运行）"></a>二进制包 speedtest CLI客户端安装（下载二进制包解压运行）</h3><p>wget <a href="https://install.speedtest.net/app/cli/ookla-speedtest-1.1.1-linux-x86_64.tgz">https://install.speedtest.net/app/cli/ookla-speedtest-1.1.1-linux-x86_64.tgz</a></p><p>tar -zxvf ookla-speedtest-1.1.1-linux-x86_64.tgz</p><p>.&#x2F;speedtest</p><p>执行二进制文件测试。</p><h3 id="speedtest-使用方法"><a href="#speedtest-使用方法" class="headerlink" title="speedtest 使用方法"></a>speedtest 使用方法</h3><p>speedtest</p><p>Do you accept the license? [type YES to accept]: YES</p><p>直接执行命令，然后输入YES,会根据IP选择最近的节点进行最大公网上下行和延迟测试。</p><p>speedtest -s 37235</p><p>指定服务器节点进行测试，下面是服务器节点ID。</p><p>ID：36646 中国联通河南5G（中国郑州）</p><p>ID：41852 河南电信5G（中国郑州</p><p>ID：5039中国联通济南分公司（中国济南）</p><p>ID：26412 济南联通5G（中国济南）</p><p>ID：26180 山东联通5G（中国济南）</p><p>ID：41912 中国移动河北有限公司(石家庄, 中国）</p><p>ID：4863 中国联通西安分公司（中国西安）</p><p>ID：17145 中国电信安徽5G（中国合肥）</p><p>ID：23844 中国电信武汉分公司（中国武汉）</p><p>ID：29353 武汉你好5G（中国武汉）</p><p>ID：41009 湖北联通5G（中国武汉）</p><p>ID：26352 中国电信江苏5G（中国南京）</p><p>ID：13704 中国联通（中国南京）</p><p>ID：27249 中国移动江苏5G（中国南京）</p><p>ID：34115 中国电信天津-5G（中国天津）</p><p>ID：35722 中国电信天津（天津）</p><p>ID：27154 中国联通-5G（中国天津）</p><p>ID：17320 中国移动江苏5G（中国镇江）</p><p>ID：36663 中国电信江苏5G（中国镇江）</p><p>ID：5145 北京联通（中国北京）</p><p>ID：5505 北京宽带网（中国北京）</p><p>ID：32291 中国移动5G（中国常州）</p><p>ID：30232 内蒙古中国移动5G（呼和浩特）</p><p>ID：28225 湖南电信5G（中国长沙）</p><p>ID：4870 湖南联通5G（中国长沙）</p><p>ID：28491 中国移动湖南5G（中国长沙）</p><p>ID：40131 中国移动苏州5G（中国苏州）</p><p>ID：5396 中国电信江苏5G（中国苏州）</p><p>ID：30852 杜克昆山大学（中国昆山）</p><p>ID：31815 维克斯特尔（中国银川市）</p><p>ID：7509 中国电信浙江省分公司（中国杭州）</p><p>ID：24447 中国联通5G（中国上海）</p><p>ID：3633 中国电信（中国上海）</p><p>ID：25637 中国移动5G（中国上海）</p><p>ID：5530 CCN（中国重庆）</p><p>ID：16145 兰州，中国移动，甘肃（中国兰州）</p><p>ID：3973 中国电信（中国兰州）</p><p>ID：29071 中国电信(成都, 中国）</p><p>ID：24337 中国移动集团四川有限公司（中国成都）</p><p>ID：35527 sccn（中国成都）</p><p>ID：4884 中国联通福建（中国福州）</p><p>ID：34988 中国电信辽宁5G（中国沈阳）</p><p>ID：37235 中国联通（沈阳）</p><p>ID：30293 中国移动内蒙5G（中国通辽）</p><p>ID：29107 亚太电信（台湾桃园）</p><p>ID：24462 Homeplus（台湾桃园）</p><p>ID：4938 首席电信（台湾桃园）</p><p>ID：18452 中华移动（台湾桃园）</p><p>ID：9484 中国联通（中国长春）</p><p>speedtest CLI客户端官网：<a href="https://www.speedtest.net/apps/cli">https://www.speedtest.net/apps/cli</a><br>测试节点信息来源于：<a href="https://biger.me/184.html">https://biger.me/184.html</a></p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/Elasticsearch-x-pack-core/">Elasticsearch 8.7 白金版激活</a></li><li><a href="https://songxwn.com/Linux-growpart/">Linux 虚拟机在线热扩容分区</a></li><li><a href="https://songxwn.com/elk_cluster/">Elasticsearch 安装配置集群系统</a></li><li><a href="https://chengzhaoxi.xyz/361d7ede.html">互联网算法工程开发常用技术</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IPv6的ICMPv6协议</title>
    <link href="/ipv6-icmpv6/"/>
    <url>/ipv6-icmpv6/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>ICMPv6是IPv6的基础协议之一，协议类型号（即IPv6 Next Header）为58。<br>除了提供基本的检测网络连通性功能外，还提供了邻居发现(NDP)、无状态地址配置(SLAAC)、<br>重复地址检测（DAD）、PMTU等新功能。</p><span id="more"></span><h1 id="IPv6邻居发现协议-NDP概述"><a href="#IPv6邻居发现协议-NDP概述" class="headerlink" title="IPv6邻居发现协议 - NDP概述"></a>IPv6邻居发现协议 - NDP概述</h1><h2 id="所使用的ICMPv6报文"><a href="#所使用的ICMPv6报文" class="headerlink" title="所使用的ICMPv6报文"></a>所使用的ICMPv6报文</h2><p>RS (Router Solicitation)  路由器请求报文<br>RA (Router Advertisement) 路由器通告报文<br>NS（Neighbor Solicitation) 邻居请求报文<br>NA (Neighbor Advertisement) 邻居通告报文</p><h2 id="地址解析"><a href="#地址解析" class="headerlink" title="地址解析"></a>地址解析</h2><p>IPv6的地址解析，不再使用ARP。也不再使用广播发送报文。</p><p>地址解析在网络层完成，这样可以针对不同的链路层协议采用相同的地址解析协议。（然而现在是以太网的天下）通过ICMPv6（类型135的NS及类型136的NA报文）来实现地址解析。</p><p>NS报文发送使用组播的方式，报文的目的IPv6地址为被请求的IPv6地址对应的“被请求节点组播地址”，报文的目的MAC地址为组播MAC。（交换机对于组播MAC地址也会泛洪。）</p><p>采用组播的方式发送NS消息相比于广播的方式更加的高效，也减少了对其他节点的影响和对二层网络的性能压力。（网卡会过滤不需要的组播帧，减少上一层的负担）</p><p>可以使用三层的安全机制进行认证（例如IPSec）,避免地址解析攻击。（一般默认不开启）</p><h3 id="NS和NA报文"><a href="#NS和NA报文" class="headerlink" title="NS和NA报文"></a>NS和NA报文</h3><p>地址解析过程中使用了两种ICMPv6报文：邻居请求（Neighbor Solicitation）和邻居通告（Neighbor Advertisement）。</p><ul><li>邻居请求 Neighbor Solicitation<ul><li>ICMP的Type为135，Code为0；</li><li>Target Address是需要解析的IPv6地址，因此该处不准出现组播地址。</li><li>邻居请求发送者的链路层地址会被放在Options字段中。（感觉没有必要，因为源MAC地址已经是NS发送者的。）</li></ul></li><li>邻居通告 Neighbor Advertisement<ul><li>ICMP Type为136，Code为0；</li><li>R标志（Router flag）表示发送者是否为路由器，如果1则表示是；</li><li>S标志（Solicited flag）表示发送邻居通告是否是响应某个邻居请求，如果1则表示是；</li><li>O标志（Overide flag）表示邻居通告中的消息是否覆盖已有的条目信息，如果1则表示是；</li><li>Traget Address表示所携带的链路层地址对应的IPv6地址。</li><li>被请求的链路层地址被放在Options字段中，其格式仍然采用TLV格式，具体可以参考RFC2463。</li></ul></li></ul><h3 id="地址解析过程"><a href="#地址解析过程" class="headerlink" title="地址解析过程"></a>地址解析过程</h3><p><img src="/images/NDP.png" srcset="/img/loading.gif" lazyload alt="upload successful"></p><p>如上图</p><ul><li>假设PC想要解析R1的2001::2这个地址对应的MAC地址，详细过程如下：<ul><li><p>PC将发送一个NS报文达到这个目的。这个NS报文的源地址是2001::1，目的地址则是2001::2对应的被请求节点组播地址。 </p></li><li><p>R1收到此NS报文之后，获取其中的源IPv6地址R1接收此NS报文，根据报文内的源IPv6地址和源MAC，记录下PC这个邻居，同时根据自身的IPv6和MAC，回复单播NA报文。和源MAC。这样双方都可以建立一条关于对方的邻居信息表项。</p></li></ul></li></ul><h3 id="邻居状态机"><a href="#邻居状态机" class="headerlink" title="邻居状态机"></a>邻居状态机</h3><p>通过邻居或到达邻居的通信，会因各种原因而中断，包括硬件故障、接口卡的热插入等。如果目的地失效，则恢复是不可能的，通信失败；如果路径失效，则恢复是可能的。 因此节点需要维护一张邻居表，每个邻居都有相应的状态，状态之间可以迁移。(IPv4 的ARP仅靠倒计时去维护)</p><p>RFC中定义了5种邻居状态，分别是：未完成（Incomplete）、可达（Reachable）、陈旧（Stale）、延迟（Delay）、探查（Probe）。</p><p><img src="/images/NS.png" srcset="/img/loading.gif" lazyload alt="upload successful"></p><p>• R1先发送NS报文，并生成缓存条目，此时，邻居状态为Incomplete。<br>• 若收到R2回复的NA报文，则邻居状态由Incomplete变为Reachable，<br>否则固定时间后邻居状态由Incomplete变为Empty。<br>• 经过邻居可达时间（默认30s），邻居状态由Reachable变为Stale，即<br>未知是否可达。<br>• 如果在Reachable状态，R1收到R2的非请求NA报文，且其中携带的R2的链路<br>层地址和表项中不同，则邻居状态马上变为Stale。<br>• 在Stale状态若R1要向R2发送数据，则邻居状态由Stale变为Delay，并<br>发送NS请求。<br>• 在经过一段固定时间后，邻居状态由Delay变为Probe，其间若有NA应<br>答，则邻居状态由Delay变为Reachable。<br>• 在Probe状态，R1每隔一定时间间隔（默认1s）发送单播NS，发送固定<br>次数后，有应答则邻居状态变为Reachable，否则邻居状态变为Empty。</p><h2 id="重复地址检测DAD"><a href="#重复地址检测DAD" class="headerlink" title="重复地址检测DAD"></a>重复地址检测DAD</h2><p>当设备获取到IPv6地址后，一定会使用ICMPv6报文进行DAD。且当DAD通过之后，才会使用该地址。（无论通过那种方法获取）</p><p><img src="/images/DAD.png" srcset="/img/loading.gif" lazyload alt="upload successful"></p><ul><li>假设R1为已在线设备，IPv6地址为2001::FFFF&#x2F;64。PC上线之后，也配置了相同的IPv6地址，在正式使用这个地址之前，PC会对此地址做DAD，过程如下:<ul><li>PC向链路上以组播的方式发送一个NS报文，该NS的源IPv6地址为“::”，目的IPv6地址为要进行DAD的2001::FFFF对应的被请求节点组播地址，也就是FF02::1:FF00:FFFF。这个NS里包含着要做DAD的目标地址2001::FFFF。</li><li>链路上的节点都会收到这个组播的NS报文，没有配置2001::FFFF的节点接口由于没有加入该地址对应的被请求节点组播组，因此在收到这个NS的时候默默丢弃。而R1在收到这个NS后，由于它的接口配置了2001::FFFF地址，因此接口会加入组播组FF02::1:FF00:FFFF，而此刻所收到的报文又是以该地址为目的地址，因此它会解析该报文，它发现对方进行DAD的目标地址与自己本地接口地址相同，于是立即回送一个NA报文，该报文的目的地址是FF02::1，也就是所有节点组播地址，同时在报文内写入目标地址2001::FFFF，以及自己接口的MAC地址。</li><li>当PC收到这个NA后，它就知道2001::FFFF在链路上已经有人在用了，因此将该地址标记为Duplicate（重复的），该地址将不能用于通信。若未收到NA报文，则PC判断这个IPv6地址可以用，DAD机制有点类似于IPv4中的免费ARP检测重复地址。</li></ul></li></ul><h2 id="IPv6的无状态地址配置"><a href="#IPv6的无状态地址配置" class="headerlink" title="IPv6的无状态地址配置"></a>IPv6的无状态地址配置</h2><p><img src="/images/SLACC.jpg" srcset="/img/loading.gif" lazyload alt="upload successful"></p><p>主机根据RA中的地址前缀，并结合本地生成的64 bit接口标识（例如EUI-64），生成单播地址。<br>仅可以获得IPv6地址信息，（较新标准可以获取DNS）无法获得NIS、SNTP服务器等参数，需要配合DHCPv6或者手工配置来获取其他配置信息。</p><h1 id="Path-MTU"><a href="#Path-MTU" class="headerlink" title="Path MTU"></a>Path MTU</h1><p>在IPv4中，报文如果过大，必须要分片进行发送，所以在每个节点发送报文之前，设备都会根据发送接口的最大传输单元MTU（Maximum Transmission Unit）来对报文进行分片。但是在IPv6中，为了减少中间转发设备的处理压力，中间转发设备不对IPv6报文进行分片，报文的分片将在源节点进行。当中间转发设备的接口收到一个报文后，如果发现报文长度比转发接口的MTU值大，则会将其丢弃；同时将转发接口的MTU值通过ICMPv6报文的“Packet Too Big”消息发给源端主机，源端主机以该值重新发送IPv6报文，这样带来了额外流量开销。PMTU发现协议可以动态发现整条传输路径上各链路的MTU值，减少由于重传带来的额外流量开销。</p><p>PMTU协议是通过ICMPv6的Packet Too Big报文来完成的。首先源节点假设PMTU就是其出接口的MTU，发出一个试探性的报文，当转发路径上存在一个小于当前假设的PMTU时，转发设备就会向源节点发送Packet Too Big报文，并且携带自己的MTU值，此后源节点将PMTU的假设值更改为新收到的MTU值继续发送报文。如此反复，直到报文到达目的地之后，源节点就能知道到达目的地的PMTU了。</p><p><img src="/images/PMTU.png" srcset="/img/loading.gif" lazyload alt="upload successful"></p><p>如上图，整条传输路径需要通过4条链路，每条链路的MTU分别是1500、1500、1400、1300，当源节点发送一个分片报文的时候，首先按照PMTU为1500进行分片并发送分片报文，当到达MTU为1400的出接口时，设备返回Packet Too Big错误，同时携带MTU值为1400的信息。<br>源节点接收到之后会将报文重新按照PMTU为1400进行分片并再次发送一个分片报文，当分片报文到达MTU值为1300的出接口时，同样返回Packet Too Big错误，携带MTU值为1300的信息。之后源节点重新按照PMTU为1300进行分片并发送分片报文，最终到达目的地，这样就找到了该路径的PMTU。</p><p>PS：IPv6 要求链路层最低MTU为 1280。</p><h1 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h1><p>重定向是指网关设备发现报文从其它网关设备转发更优，它就会发送重定向报文告知报文<br>的发送者，让报文发送者选择另一个网关设备。</p><p><img src="/images/icmp-re.png" srcset="/img/loading.gif" lazyload alt="upload successful"></p><p>1、PC1希望发送报文到服务器，于是根据配置的默认网关地址向网关R2发送报文。</p><p>2、网关R2收到报文后，检查报文信息，发现报文应该 转发到与PC1在同一网段的另一个网关设备R1,此 转发路径是更优的路径，于是R2会向PC1发送一个 重定向消息，通知PC1去往服务器的报文应直接发给R1。<br>3、PC1收到重定向消息后，会向R1发送报文，R1再将该报文转发至服务器。</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/DNS_recursive_Server/">建立自有递归DNS服务器</a></li><li><a href="https://songxwn.com/zabbix_data/">Zabbix：历史数据与趋势数据</a></li><li><a href="https://songxwn.com/ospf-route-FA/">HCIE Datacom-01.3 IGP高级特性-OSPF-其他特性</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>IPv6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows上的IPv6</title>
    <link href="/ipv6-Windows/"/>
    <url>/ipv6-Windows/</url>
    
    <content type="html"><![CDATA[<h1 id="Windows和EUI-64"><a href="#Windows和EUI-64" class="headerlink" title="Windows和EUI-64"></a>Windows和EUI-64</h1><p>通常情况下，链路本地地址的接口ID是由MAC地址来生成的，标准叫做EUI-64。（RFC 2373）<br>生成的64bit接口ID,叫做接口标识符。<br>SLAAC（无状态分配）所产生的地址，其接口ID也会使用接口标识符。与链路本地地址的接口ID一样。<br>而这只是在Windows Vista和Windows 2008之前的情况下。<br>为了安全，Windows开始使用了随机化接口ID和临时地址。（RFC 3041）</p><span id="more"></span><h1 id="随机标识符-x2F-接口ID"><a href="#随机标识符-x2F-接口ID" class="headerlink" title="随机标识符&#x2F;接口ID"></a>随机标识符&#x2F;接口ID</h1><p>由于EUI-64生成的接口标识符,是由MAC地址生成。所以很容易根据IPv6地址来推断出设备的MAC地址。<br>EUI-64 是将48bit的MAC地址，其第七位取反，然后中间填充FFFE组成64bit的接口ID。<br>所以Windows会随机生成 64bit的接口标识符。看下面的输出，链路本地地址明显是和MAC地址无关的。<br>此地址是固定，一般生成之后，不会改变。</p><blockquote><p>C:\Users\admin&gt; ipconfig &#x2F;all<br>  描述. . . . . . . . . . . . . . . : Intel(R) Wi-Fi 6 AX200 160MHz<br>  物理地址. . . . . . . . . . . . . : 46-68-5C-AA-41-11<br>  DHCP 已启用 . . . . . . . . . . . : 是<br>  自动配置已启用. . . . . . . . . . : 是<br>  本地链接 IPv6 地址. . . . . . . . : fe80::1e2:5910:14f3:a9d5%13(首选)</p></blockquote><h1 id="临时地址"><a href="#临时地址" class="headerlink" title="临时地址"></a>临时地址</h1><p>由于SLAAC产生的地址的接口ID，是接口标识符的，所以后64bit是基本不变的，这样很容易被跟踪。<br>所以需要临时地址。<br>临时地址也是一样随机生成64bit接口ID，用于主机作为源IP主动访问网站和应用。但为了安全，会经常变化。<br>如在接口重新连接的时候，或者临时IPv6生存期到期的时候。会重新随机生成另一个临时IPv6地址。<br>在某种情况下，你会看到多个临时IPv6地址。这是因为旧的临时地址过期的时候，旧地址还有建立的连接。</p><h1 id="查看IPv6协议配置"><a href="#查看IPv6协议配置" class="headerlink" title="查看IPv6协议配置"></a>查看IPv6协议配置</h1><p>使用 Powershell命令 <code>get-netipv6protocol</code> </p><blockquote><p>DefaultHopLimit               : 128<br>NeighborCacheLimit(Entries)   : 256<br>RouteCacheLimit(Entries)      : 4096<br>ReassemblyLimit(Bytes)        : 262676960<br>IcmpRedirects                 : Enabled<br>SourceRoutingBehavior         : DontForward<br>DhcpMediaSense                : Enabled<br>MediaSenseEventLog            : Disabled<br>MldLevel                      : All<br>MldVersion                    : Version2<br>MulticastForwarding           : Disabled<br>GroupForwardedFragments       : Disabled<br>RandomizeIdentifiers          : Enabled  &#x2F;&#x2F;随机接口ID开启<br>AddressMaskReply              : Disabled<br>UseTemporaryAddresses         : Enabled  &#x2F;&#x2F;临时IPv6地址开启<br>MaxTemporaryDadAttempts       : 3        &#x2F;&#x2F;临时IPv6的重复地址检测尝试次数<br>MaxTemporaryValidLifetime     : 7.00:00:00 &#x2F;&#x2F;临时地址最大有效时间。<br>MaxTemporaryPreferredLifetime : 7.00:00:00<br>TemporaryRegenerateTime       : 00:00:05<br>MaxTemporaryDesyncTime        : 00:10:00<br>DeadGatewayDetection          : Enabled</p></blockquote><h1 id="SLAAC的DNS服务器地址分配–RDNSS"><a href="#SLAAC的DNS服务器地址分配–RDNSS" class="headerlink" title="SLAAC的DNS服务器地址分配–RDNSS"></a>SLAAC的DNS服务器地址分配–RDNSS</h1><p>源于一个较新的IPv6标准(RFC 8106)。从Windows 10 1703开始，Windows支持使用无状态获取DNS服务器了。<br>不过，DHCPv6 获取的DNS服务器优于通过RA报文获取的DNS服务器。<br>Android 从4.2开始支持，iOS 从4.1开始支持，MacOS从 10.7开始支持。</p><p>PS：Android至今都不支持DHCPv6，很气人。</p><p>来源： <a href="https://en.wikipedia.org/wiki/Comparison_of_IPv6_support_in_operating_systems">https://en.wikipedia.org/wiki/Comparison_of_IPv6_support_in_operating_systems</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://datatracker.ietf.org/doc/html/rfc8106">https://datatracker.ietf.org/doc/html/rfc8106</a><br><a href="https://www.networkacademy.io/ccna/ipv6/ipv6-on-windows">https://www.networkacademy.io/ccna/ipv6/ipv6-on-windows</a><br><a href="https://docs.microsoft.com/en-us/powershell/module/nettcpip/get-netipv6protocol?view=windowsserver2022-ps">https://docs.microsoft.com/en-us/powershell/module/nettcpip/get-netipv6protocol?view=windowsserver2022-ps</a></p><p>PS：随机标识符和临时地址，其他系统也会使用，如MacOS从10.7也开始使用了，Android iOS Linux等系统较新版本可能会支持。</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/DNS_recursive_Server/">建立自有递归DNS服务器</a></li><li><a href="https://songxwn.com/zabbix_data/">Zabbix：历史数据与趋势数据</a></li><li><a href="https://songxwn.com/ospf-route-FA/">HCIE Datacom-01.3 IGP高级特性-OSPF-其他特性</a></li><li><a href="https://www.qystu.cc/posts/63659.html">window上帝模式</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>IPv6</tag>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IPv6 简笔</title>
    <link href="/ipv6/"/>
    <url>/ipv6/</url>
    
    <content type="html"><![CDATA[<h1 id="IPv6简介"><a href="#IPv6简介" class="headerlink" title="IPv6简介"></a>IPv6简介</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>本质上IPv6就是为了解决IPv4地址空间不够而出现的。<br>长度由IPv4的32bit，扩展到了128bit。可以说IPv6地址数量近乎无限，以万亿为单位都显不足，如沧海一粟一般。</p><span id="more"></span><h2 id="表示方法"><a href="#表示方法" class="headerlink" title="表示方法"></a>表示方法</h2><p>IPv6有别于IPv4的点分十进制表示，使用了十六进制表示，以冒号 : 来每四位分割，其中0在前面的都可以省略。<br>如后面或中间有多个空位的，则可以通过 :: 来压缩表示。但只能压缩一次。<br>如 2000:0000:0000:0000:0000:0000:0000:0000，可以压缩为 2000:: 来表示。<br>2000:0000:0000:0000:0000:0000:0000:0022，则可以被压缩为 2000::22来表示。</p><h2 id="前缀长度（子网掩码）"><a href="#前缀长度（子网掩码）" class="headerlink" title="前缀长度（子网掩码）"></a>前缀长度（子网掩码）</h2><p>IPv6中的子网掩码叫做前缀长度，为128位。其中网络地址也可以用于互联,且无广播地址。所以 &#x2F;127的地址，有两个可用IP。</p><h1 id="IPv6地址分类"><a href="#IPv6地址分类" class="headerlink" title="IPv6地址分类"></a>IPv6地址分类</h1><h2 id="全球单播地址"><a href="#全球单播地址" class="headerlink" title="全球单播地址"></a>全球单播地址</h2><p>范围是 2000::&#x2F;3 ,对应IPv4的公网地址。</p><h2 id="链路本地地址"><a href="#链路本地地址" class="headerlink" title="链路本地地址"></a>链路本地地址</h2><p>范围是 FE80::&#x2F;10，此地址是必须有的。前64bit固定为FE80:: 后64bit的接口ID可以手动指定或者通过EUI-64算法自动生成（根据MAC地址生成），<br>不过一些操作系统，比如Windows使用了随机生成，是为了隐藏MAC地址。而且还生成了一个临时地址，用于对外访问。<br>接口ID还以根据网络环境变化，网络环境不变则固定，更改则改变。</p><h3 id="EUI-64生成算法"><a href="#EUI-64生成算法" class="headerlink" title="EUI-64生成算法"></a>EUI-64生成算法</h3><p>EUI-64 是将48bit的MAC地址，其第七位取反，然后中间填充FFFE组成64bit的接口ID。</p><p>参考：<a href="https://network.51cto.com/art/201910/603898.htm">https://network.51cto.com/art/201910/603898.htm</a></p><h2 id="本地环回地址"><a href="#本地环回地址" class="headerlink" title="本地环回地址"></a>本地环回地址</h2><p>范围是 ::1&#x2F;128 ，对应IPv4的 127.0.0.1&#x2F;8。</p><h2 id="未指定地址"><a href="#未指定地址" class="headerlink" title="未指定地址"></a>未指定地址</h2><p>范围是 ::&#x2F;128 , 对应IPv4的 0.0.0.0&#x2F;32。DAD重复地址检测协议使用此IP发送报文。</p><h2 id="唯一本地地址"><a href="#唯一本地地址" class="headerlink" title="唯一本地地址"></a>唯一本地地址</h2><p>范围是 FC00::&#x2F;7, 对应IPv4的私网地址。</p><h2 id="任播地址"><a href="#任播地址" class="headerlink" title="任播地址"></a>任播地址</h2><p>地址空间与全球单播地址共享，是一个IPv6特有的地址类型。可以分配给多个接口，<br>发送到任播地址的数据包，将传递到由该地址标识的最近地址。</p><h2 id="本地环回地址-1"><a href="#本地环回地址-1" class="headerlink" title="本地环回地址"></a>本地环回地址</h2><p>范围是 ::1&#x2F;128 ，对应IPv4的 127.0.0.1&#x2F;8。</p><h2 id="未指定地址-1"><a href="#未指定地址-1" class="headerlink" title="未指定地址"></a>未指定地址</h2><p>方位是 ::&#x2F;128 , 对应IPv4的 0.0.0.0&#x2F;32。DAD重复地址检测协议使用此IP发送报文。</p><h2 id="组播地址"><a href="#组播地址" class="headerlink" title="组播地址"></a>组播地址</h2><p>范围是 FE00::&#x2F;10,对应IPv4的组播地址。 IPv6去无广播地址，其功能基本由组播地址代替。</p><h2 id="被请求节点组播地址"><a href="#被请求节点组播地址" class="headerlink" title="被请求节点组播地址"></a>被请求节点组播地址</h2><p>范围是 FF02::1:FF00:0&#x2F;104，其地址是一种特殊的IPv6组播地址。<br>当接口配置了单播地址的时候，接口会自动生成被请求节点组播地址，并加入此组播组。用于地址解析、邻居发现和重复地址检测。<br>其中前缀固定为FF02::1:FF:, 后24bit，由单播IPv6的后24bit组成。<br>可以说此地址是为了代替广播地址产生，可以减少主机收到和无关的报文。</p><h1 id="IPv6地址自动分配方法"><a href="#IPv6地址自动分配方法" class="headerlink" title="IPv6地址自动分配方法"></a>IPv6地址自动分配方法</h1><h2 id="DHCPv6"><a href="#DHCPv6" class="headerlink" title="DHCPv6"></a>DHCPv6</h2><p>DHCPv6又可以称之为有状态分配，与IPv4的DHCP很相似。分发的地址由DHCPv6服务器控制。<br>可以分配IPv6地址，前缀长度、网关、DNS、域名等信息。</p><h2 id="SLAAC"><a href="#SLAAC" class="headerlink" title="SLAAC"></a>SLAAC</h2><p>无状态分配，由路由器通过 RS报文分发前缀信息，网关为分发前缀的路由。<br>其中后64bit的接口ID,由链路本地地址的后64bit组成。所以无状态分配的前缀必须大于等于&#x2F;64。<br>比较新的标准可以使用RA报文分配DNS服务器。之前是不支持分配的。</p><h2 id="无状态DHCPv6"><a href="#无状态DHCPv6" class="headerlink" title="无状态DHCPv6"></a>无状态DHCPv6</h2><p>IPv6前缀信息由RA报文分发，通过SLACC生成地址。其他信息，例如DNS使用DHCPv6分配。无状态+有状态结合的方法分发地址。</p><h1 id="IPv6工具"><a href="#IPv6工具" class="headerlink" title="IPv6工具"></a>IPv6工具</h1><h2 id="IPv6的子网计算器"><a href="#IPv6的子网计算器" class="headerlink" title="IPv6的子网计算器"></a>IPv6的子网计算器</h2><p><a href="http://www.gestioip.net/cgi-bin/subnet_calculator.cgi">http://www.gestioip.net/cgi-bin/subnet_calculator.cgi</a></p><h2 id="IPv6归属查询"><a href="#IPv6归属查询" class="headerlink" title="IPv6归属查询"></a>IPv6归属查询</h2><p><a href="http://ip.zxinc.org/ipquery">http://ip.zxinc.org/ipquery</a></p><h2 id="IPv6连接测试"><a href="#IPv6连接测试" class="headerlink" title="IPv6连接测试"></a>IPv6连接测试</h2><p><a href="http://www.test-ipv6.com/">http://www.test-ipv6.com</a></p><p>PS：写博客好麻烦，我好懒。</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/DNS_recursive_Server/">建立自有递归DNS服务器</a></li><li><a href="https://songxwn.com/zabbix_data/">Zabbix：历史数据与趋势数据</a></li><li><a href="https://songxwn.com/ospf-route-FA/">HCIE Datacom-01.3 IGP高级特性-OSPF-其他特性</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>network</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>IPv6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows 部署私有KMS服务器。</title>
    <link href="/KMS-Windows/"/>
    <url>/KMS-Windows/</url>
    
    <content type="html"><![CDATA[<p>程序下载地址：<a href="https://github.com/Wind4/vlmcsd">https://github.com/Wind4/vlmcsd</a></p><p>此文章介绍，怎么在Windows上运行vlmcsd，并注册为服务。</p><span id="more"></span><h2 id="下载解压程序"><a href="#下载解压程序" class="headerlink" title="下载解压程序"></a>下载解压程序</h2><p>去 <a href="https://github.com/Wind4/vlmcsd/releases">https://github.com/Wind4/vlmcsd/releases</a> 下载 binaries.tar.gz 文件。<br>下载到本地，解压。解压软件建议用 Bandizip <a href="https://www.bandisoft.com/bandizip">https://www.bandisoft.com/bandizip</a><br>将binaries&#x2F;Windows&#x2F;intel 文件夹重命名为vlmcsd，复制到C:\ 下面。</p><h2 id="注册为Windows-服务。"><a href="#注册为Windows-服务。" class="headerlink" title="注册为Windows 服务。"></a>注册为Windows 服务。</h2><p>以管理员身份运行CMD 或者 Power shell</p><p>输入 <code>cd C:\vlmcsd</code></p><p>&#x2F;&#x2F; 切换到程序目录</p><p>输入 <code>./vlmcsd-Windows-x64.exe -s -l C:\vlmcsd\KMS.log</code></p><p>&#x2F;&#x2F; -s 为安装为服务，-S 是删除服务，-l是指定输出日志文件路径；</p><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><p>输入 <code>Services.msc</code> 打开服务管理。</p><p>找到Key Management Server 服务器，启动服务，并确保启动类型为自动。</p><h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><p>将防火墙开放1688&#x2F;tcp端口，或者直接关闭防火墙。</p><h2 id="验证服务是否正常运行"><a href="#验证服务是否正常运行" class="headerlink" title="验证服务是否正常运行"></a>验证服务是否正常运行</h2><p>输入 <code>./vlmcs-Windows-x64.exe</code></p><p>显示 successful 字样，则代表部署成功。</p><div><h1>推荐文章<span style="font-size:0.45em; color:gray">（由<a href="https://github.com/huiwang/hexo-recommended-posts">hexo文章推荐插件</a>驱动）</span></h1><ul><li><a href="https://songxwn.com/Sublime_Text4_4143/">Sublime Text4 4143 安装激活</a></li><li><a href="https://songxwn.com/Sublime_Text4/">Sublime Text4 4126 安装激活</a></li><li><a href="https://chengzhaoxi.xyz/2bffefb0.html">Windows包管理工具scoop</a></li></ul></div>]]></content>
    
    
    <categories>
      
      <category>KMS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>部署私有KMS服务器，并设置自动激活Windows和office</title>
    <link href="/KMS/"/>
    <url>/KMS/</url>
    
    <content type="html"><![CDATA[<p>#Docker镜像地址： <a href="https://hub.docker.com/r/mogeko/vlmcsd">https://hub.docker.com/r/mogeko/vlmcsd</a></p><p>#此程序的单独地址： <a href="https://github.com/Wind4/vlmcsd">https://github.com/Wind4/vlmcsd</a></p><h2 id="准备环境："><a href="#准备环境：" class="headerlink" title="准备环境："></a>准备环境：</h2><p>一台支持Docker的Linux服务器【运行KMS服务器】，运行在内网的DNS服务器【SRV记录】，DHCP服务器【分配DNS域名】。</p><span id="more"></span><p><code>docker run -d -p 1688:1688 --restart=always  --name kms mogeko/vlmcsd </code></p><p>&#x2F;&#x2F; 部署KMS服务器，使用Docker ，端口为 TCP&#x2F;1688。</p><p><code>docker logs vlmcsd</code></p><p>2021-07-27 08:14:00: Listening on [::]:1688<br>2021-07-27 08:14:00: Listening on 0.0.0.0:1688<br>2021-07-27 08:14:00: vlmcsd svn1112-2-gf1a3c7f, built 2021-07-26 18:11:51 UTC started successfully</p><p>查看日志，确定正常工作。</p><h2 id="手动激活"><a href="#手动激活" class="headerlink" title="手动激活"></a>手动激活</h2><p><code>slmgr /ipk N69G4-B89J2-4G8F4-WWYCC-J464C</code></p><p>&#x2F;&#x2F;安装密钥</p><p>KMS安装密钥，密钥大全地址: <a href="https://docs.microsoft.com/zh-cn/windows-server/get-started/kmsclientkeys">https://docs.microsoft.com/zh-cn/windows-server/get-started/kmsclientkeys</a></p><p><code>slmgr /skms  192.168.1.13</code></p><p>&#x2F;&#x2F;设置KMS服务器IP</p><p><code>slmgr /ato</code></p><p>&#x2F;&#x2F;立即激活Windows</p><p><code>slmgr /xpr</code></p><p>&#x2F;&#x2F;查看激活剩余时间</p><p><code>slmgr /dlv</code></p><p>&#x2F;&#x2F;查看激活的详细信息</p><p>PS: 默认情况下，会激活 180天，然后每 10080 分钟自动续期一次（只要KMS服务器可用）</p><h2 id="使用DNS-DHCP自动激活"><a href="#使用DNS-DHCP自动激活" class="headerlink" title="使用DNS+DHCP自动激活"></a>使用DNS+DHCP自动激活</h2><p>首先添加 SRV 记录到DNS服务器的域名中</p><p>记录名字为 _vlmcs._tcp.</p><p>域控的话，直接有tcp的下级域，所以不需要加上TCP</p><p>然后进入你域控域名中的 _tcp文件夹，然后右键选择其他新记录，然后选择SRV记录。</p><p><img src="/images/pasted-2.png" srcset="/img/loading.gif" lazyload alt="upload successful"></p><p>然后填写以上，域名为你的域名。服务为 _vlmcs 协议为 _tcp 。端口号为 1688 。<br>提供此服务的主机为   KMS服务器的IP。</p><p>然后配置DHCP 服务器分配的DNS域名后缀为 esc.com即可。<br>之后，未激活的Windows 开机就会通过DHCP获取到 DNS 后缀，然后通过DNS域名中的SVR记录找到<br>KMS激活服务器，并自动激活。其中VL的OFFICE也会自动激活。</p><h2 id="Windows-下载-和-Office-VL版"><a href="#Windows-下载-和-Office-VL版" class="headerlink" title="Windows 下载 和 Office VL版"></a>Windows 下载 和 Office VL版</h2><p>建议使用 Office Tool Plus 安装VL版本，并安装许可证。</p><p>下载地址： <a href="https://otp.landian.vip/zh-cn/download.html">https://otp.landian.vip/zh-cn/download.html</a></p><p>Windows 第三方下载站： <a href="https://next.itellyou.cn/">https://next.itellyou.cn/</a></p>]]></content>
    
    
    <categories>
      
      <category>KMS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/hello-world/"/>
    <url>/hello-world/</url>
    
    <content type="html"><![CDATA[<h2 id="欢迎来到我的博客！"><a href="#欢迎来到我的博客！" class="headerlink" title="欢迎来到我的博客！"></a>欢迎来到我的博客！</h2><span id="more"></span><p>今天终于白嫖用 Github Pages,部署了一个自己的博客，打算发些自己写的技术文章。<br>使用Hexo+Next主题，然后套了Cloudflare的CDN。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
